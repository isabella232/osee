
functional analysis
	system and subsystem functions - show flow between functions to ensure the safety critical sections have been identified and marked
		get diagram for this - ask Dave for example and sanitize; use navigation example
	
Exponential increase in complexity
	There is an exponential increase in complexity as number of variants increases.	Why?
		- the team size has to increase (communicating with more people is hard)
		- complexity of the interactions of managing the commonality v.s. the specialization (in the req and other data)
		- increased task switching with many people working across the variants
	Ways to ease the cost of managing this complexity
		variant management
		change management
	
	Verification
		Structural Code Coverage
		
	Impact Analysis
		change report and task generation
		end to end traceability facilitaes analysis of impact of a given verification failure


The development of high-integrity systems is governed by stringent standards which require engineers to provide sufficient evidence of the quality not only of the developed artifacts but of the process by which these artifacts were developed. For instance, DO-178B "Software Considerations in Airborne Systems and Equipment Certification" provides guidelines for the production of avionics software: any software flying on civil aircraft must follow DO-178. Similar standards exist for other domains, such as automotive and industrial automation.

End-to-end traceability between requirements, design elements, source code, test cases, and documentation provides evidence to increase the confidence that the software satisfies stakeholders' expectations.
Since this evidence involves artifacts across the full development life-cycle, an integrated solution is needed in order to provide the required evidence in a cost effective manner.

Open System Engineering Environment (OSEE) is an integrated environment that enables developers to apply software engineering principles needed to build high integrity software. Using a user definable process and workflow and bidirectional traceability across the full development life-cycle, OSEE facilities the creation and management of the engineering artifacts that can be used as evidence when certifying the product's integrity.

In this presentation and live demonstration, we show how OSEE facilitates the qualification of a verification tool in the context of DO-178 level A (the highest criticality level). We use OSEE to design a traceability model across all development artifacts, and to put them in relation with our specific workflow, so as to assure that each development step is allocated, tracked and produces the expected output. In addition, we exploit OSEE's reporting capabilities to generate documented evidence of end-to-end traceability.

This presentation is prepared by Boeing and AdaCore. The OSEE team at Boeing provided support in the use of OSEE for the qualification of AdaCore tools in the context of DO-178. The lessons learned from this collaboration are expected to be applicable to anyone involved with DO-178B and more generally to those who are developing high integrity software.
