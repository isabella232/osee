/*******************************************************************************
 * Copyright (c) 2014 Boeing.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Boeing - initial API and implementation
 *******************************************************************************/

/** 
 * @author Roberto E. Escobar
 */
grammar org.eclipse.osee.orcs.script.dsl.OrcsScriptDsl hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate orcsScriptDsl "http://www.eclipse.org/osee/orcs/script/dsl/OrcsScriptDsl"

OrcsScript:
	(version=ScriptVersion)?
	(statements+=ScriptStatement)*;

	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS SCRIPT STATEMENTS
ScriptStatement:
	OsQueryStatement | OsVariableDeclaration;

	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS SCRIPT VERSION
ScriptVersion:
	name='script-version' version=SEMANTIC_VERSION ';';

QualifiedName:
	ID '.' ID;

	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS VARIABLES
OsVariableDeclaration returns OsExpression:
	{OsVariableDeclaration} 'var' elements+=OsVariable (',' elements+=OsVariable)* ';';

OsVariable returns OsExpression:
	{OsVariable} name=ID ('=' right=OsExpression)?;

OsTemplateId:
	ID ('.' ID)*;

OsExpression returns OsExpression:
	OsAssignment;

OsAssignment returns OsExpression:
	{OsAssignment} right=OsAssignmentValue;

OsAssignmentValue returns OsExpression:
	OsLiteral | //
	OsCollectionLiteral | //
	OsVariableReference | //
	OsQueryExpression;

OsLiteral returns OsExpression:
	OsBooleanLiteral | //
	OsNumberLiteral | //
	OsNullLiteral | //
	OsStringLiteral | //
	OsTemplateLiteral;

OsBooleanLiteral returns OsExpression:
	{OsBooleanLiteral} ('false' | isTrue?='true');

OsNullLiteral returns OsExpression:
	{OsNullLiteral} 'null';

OsNumberLiteral returns OsExpression:
	{OsNumberLiteral} value=Number;

OsStringLiteral returns OsExpression:
	{OsStringLiteral} value=STRING;

OsTemplateLiteral returns OsExpression:
	{OsTemplateLiteral} '{{' value=OsTemplateId '}}';

OsCollectionLiteral:
	OsListLiteral;

OsListLiteral:
	{OsListLiteral} '[' (elements+=OsExpression (',' elements+=OsExpression)*)? ']';

OsVariableReference returns OsExpression:
	{OsVariableReference} ref=[OsVariable];

OsDotExpression returns OsExpression:
	OsVariableReference ({OsDotExpression.ref=current} "." tail=[OsExpression])*;

OsQueryExpression returns OsExpression:
	{OsQueryExpression} name='start' 'from' query=OsQuery (clause+=OsClause)*;

	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS QUERY
OsQueryStatement:
	stmt=OsQueryExpression ';';

OsQuery:
	OsBranchQueryStatement | //
	OsTxQueryStatement;

OsCritieria:
	OsBranchCriteria | // 
	OsTxCriteria | // 
	OsItemCriteria;

OsClause:
	OsFindClause | //
	OsFollowClause;

	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DATA REFS/IDS
OsMetaTypeId returns OsExpression:
	OsDotExpression | //
	OsTemplateLiteral | //
	OsNumberLiteral | //
	OsStringLiteral;

OsTxId returns OsExpression:
	OsDotExpression | //
	OsTemplateLiteral | //
	OsNumberLiteral;

OsBranchId returns OsExpression:
	OsDotExpression | //
	OsTemplateLiteral | //
	OsNumberLiteral;

OsBranchIdOrName returns OsExpression:
	OsDotExpression | //
	OsTemplateLiteral | //
	OsNumberLiteral | //
	OsStringLiteral;

OsArtifactId returns OsExpression:
	OsDotExpression | //
	OsTemplateLiteral | //
	OsNumberLiteral;
	
OsArtifactGuid returns OsExpression:
	OsDotExpression | //
	OsTemplateLiteral | //
	OsStringLiteral;
	 
OsTxTimestamp returns OsExpression:
	OsDotExpression | //
	OsTemplateLiteral | //
	OsStringLiteral;

OsBranchName returns OsExpression:
	OsDotExpression | //
	OsTemplateLiteral | //
	OsStringLiteral;

OsBranchPattern returns OsExpression:
	OsDotExpression | //
	OsTemplateLiteral | //
	OsStringLiteral;

OsTxComment returns OsExpression:
	OsDotExpression | //
	OsTemplateLiteral | //
	OsStringLiteral;

OsTxCommentPattern returns OsExpression:
	OsDotExpression | //
	OsTemplateLiteral | //
	OsStringLiteral;

OsAlias returns OsExpression:
	OsDotExpression | //
	OsTemplateLiteral | //
	OsStringLiteral;

OsLimit returns OsExpression:
	OsDotExpression |
	OsTemplateLiteral | //
	OsNumberLiteral;

OsAttributeValue returns OsExpression:
	OsDotExpression | //
	OsTemplateLiteral | //
	OsStringLiteral;

	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> FIELDS 
OsFieldId returns ecore::EString:
	ID | OsFieldMatchingKeywords;

	// Add any fields that conflict with grammar keywords
OsFieldMatchingKeywords:
	'name' | //
	'branch-id' | //
	'archived' | //
	'state' | //
	'tx-id' | //
	'comment' | //
	'date' | //
	'author-id' | //
	'commit-id' | //
	'type' | //
	'gamma-id' | // 
	'art-id' | //
	'art-type' | //
	'id';

	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ENUMERATIONS
enum OsBranchState:
	CREATED='created' | // 
	MODIFIED='modified' | // 
	COMMITTED='committed' | // 
	REBASELINED='rebaselined' | // 
	DELETED='deleted' | // 
	REBASELINE_IN_PROGRESS='rebaseline_in_progress' | //
	COMMIT_IN_PROGRESS='commit_in_progress' | //
	CREATION_IN_PROGRESS='creation_in_progress' | //
	DELETE_IN_PROGRESS='delete_in_progress' | //
	PURGE_IN_PROGRESS='purge_in_progress' | // 
	PURGED='purged';

enum OsBranchType:
	WORKING='working' | //
	BASELINE='baseline' | //
	MERGE='merge' | //
	SYSTEM_ROOT='system-root' | //
	PORT='port';

enum OsBranchArchiveFilter:
	ARCHIVED_EXCLUDED='excluded' | //
	ARCHIVED_INCLUDED='included';

enum OsTxType:
	BASELINE='baseline' | //
	NON_BASELINE='non-baseline';

enum OsRelationSide:
	SIDE_A='side-A' | //
	SIDE_B='side-B';

enum OsOperator:
	EQUAL="=" | //
	NOT_EQUAL="!=" | //
	LESS_THAN="<" | //
	LESS_THAN_EQ="<=" | //
	GREATER_THAN=">" | //
	GREATER_THAN_EQ=">=";

enum OsNonEqualOperator:
	NOT_EQUAL="!=" | //
	LESS_THAN="<" | //
	LESS_THAN_EQ="<=" | //
	GREATER_THAN=">" | //
	GREATER_THAN_EQ=">=";

enum OsExistenceOperator:
	EXISTS='exists' | //
	NOT_EXISTS='not-exists';

enum OsQueryOption:
	CONTAINS='contains' | //
	CASE__MATCH='match-case' | //
	CASE__IGNORE='ignore-case' | //
	EXISTANCE__EXISTS='not-exists' | //
	EXISTANCE__NOT_EXISTS='exists' | //
	TOKEN_COUNT__MATCH='match-token-count' | //
	TOKEN_COUNT__IGNORE='ignore-token-count' | //
	TOKEN_DELIMITER__EXACT='exact-delim' | //
	TOKEN_DELIMITER__WHITESPACE='whitespace-delim' | //
	TOKEN_DELIMITER__ANY='any-delim' | //
	TOKEN_MATCH_ORDER__ANY='any-order' | //
	TOKEN_MATCH_ORDER__MATCH='match-order';



	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS COLLECT
OsCollectTypeId:
	ID | 'branches' | 'txs' | 'artifacts' | 'attributes' | 'relations';

OsCollectClause:
	name='collect' expression=OsCollectObjectExpression (limit=OsLimitClause)?;

OsLimitClause:
	name='limit' limit=OsLimit;

OsCollectExpression:
	OsCollectAllFieldsExpression | //
	OsCollectItemExpression;

OsCollectItemExpression returns OsCollectExpression:
	OsCollectObjectExpression | OsCollectFieldExpression;

OsCollectObjectExpression returns OsCollectExpression:
	{OsCollectObjectExpression} name=OsCollectTypeId ('as' alias=OsAlias)? //
	'{' (expressions+=OsCollectAllFieldsExpression | //
	expressions+=OsCollectItemExpression (',' expressions+=OsCollectItemExpression)*) '}';

OsCollectAllFieldsExpression returns OsCollectExpression:
	{OsCollectAllFieldsExpression} name='*';

OsCollectFieldExpression returns OsCollectExpression:
	{OsCollectFieldExpression} name=OsFieldId ('as' alias=OsAlias)?;

	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS FIND
OsFindClause:
	name='find' query=OsObjectQuery;

OsObjectQuery:
	OsArtifactQueryStatement;

	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS BRANCH QUERY
OsBranchQueryStatement:
	name='branch' data=OsBranchQuery (collect=OsCollectClause)?;

OsBranchQuery:
	OsBranchQueryById | //
	OsBranchQueryAll | //
	OsBranchQueryByPredicate;

OsBranchQueryById:
	name=OsBranchIdOrName;

OsBranchQueryAll:
	name='*';

OsBranchQueryByPredicate:
	name='where' criteria+=OsBranchCriteria ('and' criteria+=OsBranchCriteria)*;

OsBranchCriteria:
	OsBranchNameCriteria | //
	OsBranchTypeCriteria | //
	OsBranchStateCriteria | //
	OsBranchArchivedCriteria | //
	OsBranchIdCriteria | //
	OsBranchOfCriteria;

OsBranchNameCriteria:
	name='name' clause=OsBranchNameClause;

OsBranchNameClause:
	OsBranchNameEqualsClause | //
	OsBranchNamePatternClause;

OsBranchNameEqualsClause:
	name='=' value=OsBranchName;

OsBranchNamePatternClause:
	name='matches' value=OsBranchPattern;

OsBranchTypeCriteria:
	name='type' '=' (types+=OsBranchType | '[' types+=OsBranchType (',' types+=OsBranchType)* ']');

OsBranchStateCriteria:
	name='state' '=' (states+=OsBranchState | '[' states+=OsBranchState (',' states+=OsBranchState)* ']');

OsBranchArchivedCriteria:
	name='archived' 'is' filter=OsBranchArchiveFilter;

OsBranchIdCriteria:
	name='branch-id' '=' (ids+=OsBranchId | '[' ids+=OsBranchId (',' ids+=OsBranchId)* ']');

OsBranchOfCriteria:
	name='branch' 'is' clause=OsBranchClause;

OsBranchClause:
	OsBranchChildOfClause | //
	OsBranchParentOfClause;

OsBranchChildOfClause:
	name='child-of' id=OsBranchId;

OsBranchParentOfClause:
	name='parent-of' id=OsBranchId;

	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS TXS QUERY
OsTxQueryStatement:
	name='tx' data=OsTxQuery (collect=OsCollectClause)?;

OsTxQuery:
	OsTxQueryById | //
	OsTxQueryAll | //
	OsTxQueryByPredicate;

OsTxQueryById:
	name=OsTxId;

OsTxQueryAll:
	name='*';

OsTxQueryByPredicate:
	name='where' criteria+=OsTxCriteria ('and' criteria+=OsTxCriteria)*;

OsTxCriteria:
	OsTxIdCriteria | //
	OsTxTypeCriteria | //
	OsTxCommentCriteria | //
	OsTxBranchIdCriteria | //
	OsTxHeadOfBranchIdCriteria | //
	OsTxAuthorIdCriteria | //
	OsTxCommitIdCriteria | //
	OsTxTimestampCriteria;

OsTxTypeCriteria:
	name='type' "=" (types+=OsTxType | '[' types+=OsTxType (',' types+=OsTxType)* ']');

OsTxCommentCriteria:
	name='comment' clause=OsTxCommentClause;

OsTxCommentClause:
	OsTxCommentEqualsClause | //
	OsTxCommentPatternClause;

OsTxCommentEqualsClause:
	name='=' value=OsTxComment;

OsTxCommentPatternClause:
	name='matches' value=OsTxCommentPattern;

OsTxBranchIdCriteria:
	name='branch-id' '=' (ids+=OsBranchId | '[' ids+=OsBranchId (',' ids+=OsBranchId)* ']');

OsTxHeadOfBranchIdCriteria:
	name='is-head' 'of' 'branch-id' id=OsBranchId;

OsTxAuthorIdCriteria:
	name='author-id' '=' (ids+=OsArtifactId | '[' ids+=OsArtifactId (',' ids+=OsArtifactId)* ']');

OsTxCommitIdCriteria:
	name='commit-id' clause=OsTxCommitIdClause;

OsTxCommitIdClause:
	OsTxCommitIdEqualsClause | //
	OsTxCommitIdIsNullClause;

OsTxCommitIdEqualsClause:
	name='=' (ids+=OsArtifactId | '[' ids+=OsArtifactId (',' ids+=OsArtifactId)* ']');

OsTxCommitIdIsNullClause:
	name='is' 'null';

OsTxIdCriteria:
	name='tx-id' clause=OsTxIdClause;

OsTxIdClause:
	OsTxIdEqualsClause | //
	OsTxIdOpClause | //
	OsTxIdRangeClause;

OsTxIdEqualsClause:
	name="=" (ids+=OsTxId | '[' ids+=OsTxId (',' ids+=OsTxId)* ']');

OsTxIdOpClause:
	op=OsNonEqualOperator id=OsTxId;

OsTxIdRangeClause:
	name='in' '(' fromId=OsTxId '..' toId=OsTxId ')';

OsTxTimestampCriteria:
	name='date' clause=OsTxTimestampClause;

OsTxTimestampClause:
	OsTxTimestampOpClause | // 
	OsTxTimestampRangeClause;

OsTxTimestampOpClause:
	op=OsOperator timestamp=OsTxTimestamp;

OsTxTimestampRangeClause:
	name='in' '(' from=OsTxTimestamp '..' to=OsTxTimestamp ')';

	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS ARTIFACT QUERY
OsArtifactQueryStatement:
	name='artifacts' data=OsArtifactQuery (collect=OsCollectClause)?;

OsArtifactQuery:
	OsArtifactQueryAll | //
	OsArtifactQueryByPredicate;

OsArtifactQueryAll:
	name='*';

OsArtifactQueryByPredicate:
	name='where' criteria+=OsItemCriteria ('and' criteria+=OsItemCriteria)*;

OsItemCriteria:
	OsArtifactCriteria | //
	OsAttributeCriteria | //
	OsRelationCriteria;

OsArtifactCriteria:
	OsArtifactIdCriteria | //
	OsArtifactTypeCriteria | //
	OsArtifactGuidCriteria;

OsArtifactIdCriteria:
	name='art-id' '=' (ids+=OsArtifactId | '[' ids+=OsArtifactId (',' ids+=OsArtifactId)* ']');

OsArtifactGuidCriteria:
	name='art-guid' '=' (ids+=OsArtifactGuid | '[' ids+=OsArtifactGuid (',' ids+=OsArtifactGuid)* ']');

OsArtifactTypeCriteria:
	name='art-type' clause=OsArtifactTypeClause;

OsArtifactTypeClause:
	OsArtifactTypeEqualsClause | //
	OsArtifactTypeInstanceOfClause;

OsArtifactTypeEqualsClause:
	name='=' (types+=OsMetaTypeId | '[' types+=OsMetaTypeId (',' types+=OsMetaTypeId)* ']');

OsArtifactTypeInstanceOfClause:
	name='instance-of' (types+=OsMetaTypeId | '[' types+=OsMetaTypeId (',' types+=OsMetaTypeId)* ']');

OsAttributeCriteria:
	name='attribute' clause=OsAttributeClause;

OsAttributeClause:
	OsAttributeExistClause | //
	OseAttributeOpClause;

OsAttributeExistClause:
	'type' '=' (types+=OsMetaTypeId | '[' types+=OsMetaTypeId (',' types+=OsMetaTypeId)* ']') name='exists';

OseAttributeOpClause:
	'type' name='=' (types+=OsMetaTypeId | '[' types+=OsMetaTypeId (',' types+=OsMetaTypeId)* ']') // 
	(options+=OsQueryOption | '[' options+=OsQueryOption (',' options+=OsQueryOption)* ']')? //
	(values+=OsAttributeValue | '[' values+=OsAttributeValue (',' values+=OsAttributeValue)* ']');

OsRelationCriteria:
	name='relation' clause=OsRelationClause;

OsRelationClause:
	OsRelationExistClause | //
	OsRelatedToClause;

OsRelationExistClause:
	name='type' '=' type=OsMetaTypeId op=OsExistenceOperator ('on' side=OsRelationSide)?;

OsRelatedToClause:
	name='type' '=' type=OsMetaTypeId 'on' side=OsRelationSide 'id' '=' //
	(ids+=OsArtifactId | '[' ids+=OsArtifactId (',' ids+=OsArtifactId)* ']');

	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS FOLLOW
OsFollowClause:
	name='follow' stmt=OsFollowStatement;

OsFollowStatement:
	OsFollowRelationType;

OsFollowRelationType:
	name='relation' 'type' '=' type=OsMetaTypeId 'to' side=OsRelationSide // 
	('where' criteria+=OsItemCriteria ('and' criteria+=OsItemCriteria)*)? // 
	(collect=OsCollectClause)?;

	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> TERMINALS
terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;

terminal SEMANTIC_VERSION returns ecore::EString:
	('0'..'9')+ '.' ('0'..'9')+ '.' ('0'..'9');

terminal ID returns ecore::EString:
	('^')? ('a'..'z' | 'A'..'Z') ('-' | '_' | 'a'..'z' | 'A'..'Z' | '0'..'9')*;

terminal STRING returns ecore::EString:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";

terminal fragment SIGN:
	'+' | '-';

Number hidden():
	HEX | DECIMAL | INT | FLOAT;

terminal HEX:
	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F')+
	(('b' | 'B') ('i' | 'I') | ('l' | 'L'))?;

terminal INT:
	SIGN? ('0'..'9')+;

terminal DECIMAL:
	INT ('.' INT)?;

terminal FLOAT:
	INT
	(('e' | 'E') INT)?
	(('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;

	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> END
