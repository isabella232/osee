/*
 * generated by Xtext
 */
package org.eclipse.osee.orcs.script.dsl.scoping;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.osee.orcs.script.dsl.orcsScriptDsl.OsDotExpression;
import org.eclipse.xtext.scoping.IScope;

/**
 * This class contains custom scoping description. see : http://www.eclipse.org/Xtext/documentation.html#scoping on how
 * and when to use it
 */
public class OrcsScriptDslScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {
   //   @Inject
   //   private IQualifiedNameProvider qualifiedNameProvider;
   //   public IScope scope_OsQueryStatement(OsQueryStatement stmt, EReference reference) {
   //      return Scopes.scopeFor(stmt.getVar().getType().getOps());
   //   }

   public IScope scope_OsDotExpression_tail(OsDotExpression expression, EReference reference) {
      IScope scope = IScope.NULLSCOPE;

      //      OsExpression expRef = expression.getRef();
      //      if (expRef instanceof OsDotExpression) {
      //         OsDotExpression dotExp = (OsDotExpression) expRef;
      //         OsExpression tail = dotExp.getTail();
      //      } else if (expRef instanceof OsVariableReference) {
      //         OsVariableReference variableRef = (OsVariableReference) expRef;
      //         OsVariable variable = variableRef.getRef();
      //         OsExpression right = variable.getRight();
      //
      //         if (right instanceof OsAssignment) {
      //            OsAssignment assignment = (OsAssignment) right;
      //            System.out.println(assignment);
      //         }
      //         //         Scopes.scopeFor(((OsVariable) expRef).getRight());
      //      }

      //      IScope delegateGetScope = delegateGetScope(context, reference);
      //
      //      final QualifiedName fullyQualifiedName = qualifiedNameProvider.getFullyQualifiedName(context);
      //      Predicate<IEObjectDescription> filter = new Predicate<IEObjectDescription>() {
      //         @Override
      //         public boolean apply(IEObjectDescription input) {
      //            return !fullyQualifiedName.equals(input.getQualifiedName());
      //         }
      //      };
      //      IScope result = new FilteringScope(delegateGetScope, filter);
      //      //      IScope toReturn = IScope.NULLSCOPE;
      //      //      OsExpression reference = exp.getRef();
      //      //      Iterable<EObject> eAllContents = reference.eAllContents();
      //      //      IScope scopeFor = Scopes.scopeFor(eAllContents);
      //
      //      //      switch (head) {
      //      //          EntityRef : Scopes::scopeFor(head.entity.features)
      //      //          DotExpression : {
      //      //              val tail = head.tail
      //      //              switch (tail) {
      //      //                  Attribute : IScope::NULLSCOPE
      //      //                  Reference : Scopes::scopeFor(tail.type.features)
      //      //                  default: IScope::NULLSCOPE
      //      //              }
      //      //          }
      //      //           
      //      return result;
      //   }
      //   public IScope scope_OsMetaTypeId_ref(OsMetaTypeId context, EReference reference) {
      //      return Scopes.scopeFor(stmt.getVar().getType().getOps());
      return scope;
   }

}
