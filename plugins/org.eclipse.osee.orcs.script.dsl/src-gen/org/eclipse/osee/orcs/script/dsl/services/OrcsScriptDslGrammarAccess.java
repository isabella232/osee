/*
* generated by Xtext
*/
package org.eclipse.osee.orcs.script.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class OrcsScriptDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class OrcsScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrcsScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVersionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVersionScriptVersionParserRuleCall_0_0 = (RuleCall)cVersionAssignment_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsScriptStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//OrcsScript:
		//	version=ScriptVersion? statements+=ScriptStatement*;
		public ParserRule getRule() { return rule; }

		//version=ScriptVersion? statements+=ScriptStatement*
		public Group getGroup() { return cGroup; }

		//version=ScriptVersion?
		public Assignment getVersionAssignment_0() { return cVersionAssignment_0; }

		//ScriptVersion
		public RuleCall getVersionScriptVersionParserRuleCall_0_0() { return cVersionScriptVersionParserRuleCall_0_0; }

		//statements+=ScriptStatement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//ScriptStatement
		public RuleCall getStatementsScriptStatementParserRuleCall_1_0() { return cStatementsScriptStatementParserRuleCall_1_0; }
	}

	public class ScriptStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScriptStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsQueryStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS SCRIPT STATEMENTS
		// ScriptStatement:
		//	OsQueryStatement | OsVariableDeclaration;
		public ParserRule getRule() { return rule; }

		//OsQueryStatement | OsVariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsQueryStatement
		public RuleCall getOsQueryStatementParserRuleCall_0() { return cOsQueryStatementParserRuleCall_0; }

		//OsVariableDeclaration
		public RuleCall getOsVariableDeclarationParserRuleCall_1() { return cOsVariableDeclarationParserRuleCall_1; }
	}

	public class ScriptVersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScriptVersion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameScriptVersionKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cVersionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVersionSEMANTIC_VERSIONTerminalRuleCall_1_0 = (RuleCall)cVersionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS SCRIPT VERSION
		// ScriptVersion:
		//	name="script-version" version=SEMANTIC_VERSION ";";
		public ParserRule getRule() { return rule; }

		//name="script-version" version=SEMANTIC_VERSION ";"
		public Group getGroup() { return cGroup; }

		//name="script-version"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"script-version"
		public Keyword getNameScriptVersionKeyword_0_0() { return cNameScriptVersionKeyword_0_0; }

		//version=SEMANTIC_VERSION
		public Assignment getVersionAssignment_1() { return cVersionAssignment_1; }

		//SEMANTIC_VERSION
		public RuleCall getVersionSEMANTIC_VERSIONTerminalRuleCall_1_0() { return cVersionSEMANTIC_VERSIONTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//QualifiedName:
		//	ID "." ID;
		public ParserRule getRule() { return rule; }

		//ID "." ID
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}

	public class OsVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOsVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsOsVariableParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElementsOsVariableParserRuleCall_3_1_0 = (RuleCall)cElementsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS VARIABLES
		// OsVariableDeclaration
		//returns OsExpression:
		//	{OsVariableDeclaration} "var" elements+=OsVariable ("," elements+=OsVariable)* ";";
		public ParserRule getRule() { return rule; }

		//{OsVariableDeclaration} "var" elements+=OsVariable ("," elements+=OsVariable)* ";"
		public Group getGroup() { return cGroup; }

		//{OsVariableDeclaration}
		public Action getOsVariableDeclarationAction_0() { return cOsVariableDeclarationAction_0; }

		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }

		//elements+=OsVariable
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//OsVariable
		public RuleCall getElementsOsVariableParserRuleCall_2_0() { return cElementsOsVariableParserRuleCall_2_0; }

		//("," elements+=OsVariable)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//elements+=OsVariable
		public Assignment getElementsAssignment_3_1() { return cElementsAssignment_3_1; }

		//OsVariable
		public RuleCall getElementsOsVariableParserRuleCall_3_1_0() { return cElementsOsVariableParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class OsVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOsVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRightOsExpressionParserRuleCall_2_1_0 = (RuleCall)cRightAssignment_2_1.eContents().get(0);
		
		//OsVariable returns OsExpression:
		//	{OsVariable} name=ID ("=" right=OsExpression)?;
		public ParserRule getRule() { return rule; }

		//{OsVariable} name=ID ("=" right=OsExpression)?
		public Group getGroup() { return cGroup; }

		//{OsVariable}
		public Action getOsVariableAction_0() { return cOsVariableAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("=" right=OsExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//right=OsExpression
		public Assignment getRightAssignment_2_1() { return cRightAssignment_2_1; }

		//OsExpression
		public RuleCall getRightOsExpressionParserRuleCall_2_1_0() { return cRightOsExpressionParserRuleCall_2_1_0; }
	}

	public class OsTemplateIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTemplateId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//OsTemplateId:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class OsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsExpression");
		private final RuleCall cOsAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OsExpression:
		//	OsAssignment;
		public ParserRule getRule() { return rule; }

		//OsAssignment
		public RuleCall getOsAssignmentParserRuleCall() { return cOsAssignmentParserRuleCall; }
	}

	public class OsAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOsAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightOsAssignmentValueParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//OsAssignment returns OsExpression:
		//	{OsAssignment} right=OsAssignmentValue;
		public ParserRule getRule() { return rule; }

		//{OsAssignment} right=OsAssignmentValue
		public Group getGroup() { return cGroup; }

		//{OsAssignment}
		public Action getOsAssignmentAction_0() { return cOsAssignmentAction_0; }

		//right=OsAssignmentValue
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//OsAssignmentValue
		public RuleCall getRightOsAssignmentValueParserRuleCall_1_0() { return cRightOsAssignmentValueParserRuleCall_1_0; }
	}

	public class OsAssignmentValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsAssignmentValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsCollectionLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsVariableReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOsQueryExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//OsAssignmentValue returns OsExpression:
		//	OsLiteral //
		// //
		// //
		// | OsCollectionLiteral | OsVariableReference | OsQueryExpression;
		public ParserRule getRule() { return rule; }

		//OsLiteral //
		// //
		// //
		// | OsCollectionLiteral | OsVariableReference | OsQueryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsLiteral
		public RuleCall getOsLiteralParserRuleCall_0() { return cOsLiteralParserRuleCall_0; }

		//OsCollectionLiteral
		public RuleCall getOsCollectionLiteralParserRuleCall_1() { return cOsCollectionLiteralParserRuleCall_1; }

		//OsVariableReference
		public RuleCall getOsVariableReferenceParserRuleCall_2() { return cOsVariableReferenceParserRuleCall_2; }

		//OsQueryExpression
		public RuleCall getOsQueryExpressionParserRuleCall_3() { return cOsQueryExpressionParserRuleCall_3; }
	}

	public class OsLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsNumberLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsNullLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOsStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOsTemplateLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//OsLiteral returns OsExpression:
		//	OsBooleanLiteral //
		// //
		// //
		// //
		// | OsNumberLiteral | OsNullLiteral | OsStringLiteral | OsTemplateLiteral;
		public ParserRule getRule() { return rule; }

		//OsBooleanLiteral //
		// //
		// //
		// //
		// | OsNumberLiteral | OsNullLiteral | OsStringLiteral | OsTemplateLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsBooleanLiteral
		public RuleCall getOsBooleanLiteralParserRuleCall_0() { return cOsBooleanLiteralParserRuleCall_0; }

		//OsNumberLiteral
		public RuleCall getOsNumberLiteralParserRuleCall_1() { return cOsNumberLiteralParserRuleCall_1; }

		//OsNullLiteral
		public RuleCall getOsNullLiteralParserRuleCall_2() { return cOsNullLiteralParserRuleCall_2; }

		//OsStringLiteral
		public RuleCall getOsStringLiteralParserRuleCall_3() { return cOsStringLiteralParserRuleCall_3; }

		//OsTemplateLiteral
		public RuleCall getOsTemplateLiteralParserRuleCall_4() { return cOsTemplateLiteralParserRuleCall_4; }
	}

	public class OsBooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOsBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cIsTrueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_1_1_0 = (Keyword)cIsTrueAssignment_1_1.eContents().get(0);
		
		//OsBooleanLiteral returns OsExpression:
		//	{OsBooleanLiteral} ("false" | isTrue?="true");
		public ParserRule getRule() { return rule; }

		//{OsBooleanLiteral} ("false" | isTrue?="true")
		public Group getGroup() { return cGroup; }

		//{OsBooleanLiteral}
		public Action getOsBooleanLiteralAction_0() { return cOsBooleanLiteralAction_0; }

		//"false" | isTrue?="true"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"false"
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }

		//isTrue?="true"
		public Assignment getIsTrueAssignment_1_1() { return cIsTrueAssignment_1_1; }

		//"true"
		public Keyword getIsTrueTrueKeyword_1_1_0() { return cIsTrueTrueKeyword_1_1_0; }
	}

	public class OsNullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsNullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOsNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OsNullLiteral returns OsExpression:
		//	{OsNullLiteral} "null";
		public ParserRule getRule() { return rule; }

		//{OsNullLiteral} "null"
		public Group getGroup() { return cGroup; }

		//{OsNullLiteral}
		public Action getOsNullLiteralAction_0() { return cOsNullLiteralAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class OsNumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsNumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOsNumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//OsNumberLiteral returns OsExpression:
		//	{OsNumberLiteral} value=Number;
		public ParserRule getRule() { return rule; }

		//{OsNumberLiteral} value=Number
		public Group getGroup() { return cGroup; }

		//{OsNumberLiteral}
		public Action getOsNumberLiteralAction_0() { return cOsNumberLiteralAction_0; }

		//value=Number
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Number
		public RuleCall getValueNumberParserRuleCall_1_0() { return cValueNumberParserRuleCall_1_0; }
	}

	public class OsStringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsStringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOsStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//OsStringLiteral returns OsExpression:
		//	{OsStringLiteral} value=STRING;
		public ParserRule getRule() { return rule; }

		//{OsStringLiteral} value=STRING
		public Group getGroup() { return cGroup; }

		//{OsStringLiteral}
		public Action getOsStringLiteralAction_0() { return cOsStringLiteralAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class OsTemplateLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTemplateLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOsTemplateLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueOsTemplateIdParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OsTemplateLiteral returns OsExpression:
		//	{OsTemplateLiteral} "{{" value=OsTemplateId "}}";
		public ParserRule getRule() { return rule; }

		//{OsTemplateLiteral} "{{" value=OsTemplateId "}}"
		public Group getGroup() { return cGroup; }

		//{OsTemplateLiteral}
		public Action getOsTemplateLiteralAction_0() { return cOsTemplateLiteralAction_0; }

		//"{{"
		public Keyword getLeftCurlyBracketLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketLeftCurlyBracketKeyword_1; }

		//value=OsTemplateId
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//OsTemplateId
		public RuleCall getValueOsTemplateIdParserRuleCall_2_0() { return cValueOsTemplateIdParserRuleCall_2_0; }

		//"}}"
		public Keyword getRightCurlyBracketRightCurlyBracketKeyword_3() { return cRightCurlyBracketRightCurlyBracketKeyword_3; }
	}

	public class OsCollectionLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsCollectionLiteral");
		private final RuleCall cOsListLiteralParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OsCollectionLiteral:
		//	OsListLiteral;
		public ParserRule getRule() { return rule; }

		//OsListLiteral
		public RuleCall getOsListLiteralParserRuleCall() { return cOsListLiteralParserRuleCall; }
	}

	public class OsListLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsListLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOsListLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsOsExpressionParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsOsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OsListLiteral:
		//	{OsListLiteral} "[" (elements+=OsExpression ("," elements+=OsExpression)*)? "]";
		public ParserRule getRule() { return rule; }

		//{OsListLiteral} "[" (elements+=OsExpression ("," elements+=OsExpression)*)? "]"
		public Group getGroup() { return cGroup; }

		//{OsListLiteral}
		public Action getOsListLiteralAction_0() { return cOsListLiteralAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(elements+=OsExpression ("," elements+=OsExpression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=OsExpression
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//OsExpression
		public RuleCall getElementsOsExpressionParserRuleCall_2_0_0() { return cElementsOsExpressionParserRuleCall_2_0_0; }

		//("," elements+=OsExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=OsExpression
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//OsExpression
		public RuleCall getElementsOsExpressionParserRuleCall_2_1_1_0() { return cElementsOsExpressionParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class OsVariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsVariableReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOsVariableReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefOsVariableCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefOsVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cRefOsVariableCrossReference_1_0.eContents().get(1);
		
		//OsVariableReference returns OsExpression:
		//	{OsVariableReference} ref=[OsVariable];
		public ParserRule getRule() { return rule; }

		//{OsVariableReference} ref=[OsVariable]
		public Group getGroup() { return cGroup; }

		//{OsVariableReference}
		public Action getOsVariableReferenceAction_0() { return cOsVariableReferenceAction_0; }

		//ref=[OsVariable]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[OsVariable]
		public CrossReference getRefOsVariableCrossReference_1_0() { return cRefOsVariableCrossReference_1_0; }

		//ID
		public RuleCall getRefOsVariableIDTerminalRuleCall_1_0_1() { return cRefOsVariableIDTerminalRuleCall_1_0_1; }
	}

	public class OsDotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsDotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOsVariableReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOsDotExpressionRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTailAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cTailOsExpressionCrossReference_1_2_0 = (CrossReference)cTailAssignment_1_2.eContents().get(0);
		private final RuleCall cTailOsExpressionIDTerminalRuleCall_1_2_0_1 = (RuleCall)cTailOsExpressionCrossReference_1_2_0.eContents().get(1);
		
		//OsDotExpression returns OsExpression:
		//	OsVariableReference ({OsDotExpression.ref=current} "." tail=[OsExpression])*;
		public ParserRule getRule() { return rule; }

		//OsVariableReference ({OsDotExpression.ref=current} "." tail=[OsExpression])*
		public Group getGroup() { return cGroup; }

		//OsVariableReference
		public RuleCall getOsVariableReferenceParserRuleCall_0() { return cOsVariableReferenceParserRuleCall_0; }

		//({OsDotExpression.ref=current} "." tail=[OsExpression])*
		public Group getGroup_1() { return cGroup_1; }

		//{OsDotExpression.ref=current}
		public Action getOsDotExpressionRefAction_1_0() { return cOsDotExpressionRefAction_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//tail=[OsExpression]
		public Assignment getTailAssignment_1_2() { return cTailAssignment_1_2; }

		//[OsExpression]
		public CrossReference getTailOsExpressionCrossReference_1_2_0() { return cTailOsExpressionCrossReference_1_2_0; }

		//ID
		public RuleCall getTailOsExpressionIDTerminalRuleCall_1_2_0_1() { return cTailOsExpressionIDTerminalRuleCall_1_2_0_1; }
	}

	public class OsQueryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsQueryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOsQueryExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameStartKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQueryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQueryOsQueryParserRuleCall_3_0 = (RuleCall)cQueryAssignment_3.eContents().get(0);
		private final Assignment cClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClauseOsClauseParserRuleCall_4_0 = (RuleCall)cClauseAssignment_4.eContents().get(0);
		
		//OsQueryExpression returns OsExpression:
		//	{OsQueryExpression} name="start" "from" query=OsQuery clause+=OsClause*;
		public ParserRule getRule() { return rule; }

		//{OsQueryExpression} name="start" "from" query=OsQuery clause+=OsClause*
		public Group getGroup() { return cGroup; }

		//{OsQueryExpression}
		public Action getOsQueryExpressionAction_0() { return cOsQueryExpressionAction_0; }

		//name="start"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"start"
		public Keyword getNameStartKeyword_1_0() { return cNameStartKeyword_1_0; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//query=OsQuery
		public Assignment getQueryAssignment_3() { return cQueryAssignment_3; }

		//OsQuery
		public RuleCall getQueryOsQueryParserRuleCall_3_0() { return cQueryOsQueryParserRuleCall_3_0; }

		//clause+=OsClause*
		public Assignment getClauseAssignment_4() { return cClauseAssignment_4; }

		//OsClause
		public RuleCall getClauseOsClauseParserRuleCall_4_0() { return cClauseOsClauseParserRuleCall_4_0; }
	}

	public class OsQueryStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsQueryStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStmtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStmtOsQueryExpressionParserRuleCall_0_0 = (RuleCall)cStmtAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS QUERY
		// OsQueryStatement:
		//	stmt=OsQueryExpression ";";
		public ParserRule getRule() { return rule; }

		//stmt=OsQueryExpression ";"
		public Group getGroup() { return cGroup; }

		//stmt=OsQueryExpression
		public Assignment getStmtAssignment_0() { return cStmtAssignment_0; }

		//OsQueryExpression
		public RuleCall getStmtOsQueryExpressionParserRuleCall_0_0() { return cStmtOsQueryExpressionParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class OsQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsQuery");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsBranchQueryStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTxQueryStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OsQuery:
		//	OsBranchQueryStatement //
		// | OsTxQueryStatement;
		public ParserRule getRule() { return rule; }

		//OsBranchQueryStatement //
		// | OsTxQueryStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsBranchQueryStatement
		public RuleCall getOsBranchQueryStatementParserRuleCall_0() { return cOsBranchQueryStatementParserRuleCall_0; }

		//OsTxQueryStatement
		public RuleCall getOsTxQueryStatementParserRuleCall_1() { return cOsTxQueryStatementParserRuleCall_1; }
	}

	public class OsCritieriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsCritieria");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsBranchCriteriaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTxCriteriaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsItemCriteriaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsCritieria:
		//	OsBranchCriteria // 
		// // 
		// | OsTxCriteria | OsItemCriteria;
		public ParserRule getRule() { return rule; }

		//OsBranchCriteria // 
		// // 
		// | OsTxCriteria | OsItemCriteria
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsBranchCriteria
		public RuleCall getOsBranchCriteriaParserRuleCall_0() { return cOsBranchCriteriaParserRuleCall_0; }

		//OsTxCriteria
		public RuleCall getOsTxCriteriaParserRuleCall_1() { return cOsTxCriteriaParserRuleCall_1; }

		//OsItemCriteria
		public RuleCall getOsItemCriteriaParserRuleCall_2() { return cOsItemCriteriaParserRuleCall_2; }
	}

	public class OsClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsFindClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsFollowClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OsClause:
		//	OsFindClause //
		// | OsFollowClause;
		public ParserRule getRule() { return rule; }

		//OsFindClause //
		// | OsFollowClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsFindClause
		public RuleCall getOsFindClauseParserRuleCall_0() { return cOsFindClauseParserRuleCall_0; }

		//OsFollowClause
		public RuleCall getOsFollowClauseParserRuleCall_1() { return cOsFollowClauseParserRuleCall_1; }
	}

	public class OsMetaTypeIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsMetaTypeId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsDotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTemplateLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOsStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DATA REFS/IDS
		// OsMetaTypeId returns
		//OsExpression:
		//	OsDotExpression //
		// //
		// //
		// | OsTemplateLiteral | OsNumberLiteral | OsStringLiteral;
		public ParserRule getRule() { return rule; }

		//OsDotExpression //
		// //
		// //
		// | OsTemplateLiteral | OsNumberLiteral | OsStringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsDotExpression
		public RuleCall getOsDotExpressionParserRuleCall_0() { return cOsDotExpressionParserRuleCall_0; }

		//OsTemplateLiteral
		public RuleCall getOsTemplateLiteralParserRuleCall_1() { return cOsTemplateLiteralParserRuleCall_1; }

		//OsNumberLiteral
		public RuleCall getOsNumberLiteralParserRuleCall_2() { return cOsNumberLiteralParserRuleCall_2; }

		//OsStringLiteral
		public RuleCall getOsStringLiteralParserRuleCall_3() { return cOsStringLiteralParserRuleCall_3; }
	}

	public class OsTxIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsDotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTemplateLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsTxId returns OsExpression:
		//	OsDotExpression //
		// //
		// | OsTemplateLiteral | OsNumberLiteral;
		public ParserRule getRule() { return rule; }

		//OsDotExpression //
		// //
		// | OsTemplateLiteral | OsNumberLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsDotExpression
		public RuleCall getOsDotExpressionParserRuleCall_0() { return cOsDotExpressionParserRuleCall_0; }

		//OsTemplateLiteral
		public RuleCall getOsTemplateLiteralParserRuleCall_1() { return cOsTemplateLiteralParserRuleCall_1; }

		//OsNumberLiteral
		public RuleCall getOsNumberLiteralParserRuleCall_2() { return cOsNumberLiteralParserRuleCall_2; }
	}

	public class OsBranchIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsDotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTemplateLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsBranchId returns OsExpression:
		//	OsDotExpression //
		// //
		// | OsTemplateLiteral | OsNumberLiteral;
		public ParserRule getRule() { return rule; }

		//OsDotExpression //
		// //
		// | OsTemplateLiteral | OsNumberLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsDotExpression
		public RuleCall getOsDotExpressionParserRuleCall_0() { return cOsDotExpressionParserRuleCall_0; }

		//OsTemplateLiteral
		public RuleCall getOsTemplateLiteralParserRuleCall_1() { return cOsTemplateLiteralParserRuleCall_1; }

		//OsNumberLiteral
		public RuleCall getOsNumberLiteralParserRuleCall_2() { return cOsNumberLiteralParserRuleCall_2; }
	}

	public class OsBranchIdOrNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchIdOrName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsDotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTemplateLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOsStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//OsBranchIdOrName returns OsExpression:
		//	OsDotExpression //
		// //
		// //
		// | OsTemplateLiteral | OsNumberLiteral | OsStringLiteral;
		public ParserRule getRule() { return rule; }

		//OsDotExpression //
		// //
		// //
		// | OsTemplateLiteral | OsNumberLiteral | OsStringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsDotExpression
		public RuleCall getOsDotExpressionParserRuleCall_0() { return cOsDotExpressionParserRuleCall_0; }

		//OsTemplateLiteral
		public RuleCall getOsTemplateLiteralParserRuleCall_1() { return cOsTemplateLiteralParserRuleCall_1; }

		//OsNumberLiteral
		public RuleCall getOsNumberLiteralParserRuleCall_2() { return cOsNumberLiteralParserRuleCall_2; }

		//OsStringLiteral
		public RuleCall getOsStringLiteralParserRuleCall_3() { return cOsStringLiteralParserRuleCall_3; }
	}

	public class OsArtifactIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsArtifactId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsDotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTemplateLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsArtifactId returns OsExpression:
		//	OsDotExpression //
		// //
		// | OsTemplateLiteral | OsNumberLiteral;
		public ParserRule getRule() { return rule; }

		//OsDotExpression //
		// //
		// | OsTemplateLiteral | OsNumberLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsDotExpression
		public RuleCall getOsDotExpressionParserRuleCall_0() { return cOsDotExpressionParserRuleCall_0; }

		//OsTemplateLiteral
		public RuleCall getOsTemplateLiteralParserRuleCall_1() { return cOsTemplateLiteralParserRuleCall_1; }

		//OsNumberLiteral
		public RuleCall getOsNumberLiteralParserRuleCall_2() { return cOsNumberLiteralParserRuleCall_2; }
	}

	public class OsArtifactGuidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsArtifactGuid");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsDotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTemplateLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsArtifactGuid returns OsExpression:
		//	OsDotExpression //
		// //
		// | OsTemplateLiteral | OsStringLiteral;
		public ParserRule getRule() { return rule; }

		//OsDotExpression //
		// //
		// | OsTemplateLiteral | OsStringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsDotExpression
		public RuleCall getOsDotExpressionParserRuleCall_0() { return cOsDotExpressionParserRuleCall_0; }

		//OsTemplateLiteral
		public RuleCall getOsTemplateLiteralParserRuleCall_1() { return cOsTemplateLiteralParserRuleCall_1; }

		//OsStringLiteral
		public RuleCall getOsStringLiteralParserRuleCall_2() { return cOsStringLiteralParserRuleCall_2; }
	}

	public class OsTxTimestampElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxTimestamp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsDotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTemplateLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsTxTimestamp returns OsExpression:
		//	OsDotExpression //
		// //
		// | OsTemplateLiteral | OsStringLiteral;
		public ParserRule getRule() { return rule; }

		//OsDotExpression //
		// //
		// | OsTemplateLiteral | OsStringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsDotExpression
		public RuleCall getOsDotExpressionParserRuleCall_0() { return cOsDotExpressionParserRuleCall_0; }

		//OsTemplateLiteral
		public RuleCall getOsTemplateLiteralParserRuleCall_1() { return cOsTemplateLiteralParserRuleCall_1; }

		//OsStringLiteral
		public RuleCall getOsStringLiteralParserRuleCall_2() { return cOsStringLiteralParserRuleCall_2; }
	}

	public class OsBranchNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsDotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTemplateLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsBranchName returns OsExpression:
		//	OsDotExpression //
		// //
		// | OsTemplateLiteral | OsStringLiteral;
		public ParserRule getRule() { return rule; }

		//OsDotExpression //
		// //
		// | OsTemplateLiteral | OsStringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsDotExpression
		public RuleCall getOsDotExpressionParserRuleCall_0() { return cOsDotExpressionParserRuleCall_0; }

		//OsTemplateLiteral
		public RuleCall getOsTemplateLiteralParserRuleCall_1() { return cOsTemplateLiteralParserRuleCall_1; }

		//OsStringLiteral
		public RuleCall getOsStringLiteralParserRuleCall_2() { return cOsStringLiteralParserRuleCall_2; }
	}

	public class OsBranchPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsDotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTemplateLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsBranchPattern returns OsExpression:
		//	OsDotExpression //
		// //
		// | OsTemplateLiteral | OsStringLiteral;
		public ParserRule getRule() { return rule; }

		//OsDotExpression //
		// //
		// | OsTemplateLiteral | OsStringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsDotExpression
		public RuleCall getOsDotExpressionParserRuleCall_0() { return cOsDotExpressionParserRuleCall_0; }

		//OsTemplateLiteral
		public RuleCall getOsTemplateLiteralParserRuleCall_1() { return cOsTemplateLiteralParserRuleCall_1; }

		//OsStringLiteral
		public RuleCall getOsStringLiteralParserRuleCall_2() { return cOsStringLiteralParserRuleCall_2; }
	}

	public class OsTxCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxComment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsDotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTemplateLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsTxComment returns OsExpression:
		//	OsDotExpression //
		// //
		// | OsTemplateLiteral | OsStringLiteral;
		public ParserRule getRule() { return rule; }

		//OsDotExpression //
		// //
		// | OsTemplateLiteral | OsStringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsDotExpression
		public RuleCall getOsDotExpressionParserRuleCall_0() { return cOsDotExpressionParserRuleCall_0; }

		//OsTemplateLiteral
		public RuleCall getOsTemplateLiteralParserRuleCall_1() { return cOsTemplateLiteralParserRuleCall_1; }

		//OsStringLiteral
		public RuleCall getOsStringLiteralParserRuleCall_2() { return cOsStringLiteralParserRuleCall_2; }
	}

	public class OsTxCommentPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxCommentPattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsDotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTemplateLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsTxCommentPattern returns OsExpression:
		//	OsDotExpression //
		// //
		// | OsTemplateLiteral | OsStringLiteral;
		public ParserRule getRule() { return rule; }

		//OsDotExpression //
		// //
		// | OsTemplateLiteral | OsStringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsDotExpression
		public RuleCall getOsDotExpressionParserRuleCall_0() { return cOsDotExpressionParserRuleCall_0; }

		//OsTemplateLiteral
		public RuleCall getOsTemplateLiteralParserRuleCall_1() { return cOsTemplateLiteralParserRuleCall_1; }

		//OsStringLiteral
		public RuleCall getOsStringLiteralParserRuleCall_2() { return cOsStringLiteralParserRuleCall_2; }
	}

	public class OsAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsAlias");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsDotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTemplateLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsAlias returns OsExpression:
		//	OsDotExpression //
		// //
		// | OsTemplateLiteral | OsStringLiteral;
		public ParserRule getRule() { return rule; }

		//OsDotExpression //
		// //
		// | OsTemplateLiteral | OsStringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsDotExpression
		public RuleCall getOsDotExpressionParserRuleCall_0() { return cOsDotExpressionParserRuleCall_0; }

		//OsTemplateLiteral
		public RuleCall getOsTemplateLiteralParserRuleCall_1() { return cOsTemplateLiteralParserRuleCall_1; }

		//OsStringLiteral
		public RuleCall getOsStringLiteralParserRuleCall_2() { return cOsStringLiteralParserRuleCall_2; }
	}

	public class OsLimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsLimit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsDotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTemplateLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsLimit returns OsExpression:
		//	OsDotExpression //
		// | OsTemplateLiteral | OsNumberLiteral;
		public ParserRule getRule() { return rule; }

		//OsDotExpression //
		// | OsTemplateLiteral | OsNumberLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsDotExpression
		public RuleCall getOsDotExpressionParserRuleCall_0() { return cOsDotExpressionParserRuleCall_0; }

		//OsTemplateLiteral
		public RuleCall getOsTemplateLiteralParserRuleCall_1() { return cOsTemplateLiteralParserRuleCall_1; }

		//OsNumberLiteral
		public RuleCall getOsNumberLiteralParserRuleCall_2() { return cOsNumberLiteralParserRuleCall_2; }
	}

	public class OsAttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsAttributeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsDotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTemplateLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsAttributeValue returns OsExpression:
		//	OsDotExpression //
		// //
		// | OsTemplateLiteral | OsStringLiteral;
		public ParserRule getRule() { return rule; }

		//OsDotExpression //
		// //
		// | OsTemplateLiteral | OsStringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsDotExpression
		public RuleCall getOsDotExpressionParserRuleCall_0() { return cOsDotExpressionParserRuleCall_0; }

		//OsTemplateLiteral
		public RuleCall getOsTemplateLiteralParserRuleCall_1() { return cOsTemplateLiteralParserRuleCall_1; }

		//OsStringLiteral
		public RuleCall getOsStringLiteralParserRuleCall_2() { return cOsStringLiteralParserRuleCall_2; }
	}

	public class OsFieldIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsFieldId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsFieldMatchingKeywordsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> FIELDS 
		// OsFieldId returns
		//ecore::EString:
		//	ID | OsFieldMatchingKeywords;
		public ParserRule getRule() { return rule; }

		//ID | OsFieldMatchingKeywords
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//OsFieldMatchingKeywords
		public RuleCall getOsFieldMatchingKeywordsParserRuleCall_1() { return cOsFieldMatchingKeywordsParserRuleCall_1; }
	}

	public class OsFieldMatchingKeywordsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsFieldMatchingKeywords");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBranchIdKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cArchivedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStateKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTxIdKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCommentKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDateKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAuthorIdKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cCommitIdKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cTypeKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cGammaIdKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cArtIdKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cArtTypeKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cIdKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		
		//// Add any fields that conflict with grammar keywords
		// OsFieldMatchingKeywords:
		//	"name" //
		// //
		// //
		// //
		// //
		// //
		// //
		// //
		// //
		// //
		// // 
		// //
		// //
		// | "branch-id" | "archived" | "state" | "tx-id" |
		//	"comment" | "date" | "author-id" | "commit-id" | "type" | "gamma-id" | "art-id" | "art-type" | "id";
		public ParserRule getRule() { return rule; }

		//"name" //
		// //
		// //
		// //
		// //
		// //
		// //
		// //
		// //
		// //
		// // 
		// //
		// //
		// | "branch-id" | "archived" | "state" | "tx-id" | "comment" |
		//"date" | "author-id" | "commit-id" | "type" | "gamma-id" | "art-id" | "art-type" | "id"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"name"
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }

		//"branch-id"
		public Keyword getBranchIdKeyword_1() { return cBranchIdKeyword_1; }

		//"archived"
		public Keyword getArchivedKeyword_2() { return cArchivedKeyword_2; }

		//"state"
		public Keyword getStateKeyword_3() { return cStateKeyword_3; }

		//"tx-id"
		public Keyword getTxIdKeyword_4() { return cTxIdKeyword_4; }

		//"comment"
		public Keyword getCommentKeyword_5() { return cCommentKeyword_5; }

		//"date"
		public Keyword getDateKeyword_6() { return cDateKeyword_6; }

		//"author-id"
		public Keyword getAuthorIdKeyword_7() { return cAuthorIdKeyword_7; }

		//"commit-id"
		public Keyword getCommitIdKeyword_8() { return cCommitIdKeyword_8; }

		//"type"
		public Keyword getTypeKeyword_9() { return cTypeKeyword_9; }

		//"gamma-id"
		public Keyword getGammaIdKeyword_10() { return cGammaIdKeyword_10; }

		//"art-id"
		public Keyword getArtIdKeyword_11() { return cArtIdKeyword_11; }

		//"art-type"
		public Keyword getArtTypeKeyword_12() { return cArtTypeKeyword_12; }

		//"id"
		public Keyword getIdKeyword_13() { return cIdKeyword_13; }
	}

	public class OsCollectTypeIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsCollectTypeId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cBranchesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTxsKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cArtifactsKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAttributesKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cRelationsKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS COLLECT
		// OsCollectTypeId:
		//	ID | "branches" | "txs" | "artifacts" | "attributes" | "relations";
		public ParserRule getRule() { return rule; }

		//ID | "branches" | "txs" | "artifacts" | "attributes" | "relations"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"branches"
		public Keyword getBranchesKeyword_1() { return cBranchesKeyword_1; }

		//"txs"
		public Keyword getTxsKeyword_2() { return cTxsKeyword_2; }

		//"artifacts"
		public Keyword getArtifactsKeyword_3() { return cArtifactsKeyword_3; }

		//"attributes"
		public Keyword getAttributesKeyword_4() { return cAttributesKeyword_4; }

		//"relations"
		public Keyword getRelationsKeyword_5() { return cRelationsKeyword_5; }
	}

	public class OsCollectClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsCollectClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCollectKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionOsCollectObjectExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cLimitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLimitOsLimitClauseParserRuleCall_2_0 = (RuleCall)cLimitAssignment_2.eContents().get(0);
		
		//OsCollectClause:
		//	name="collect" expression=OsCollectObjectExpression limit=OsLimitClause?;
		public ParserRule getRule() { return rule; }

		//name="collect" expression=OsCollectObjectExpression limit=OsLimitClause?
		public Group getGroup() { return cGroup; }

		//name="collect"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"collect"
		public Keyword getNameCollectKeyword_0_0() { return cNameCollectKeyword_0_0; }

		//expression=OsCollectObjectExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//OsCollectObjectExpression
		public RuleCall getExpressionOsCollectObjectExpressionParserRuleCall_1_0() { return cExpressionOsCollectObjectExpressionParserRuleCall_1_0; }

		//limit=OsLimitClause?
		public Assignment getLimitAssignment_2() { return cLimitAssignment_2; }

		//OsLimitClause
		public RuleCall getLimitOsLimitClauseParserRuleCall_2_0() { return cLimitOsLimitClauseParserRuleCall_2_0; }
	}

	public class OsLimitClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsLimitClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLimitKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cLimitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLimitOsLimitParserRuleCall_1_0 = (RuleCall)cLimitAssignment_1.eContents().get(0);
		
		//OsLimitClause:
		//	name="limit" limit=OsLimit;
		public ParserRule getRule() { return rule; }

		//name="limit" limit=OsLimit
		public Group getGroup() { return cGroup; }

		//name="limit"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"limit"
		public Keyword getNameLimitKeyword_0_0() { return cNameLimitKeyword_0_0; }

		//limit=OsLimit
		public Assignment getLimitAssignment_1() { return cLimitAssignment_1; }

		//OsLimit
		public RuleCall getLimitOsLimitParserRuleCall_1_0() { return cLimitOsLimitParserRuleCall_1_0; }
	}

	public class OsCollectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsCollectExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsCollectAllFieldsExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsCollectItemExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OsCollectExpression:
		//	OsCollectAllFieldsExpression //
		// | OsCollectItemExpression;
		public ParserRule getRule() { return rule; }

		//OsCollectAllFieldsExpression //
		// | OsCollectItemExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsCollectAllFieldsExpression
		public RuleCall getOsCollectAllFieldsExpressionParserRuleCall_0() { return cOsCollectAllFieldsExpressionParserRuleCall_0; }

		//OsCollectItemExpression
		public RuleCall getOsCollectItemExpressionParserRuleCall_1() { return cOsCollectItemExpressionParserRuleCall_1; }
	}

	public class OsCollectItemExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsCollectItemExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsCollectObjectExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsCollectFieldExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OsCollectItemExpression returns OsCollectExpression:
		//	OsCollectObjectExpression | OsCollectFieldExpression;
		public ParserRule getRule() { return rule; }

		//OsCollectObjectExpression | OsCollectFieldExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsCollectObjectExpression
		public RuleCall getOsCollectObjectExpressionParserRuleCall_0() { return cOsCollectObjectExpressionParserRuleCall_0; }

		//OsCollectFieldExpression
		public RuleCall getOsCollectFieldExpressionParserRuleCall_1() { return cOsCollectFieldExpressionParserRuleCall_1; }
	}

	public class OsCollectObjectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsCollectObjectExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOsCollectObjectExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameOsCollectTypeIdParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasOsAliasParserRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cExpressionsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cExpressionsOsCollectAllFieldsExpressionParserRuleCall_4_0_0 = (RuleCall)cExpressionsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cExpressionsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cExpressionsOsCollectItemExpressionParserRuleCall_4_1_0_0 = (RuleCall)cExpressionsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cExpressionsOsCollectItemExpressionParserRuleCall_4_1_1_1_0 = (RuleCall)cExpressionsAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OsCollectObjectExpression returns OsCollectExpression:
		//	{OsCollectObjectExpression} name=OsCollectTypeId ("as" alias=OsAlias)? //
		// "{"
		//	(expressions+=OsCollectAllFieldsExpression //
		// | expressions+=OsCollectItemExpression (","
		//	expressions+=OsCollectItemExpression)*) "}";
		public ParserRule getRule() { return rule; }

		//{OsCollectObjectExpression} name=OsCollectTypeId ("as" alias=OsAlias)? //
		// "{"
		//(expressions+=OsCollectAllFieldsExpression //
		// | expressions+=OsCollectItemExpression (","
		//expressions+=OsCollectItemExpression)*) "}"
		public Group getGroup() { return cGroup; }

		//{OsCollectObjectExpression}
		public Action getOsCollectObjectExpressionAction_0() { return cOsCollectObjectExpressionAction_0; }

		//name=OsCollectTypeId
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//OsCollectTypeId
		public RuleCall getNameOsCollectTypeIdParserRuleCall_1_0() { return cNameOsCollectTypeIdParserRuleCall_1_0; }

		//("as" alias=OsAlias)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//alias=OsAlias
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }

		//OsAlias
		public RuleCall getAliasOsAliasParserRuleCall_2_1_0() { return cAliasOsAliasParserRuleCall_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//expressions+=OsCollectAllFieldsExpression //
		// | expressions+=OsCollectItemExpression (","
		//expressions+=OsCollectItemExpression)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//expressions+=OsCollectAllFieldsExpression
		public Assignment getExpressionsAssignment_4_0() { return cExpressionsAssignment_4_0; }

		//OsCollectAllFieldsExpression
		public RuleCall getExpressionsOsCollectAllFieldsExpressionParserRuleCall_4_0_0() { return cExpressionsOsCollectAllFieldsExpressionParserRuleCall_4_0_0; }

		//expressions+=OsCollectItemExpression ("," expressions+=OsCollectItemExpression)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//expressions+=OsCollectItemExpression
		public Assignment getExpressionsAssignment_4_1_0() { return cExpressionsAssignment_4_1_0; }

		//OsCollectItemExpression
		public RuleCall getExpressionsOsCollectItemExpressionParserRuleCall_4_1_0_0() { return cExpressionsOsCollectItemExpressionParserRuleCall_4_1_0_0; }

		//("," expressions+=OsCollectItemExpression)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }

		//expressions+=OsCollectItemExpression
		public Assignment getExpressionsAssignment_4_1_1_1() { return cExpressionsAssignment_4_1_1_1; }

		//OsCollectItemExpression
		public RuleCall getExpressionsOsCollectItemExpressionParserRuleCall_4_1_1_1_0() { return cExpressionsOsCollectItemExpressionParserRuleCall_4_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class OsCollectAllFieldsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsCollectAllFieldsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOsCollectAllFieldsExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameAsteriskKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		
		//OsCollectAllFieldsExpression returns OsCollectExpression:
		//	{OsCollectAllFieldsExpression} name="*";
		public ParserRule getRule() { return rule; }

		//{OsCollectAllFieldsExpression} name="*"
		public Group getGroup() { return cGroup; }

		//{OsCollectAllFieldsExpression}
		public Action getOsCollectAllFieldsExpressionAction_0() { return cOsCollectAllFieldsExpressionAction_0; }

		//name="*"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"*"
		public Keyword getNameAsteriskKeyword_1_0() { return cNameAsteriskKeyword_1_0; }
	}

	public class OsCollectFieldExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsCollectFieldExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOsCollectFieldExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameOsFieldIdParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasOsAliasParserRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		
		//OsCollectFieldExpression returns OsCollectExpression:
		//	{OsCollectFieldExpression} name=OsFieldId ("as" alias=OsAlias)?;
		public ParserRule getRule() { return rule; }

		//{OsCollectFieldExpression} name=OsFieldId ("as" alias=OsAlias)?
		public Group getGroup() { return cGroup; }

		//{OsCollectFieldExpression}
		public Action getOsCollectFieldExpressionAction_0() { return cOsCollectFieldExpressionAction_0; }

		//name=OsFieldId
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//OsFieldId
		public RuleCall getNameOsFieldIdParserRuleCall_1_0() { return cNameOsFieldIdParserRuleCall_1_0; }

		//("as" alias=OsAlias)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//alias=OsAlias
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }

		//OsAlias
		public RuleCall getAliasOsAliasParserRuleCall_2_1_0() { return cAliasOsAliasParserRuleCall_2_1_0; }
	}

	public class OsFindClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsFindClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameFindKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cQueryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQueryOsObjectQueryParserRuleCall_1_0 = (RuleCall)cQueryAssignment_1.eContents().get(0);
		
		//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS FIND
		// OsFindClause:
		//	name="find" query=OsObjectQuery;
		public ParserRule getRule() { return rule; }

		//name="find" query=OsObjectQuery
		public Group getGroup() { return cGroup; }

		//name="find"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"find"
		public Keyword getNameFindKeyword_0_0() { return cNameFindKeyword_0_0; }

		//query=OsObjectQuery
		public Assignment getQueryAssignment_1() { return cQueryAssignment_1; }

		//OsObjectQuery
		public RuleCall getQueryOsObjectQueryParserRuleCall_1_0() { return cQueryOsObjectQueryParserRuleCall_1_0; }
	}

	public class OsObjectQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsObjectQuery");
		private final RuleCall cOsArtifactQueryStatementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OsObjectQuery:
		//	OsArtifactQueryStatement;
		public ParserRule getRule() { return rule; }

		//OsArtifactQueryStatement
		public RuleCall getOsArtifactQueryStatementParserRuleCall() { return cOsArtifactQueryStatementParserRuleCall; }
	}

	public class OsBranchQueryStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchQueryStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameBranchKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cDataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataOsBranchQueryParserRuleCall_1_0 = (RuleCall)cDataAssignment_1.eContents().get(0);
		private final Assignment cCollectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCollectOsCollectClauseParserRuleCall_2_0 = (RuleCall)cCollectAssignment_2.eContents().get(0);
		
		//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS BRANCH QUERY
		//
		//OsBranchQueryStatement:
		//	name="branch" data=OsBranchQuery collect=OsCollectClause?;
		public ParserRule getRule() { return rule; }

		//name="branch" data=OsBranchQuery collect=OsCollectClause?
		public Group getGroup() { return cGroup; }

		//name="branch"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"branch"
		public Keyword getNameBranchKeyword_0_0() { return cNameBranchKeyword_0_0; }

		//data=OsBranchQuery
		public Assignment getDataAssignment_1() { return cDataAssignment_1; }

		//OsBranchQuery
		public RuleCall getDataOsBranchQueryParserRuleCall_1_0() { return cDataOsBranchQueryParserRuleCall_1_0; }

		//collect=OsCollectClause?
		public Assignment getCollectAssignment_2() { return cCollectAssignment_2; }

		//OsCollectClause
		public RuleCall getCollectOsCollectClauseParserRuleCall_2_0() { return cCollectOsCollectClauseParserRuleCall_2_0; }
	}

	public class OsBranchQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchQuery");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsBranchQueryByIdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsBranchQueryAllParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsBranchQueryByPredicateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsBranchQuery:
		//	OsBranchQueryById //
		// //
		// | OsBranchQueryAll | OsBranchQueryByPredicate;
		public ParserRule getRule() { return rule; }

		//OsBranchQueryById //
		// //
		// | OsBranchQueryAll | OsBranchQueryByPredicate
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsBranchQueryById
		public RuleCall getOsBranchQueryByIdParserRuleCall_0() { return cOsBranchQueryByIdParserRuleCall_0; }

		//OsBranchQueryAll
		public RuleCall getOsBranchQueryAllParserRuleCall_1() { return cOsBranchQueryAllParserRuleCall_1; }

		//OsBranchQueryByPredicate
		public RuleCall getOsBranchQueryByPredicateParserRuleCall_2() { return cOsBranchQueryByPredicateParserRuleCall_2; }
	}

	public class OsBranchQueryByIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchQueryById");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameOsBranchIdOrNameParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//OsBranchQueryById:
		//	name=OsBranchIdOrName;
		public ParserRule getRule() { return rule; }

		//name=OsBranchIdOrName
		public Assignment getNameAssignment() { return cNameAssignment; }

		//OsBranchIdOrName
		public RuleCall getNameOsBranchIdOrNameParserRuleCall_0() { return cNameOsBranchIdOrNameParserRuleCall_0; }
	}

	public class OsBranchQueryAllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchQueryAll");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameAsteriskKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//OsBranchQueryAll:
		//	name="*";
		public ParserRule getRule() { return rule; }

		//name="*"
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"*"
		public Keyword getNameAsteriskKeyword_0() { return cNameAsteriskKeyword_0; }
	}

	public class OsBranchQueryByPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchQueryByPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameWhereKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cCriteriaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCriteriaOsBranchCriteriaParserRuleCall_1_0 = (RuleCall)cCriteriaAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAndKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCriteriaAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCriteriaOsBranchCriteriaParserRuleCall_2_1_0 = (RuleCall)cCriteriaAssignment_2_1.eContents().get(0);
		
		//OsBranchQueryByPredicate:
		//	name="where" criteria+=OsBranchCriteria ("and" criteria+=OsBranchCriteria)*;
		public ParserRule getRule() { return rule; }

		//name="where" criteria+=OsBranchCriteria ("and" criteria+=OsBranchCriteria)*
		public Group getGroup() { return cGroup; }

		//name="where"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"where"
		public Keyword getNameWhereKeyword_0_0() { return cNameWhereKeyword_0_0; }

		//criteria+=OsBranchCriteria
		public Assignment getCriteriaAssignment_1() { return cCriteriaAssignment_1; }

		//OsBranchCriteria
		public RuleCall getCriteriaOsBranchCriteriaParserRuleCall_1_0() { return cCriteriaOsBranchCriteriaParserRuleCall_1_0; }

		//("and" criteria+=OsBranchCriteria)*
		public Group getGroup_2() { return cGroup_2; }

		//"and"
		public Keyword getAndKeyword_2_0() { return cAndKeyword_2_0; }

		//criteria+=OsBranchCriteria
		public Assignment getCriteriaAssignment_2_1() { return cCriteriaAssignment_2_1; }

		//OsBranchCriteria
		public RuleCall getCriteriaOsBranchCriteriaParserRuleCall_2_1_0() { return cCriteriaOsBranchCriteriaParserRuleCall_2_1_0; }
	}

	public class OsBranchCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchCriteria");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsBranchNameCriteriaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsBranchTypeCriteriaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsBranchStateCriteriaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOsBranchArchivedCriteriaParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOsBranchIdCriteriaParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOsBranchOfCriteriaParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//OsBranchCriteria:
		//	OsBranchNameCriteria //
		// //
		// //
		// //
		// //
		// | OsBranchTypeCriteria | OsBranchStateCriteria | OsBranchArchivedCriteria |
		//	OsBranchIdCriteria | OsBranchOfCriteria;
		public ParserRule getRule() { return rule; }

		//OsBranchNameCriteria //
		// //
		// //
		// //
		// //
		// | OsBranchTypeCriteria | OsBranchStateCriteria | OsBranchArchivedCriteria |
		//OsBranchIdCriteria | OsBranchOfCriteria
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsBranchNameCriteria
		public RuleCall getOsBranchNameCriteriaParserRuleCall_0() { return cOsBranchNameCriteriaParserRuleCall_0; }

		//OsBranchTypeCriteria
		public RuleCall getOsBranchTypeCriteriaParserRuleCall_1() { return cOsBranchTypeCriteriaParserRuleCall_1; }

		//OsBranchStateCriteria
		public RuleCall getOsBranchStateCriteriaParserRuleCall_2() { return cOsBranchStateCriteriaParserRuleCall_2; }

		//OsBranchArchivedCriteria
		public RuleCall getOsBranchArchivedCriteriaParserRuleCall_3() { return cOsBranchArchivedCriteriaParserRuleCall_3; }

		//OsBranchIdCriteria
		public RuleCall getOsBranchIdCriteriaParserRuleCall_4() { return cOsBranchIdCriteriaParserRuleCall_4; }

		//OsBranchOfCriteria
		public RuleCall getOsBranchOfCriteriaParserRuleCall_5() { return cOsBranchOfCriteriaParserRuleCall_5; }
	}

	public class OsBranchNameCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchNameCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameNameKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClauseOsBranchNameClauseParserRuleCall_1_0 = (RuleCall)cClauseAssignment_1.eContents().get(0);
		
		//OsBranchNameCriteria:
		//	name="name" clause=OsBranchNameClause;
		public ParserRule getRule() { return rule; }

		//name="name" clause=OsBranchNameClause
		public Group getGroup() { return cGroup; }

		//name="name"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"name"
		public Keyword getNameNameKeyword_0_0() { return cNameNameKeyword_0_0; }

		//clause=OsBranchNameClause
		public Assignment getClauseAssignment_1() { return cClauseAssignment_1; }

		//OsBranchNameClause
		public RuleCall getClauseOsBranchNameClauseParserRuleCall_1_0() { return cClauseOsBranchNameClauseParserRuleCall_1_0; }
	}

	public class OsBranchNameClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchNameClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsBranchNameEqualsClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsBranchNamePatternClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OsBranchNameClause:
		//	OsBranchNameEqualsClause //
		// | OsBranchNamePatternClause;
		public ParserRule getRule() { return rule; }

		//OsBranchNameEqualsClause //
		// | OsBranchNamePatternClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsBranchNameEqualsClause
		public RuleCall getOsBranchNameEqualsClauseParserRuleCall_0() { return cOsBranchNameEqualsClauseParserRuleCall_0; }

		//OsBranchNamePatternClause
		public RuleCall getOsBranchNamePatternClauseParserRuleCall_1() { return cOsBranchNamePatternClauseParserRuleCall_1; }
	}

	public class OsBranchNameEqualsClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchNameEqualsClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameEqualsSignKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueOsBranchNameParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//OsBranchNameEqualsClause:
		//	name="=" value=OsBranchName;
		public ParserRule getRule() { return rule; }

		//name="=" value=OsBranchName
		public Group getGroup() { return cGroup; }

		//name="="
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"="
		public Keyword getNameEqualsSignKeyword_0_0() { return cNameEqualsSignKeyword_0_0; }

		//value=OsBranchName
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//OsBranchName
		public RuleCall getValueOsBranchNameParserRuleCall_1_0() { return cValueOsBranchNameParserRuleCall_1_0; }
	}

	public class OsBranchNamePatternClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchNamePatternClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameMatchesKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueOsBranchPatternParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//OsBranchNamePatternClause:
		//	name="matches" value=OsBranchPattern;
		public ParserRule getRule() { return rule; }

		//name="matches" value=OsBranchPattern
		public Group getGroup() { return cGroup; }

		//name="matches"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"matches"
		public Keyword getNameMatchesKeyword_0_0() { return cNameMatchesKeyword_0_0; }

		//value=OsBranchPattern
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//OsBranchPattern
		public RuleCall getValueOsBranchPatternParserRuleCall_1_0() { return cValueOsBranchPatternParserRuleCall_1_0; }
	}

	public class OsBranchTypeCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchTypeCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTypeKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTypesOsBranchTypeEnumRuleCall_2_0_0 = (RuleCall)cTypesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTypesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTypesOsBranchTypeEnumRuleCall_2_1_1_0 = (RuleCall)cTypesAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cTypesOsBranchTypeEnumRuleCall_2_1_2_1_0 = (RuleCall)cTypesAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//OsBranchTypeCriteria:
		//	name="type" "=" (types+=OsBranchType | "[" types+=OsBranchType ("," types+=OsBranchType)* "]");
		public ParserRule getRule() { return rule; }

		//name="type" "=" (types+=OsBranchType | "[" types+=OsBranchType ("," types+=OsBranchType)* "]")
		public Group getGroup() { return cGroup; }

		//name="type"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"type"
		public Keyword getNameTypeKeyword_0_0() { return cNameTypeKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//types+=OsBranchType | "[" types+=OsBranchType ("," types+=OsBranchType)* "]"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//types+=OsBranchType
		public Assignment getTypesAssignment_2_0() { return cTypesAssignment_2_0; }

		//OsBranchType
		public RuleCall getTypesOsBranchTypeEnumRuleCall_2_0_0() { return cTypesOsBranchTypeEnumRuleCall_2_0_0; }

		//"[" types+=OsBranchType ("," types+=OsBranchType)* "]"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//types+=OsBranchType
		public Assignment getTypesAssignment_2_1_1() { return cTypesAssignment_2_1_1; }

		//OsBranchType
		public RuleCall getTypesOsBranchTypeEnumRuleCall_2_1_1_0() { return cTypesOsBranchTypeEnumRuleCall_2_1_1_0; }

		//("," types+=OsBranchType)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//types+=OsBranchType
		public Assignment getTypesAssignment_2_1_2_1() { return cTypesAssignment_2_1_2_1; }

		//OsBranchType
		public RuleCall getTypesOsBranchTypeEnumRuleCall_2_1_2_1_0() { return cTypesOsBranchTypeEnumRuleCall_2_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }
	}

	public class OsBranchStateCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchStateCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameStateKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cStatesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cStatesOsBranchStateEnumRuleCall_2_0_0 = (RuleCall)cStatesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cStatesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cStatesOsBranchStateEnumRuleCall_2_1_1_0 = (RuleCall)cStatesAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cStatesAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cStatesOsBranchStateEnumRuleCall_2_1_2_1_0 = (RuleCall)cStatesAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//OsBranchStateCriteria:
		//	name="state" "=" (states+=OsBranchState | "[" states+=OsBranchState ("," states+=OsBranchState)* "]");
		public ParserRule getRule() { return rule; }

		//name="state" "=" (states+=OsBranchState | "[" states+=OsBranchState ("," states+=OsBranchState)* "]")
		public Group getGroup() { return cGroup; }

		//name="state"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"state"
		public Keyword getNameStateKeyword_0_0() { return cNameStateKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//states+=OsBranchState | "[" states+=OsBranchState ("," states+=OsBranchState)* "]"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//states+=OsBranchState
		public Assignment getStatesAssignment_2_0() { return cStatesAssignment_2_0; }

		//OsBranchState
		public RuleCall getStatesOsBranchStateEnumRuleCall_2_0_0() { return cStatesOsBranchStateEnumRuleCall_2_0_0; }

		//"[" states+=OsBranchState ("," states+=OsBranchState)* "]"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//states+=OsBranchState
		public Assignment getStatesAssignment_2_1_1() { return cStatesAssignment_2_1_1; }

		//OsBranchState
		public RuleCall getStatesOsBranchStateEnumRuleCall_2_1_1_0() { return cStatesOsBranchStateEnumRuleCall_2_1_1_0; }

		//("," states+=OsBranchState)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//states+=OsBranchState
		public Assignment getStatesAssignment_2_1_2_1() { return cStatesAssignment_2_1_2_1; }

		//OsBranchState
		public RuleCall getStatesOsBranchStateEnumRuleCall_2_1_2_1_0() { return cStatesOsBranchStateEnumRuleCall_2_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }
	}

	public class OsBranchArchivedCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchArchivedCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameArchivedKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFilterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilterOsBranchArchiveFilterEnumRuleCall_2_0 = (RuleCall)cFilterAssignment_2.eContents().get(0);
		
		//OsBranchArchivedCriteria:
		//	name="archived" "is" filter=OsBranchArchiveFilter;
		public ParserRule getRule() { return rule; }

		//name="archived" "is" filter=OsBranchArchiveFilter
		public Group getGroup() { return cGroup; }

		//name="archived"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"archived"
		public Keyword getNameArchivedKeyword_0_0() { return cNameArchivedKeyword_0_0; }

		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//filter=OsBranchArchiveFilter
		public Assignment getFilterAssignment_2() { return cFilterAssignment_2; }

		//OsBranchArchiveFilter
		public RuleCall getFilterOsBranchArchiveFilterEnumRuleCall_2_0() { return cFilterOsBranchArchiveFilterEnumRuleCall_2_0; }
	}

	public class OsBranchIdCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchIdCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameBranchIdKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIdsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cIdsOsBranchIdParserRuleCall_2_0_0 = (RuleCall)cIdsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIdsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIdsOsBranchIdParserRuleCall_2_1_1_0 = (RuleCall)cIdsAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cIdsAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cIdsOsBranchIdParserRuleCall_2_1_2_1_0 = (RuleCall)cIdsAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//OsBranchIdCriteria:
		//	name="branch-id" "=" (ids+=OsBranchId | "[" ids+=OsBranchId ("," ids+=OsBranchId)* "]");
		public ParserRule getRule() { return rule; }

		//name="branch-id" "=" (ids+=OsBranchId | "[" ids+=OsBranchId ("," ids+=OsBranchId)* "]")
		public Group getGroup() { return cGroup; }

		//name="branch-id"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"branch-id"
		public Keyword getNameBranchIdKeyword_0_0() { return cNameBranchIdKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//ids+=OsBranchId | "[" ids+=OsBranchId ("," ids+=OsBranchId)* "]"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//ids+=OsBranchId
		public Assignment getIdsAssignment_2_0() { return cIdsAssignment_2_0; }

		//OsBranchId
		public RuleCall getIdsOsBranchIdParserRuleCall_2_0_0() { return cIdsOsBranchIdParserRuleCall_2_0_0; }

		//"[" ids+=OsBranchId ("," ids+=OsBranchId)* "]"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//ids+=OsBranchId
		public Assignment getIdsAssignment_2_1_1() { return cIdsAssignment_2_1_1; }

		//OsBranchId
		public RuleCall getIdsOsBranchIdParserRuleCall_2_1_1_0() { return cIdsOsBranchIdParserRuleCall_2_1_1_0; }

		//("," ids+=OsBranchId)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//ids+=OsBranchId
		public Assignment getIdsAssignment_2_1_2_1() { return cIdsAssignment_2_1_2_1; }

		//OsBranchId
		public RuleCall getIdsOsBranchIdParserRuleCall_2_1_2_1_0() { return cIdsOsBranchIdParserRuleCall_2_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }
	}

	public class OsBranchOfCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchOfCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameBranchKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClauseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClauseOsBranchClauseParserRuleCall_2_0 = (RuleCall)cClauseAssignment_2.eContents().get(0);
		
		//OsBranchOfCriteria:
		//	name="branch" "is" clause=OsBranchClause;
		public ParserRule getRule() { return rule; }

		//name="branch" "is" clause=OsBranchClause
		public Group getGroup() { return cGroup; }

		//name="branch"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"branch"
		public Keyword getNameBranchKeyword_0_0() { return cNameBranchKeyword_0_0; }

		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//clause=OsBranchClause
		public Assignment getClauseAssignment_2() { return cClauseAssignment_2; }

		//OsBranchClause
		public RuleCall getClauseOsBranchClauseParserRuleCall_2_0() { return cClauseOsBranchClauseParserRuleCall_2_0; }
	}

	public class OsBranchClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsBranchChildOfClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsBranchParentOfClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OsBranchClause:
		//	OsBranchChildOfClause //
		// | OsBranchParentOfClause;
		public ParserRule getRule() { return rule; }

		//OsBranchChildOfClause //
		// | OsBranchParentOfClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsBranchChildOfClause
		public RuleCall getOsBranchChildOfClauseParserRuleCall_0() { return cOsBranchChildOfClauseParserRuleCall_0; }

		//OsBranchParentOfClause
		public RuleCall getOsBranchParentOfClauseParserRuleCall_1() { return cOsBranchParentOfClauseParserRuleCall_1; }
	}

	public class OsBranchChildOfClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchChildOfClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameChildOfKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdOsBranchIdParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//OsBranchChildOfClause:
		//	name="child-of" id=OsBranchId;
		public ParserRule getRule() { return rule; }

		//name="child-of" id=OsBranchId
		public Group getGroup() { return cGroup; }

		//name="child-of"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"child-of"
		public Keyword getNameChildOfKeyword_0_0() { return cNameChildOfKeyword_0_0; }

		//id=OsBranchId
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//OsBranchId
		public RuleCall getIdOsBranchIdParserRuleCall_1_0() { return cIdOsBranchIdParserRuleCall_1_0; }
	}

	public class OsBranchParentOfClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchParentOfClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameParentOfKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdOsBranchIdParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//OsBranchParentOfClause:
		//	name="parent-of" id=OsBranchId;
		public ParserRule getRule() { return rule; }

		//name="parent-of" id=OsBranchId
		public Group getGroup() { return cGroup; }

		//name="parent-of"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"parent-of"
		public Keyword getNameParentOfKeyword_0_0() { return cNameParentOfKeyword_0_0; }

		//id=OsBranchId
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//OsBranchId
		public RuleCall getIdOsBranchIdParserRuleCall_1_0() { return cIdOsBranchIdParserRuleCall_1_0; }
	}

	public class OsTxQueryStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxQueryStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTxKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cDataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataOsTxQueryParserRuleCall_1_0 = (RuleCall)cDataAssignment_1.eContents().get(0);
		private final Assignment cCollectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCollectOsCollectClauseParserRuleCall_2_0 = (RuleCall)cCollectAssignment_2.eContents().get(0);
		
		//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS TXS QUERY
		// OsTxQueryStatement:
		//	name="tx" data=OsTxQuery collect=OsCollectClause?;
		public ParserRule getRule() { return rule; }

		//name="tx" data=OsTxQuery collect=OsCollectClause?
		public Group getGroup() { return cGroup; }

		//name="tx"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"tx"
		public Keyword getNameTxKeyword_0_0() { return cNameTxKeyword_0_0; }

		//data=OsTxQuery
		public Assignment getDataAssignment_1() { return cDataAssignment_1; }

		//OsTxQuery
		public RuleCall getDataOsTxQueryParserRuleCall_1_0() { return cDataOsTxQueryParserRuleCall_1_0; }

		//collect=OsCollectClause?
		public Assignment getCollectAssignment_2() { return cCollectAssignment_2; }

		//OsCollectClause
		public RuleCall getCollectOsCollectClauseParserRuleCall_2_0() { return cCollectOsCollectClauseParserRuleCall_2_0; }
	}

	public class OsTxQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxQuery");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsTxQueryByIdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTxQueryAllParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsTxQueryByPredicateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsTxQuery:
		//	OsTxQueryById //
		// //
		// | OsTxQueryAll | OsTxQueryByPredicate;
		public ParserRule getRule() { return rule; }

		//OsTxQueryById //
		// //
		// | OsTxQueryAll | OsTxQueryByPredicate
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsTxQueryById
		public RuleCall getOsTxQueryByIdParserRuleCall_0() { return cOsTxQueryByIdParserRuleCall_0; }

		//OsTxQueryAll
		public RuleCall getOsTxQueryAllParserRuleCall_1() { return cOsTxQueryAllParserRuleCall_1; }

		//OsTxQueryByPredicate
		public RuleCall getOsTxQueryByPredicateParserRuleCall_2() { return cOsTxQueryByPredicateParserRuleCall_2; }
	}

	public class OsTxQueryByIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxQueryById");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameOsTxIdParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//OsTxQueryById:
		//	name=OsTxId;
		public ParserRule getRule() { return rule; }

		//name=OsTxId
		public Assignment getNameAssignment() { return cNameAssignment; }

		//OsTxId
		public RuleCall getNameOsTxIdParserRuleCall_0() { return cNameOsTxIdParserRuleCall_0; }
	}

	public class OsTxQueryAllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxQueryAll");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameAsteriskKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//OsTxQueryAll:
		//	name="*";
		public ParserRule getRule() { return rule; }

		//name="*"
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"*"
		public Keyword getNameAsteriskKeyword_0() { return cNameAsteriskKeyword_0; }
	}

	public class OsTxQueryByPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxQueryByPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameWhereKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cCriteriaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCriteriaOsTxCriteriaParserRuleCall_1_0 = (RuleCall)cCriteriaAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAndKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCriteriaAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCriteriaOsTxCriteriaParserRuleCall_2_1_0 = (RuleCall)cCriteriaAssignment_2_1.eContents().get(0);
		
		//OsTxQueryByPredicate:
		//	name="where" criteria+=OsTxCriteria ("and" criteria+=OsTxCriteria)*;
		public ParserRule getRule() { return rule; }

		//name="where" criteria+=OsTxCriteria ("and" criteria+=OsTxCriteria)*
		public Group getGroup() { return cGroup; }

		//name="where"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"where"
		public Keyword getNameWhereKeyword_0_0() { return cNameWhereKeyword_0_0; }

		//criteria+=OsTxCriteria
		public Assignment getCriteriaAssignment_1() { return cCriteriaAssignment_1; }

		//OsTxCriteria
		public RuleCall getCriteriaOsTxCriteriaParserRuleCall_1_0() { return cCriteriaOsTxCriteriaParserRuleCall_1_0; }

		//("and" criteria+=OsTxCriteria)*
		public Group getGroup_2() { return cGroup_2; }

		//"and"
		public Keyword getAndKeyword_2_0() { return cAndKeyword_2_0; }

		//criteria+=OsTxCriteria
		public Assignment getCriteriaAssignment_2_1() { return cCriteriaAssignment_2_1; }

		//OsTxCriteria
		public RuleCall getCriteriaOsTxCriteriaParserRuleCall_2_1_0() { return cCriteriaOsTxCriteriaParserRuleCall_2_1_0; }
	}

	public class OsTxCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxCriteria");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsTxIdCriteriaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTxTypeCriteriaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsTxCommentCriteriaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOsTxBranchIdCriteriaParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOsTxHeadOfBranchIdCriteriaParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOsTxAuthorIdCriteriaParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOsTxCommitIdCriteriaParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOsTxTimestampCriteriaParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//OsTxCriteria:
		//	OsTxIdCriteria //
		// //
		// //
		// //
		// //
		// //
		// //
		// | OsTxTypeCriteria | OsTxCommentCriteria | OsTxBranchIdCriteria |
		//	OsTxHeadOfBranchIdCriteria | OsTxAuthorIdCriteria | OsTxCommitIdCriteria | OsTxTimestampCriteria;
		public ParserRule getRule() { return rule; }

		//OsTxIdCriteria //
		// //
		// //
		// //
		// //
		// //
		// //
		// | OsTxTypeCriteria | OsTxCommentCriteria | OsTxBranchIdCriteria |
		//OsTxHeadOfBranchIdCriteria | OsTxAuthorIdCriteria | OsTxCommitIdCriteria | OsTxTimestampCriteria
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsTxIdCriteria
		public RuleCall getOsTxIdCriteriaParserRuleCall_0() { return cOsTxIdCriteriaParserRuleCall_0; }

		//OsTxTypeCriteria
		public RuleCall getOsTxTypeCriteriaParserRuleCall_1() { return cOsTxTypeCriteriaParserRuleCall_1; }

		//OsTxCommentCriteria
		public RuleCall getOsTxCommentCriteriaParserRuleCall_2() { return cOsTxCommentCriteriaParserRuleCall_2; }

		//OsTxBranchIdCriteria
		public RuleCall getOsTxBranchIdCriteriaParserRuleCall_3() { return cOsTxBranchIdCriteriaParserRuleCall_3; }

		//OsTxHeadOfBranchIdCriteria
		public RuleCall getOsTxHeadOfBranchIdCriteriaParserRuleCall_4() { return cOsTxHeadOfBranchIdCriteriaParserRuleCall_4; }

		//OsTxAuthorIdCriteria
		public RuleCall getOsTxAuthorIdCriteriaParserRuleCall_5() { return cOsTxAuthorIdCriteriaParserRuleCall_5; }

		//OsTxCommitIdCriteria
		public RuleCall getOsTxCommitIdCriteriaParserRuleCall_6() { return cOsTxCommitIdCriteriaParserRuleCall_6; }

		//OsTxTimestampCriteria
		public RuleCall getOsTxTimestampCriteriaParserRuleCall_7() { return cOsTxTimestampCriteriaParserRuleCall_7; }
	}

	public class OsTxTypeCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxTypeCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTypeKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTypesOsTxTypeEnumRuleCall_2_0_0 = (RuleCall)cTypesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTypesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTypesOsTxTypeEnumRuleCall_2_1_1_0 = (RuleCall)cTypesAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cTypesOsTxTypeEnumRuleCall_2_1_2_1_0 = (RuleCall)cTypesAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//OsTxTypeCriteria:
		//	name="type" "=" (types+=OsTxType | "[" types+=OsTxType ("," types+=OsTxType)* "]");
		public ParserRule getRule() { return rule; }

		//name="type" "=" (types+=OsTxType | "[" types+=OsTxType ("," types+=OsTxType)* "]")
		public Group getGroup() { return cGroup; }

		//name="type"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"type"
		public Keyword getNameTypeKeyword_0_0() { return cNameTypeKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//types+=OsTxType | "[" types+=OsTxType ("," types+=OsTxType)* "]"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//types+=OsTxType
		public Assignment getTypesAssignment_2_0() { return cTypesAssignment_2_0; }

		//OsTxType
		public RuleCall getTypesOsTxTypeEnumRuleCall_2_0_0() { return cTypesOsTxTypeEnumRuleCall_2_0_0; }

		//"[" types+=OsTxType ("," types+=OsTxType)* "]"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//types+=OsTxType
		public Assignment getTypesAssignment_2_1_1() { return cTypesAssignment_2_1_1; }

		//OsTxType
		public RuleCall getTypesOsTxTypeEnumRuleCall_2_1_1_0() { return cTypesOsTxTypeEnumRuleCall_2_1_1_0; }

		//("," types+=OsTxType)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//types+=OsTxType
		public Assignment getTypesAssignment_2_1_2_1() { return cTypesAssignment_2_1_2_1; }

		//OsTxType
		public RuleCall getTypesOsTxTypeEnumRuleCall_2_1_2_1_0() { return cTypesOsTxTypeEnumRuleCall_2_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }
	}

	public class OsTxCommentCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxCommentCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCommentKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClauseOsTxCommentClauseParserRuleCall_1_0 = (RuleCall)cClauseAssignment_1.eContents().get(0);
		
		//OsTxCommentCriteria:
		//	name="comment" clause=OsTxCommentClause;
		public ParserRule getRule() { return rule; }

		//name="comment" clause=OsTxCommentClause
		public Group getGroup() { return cGroup; }

		//name="comment"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"comment"
		public Keyword getNameCommentKeyword_0_0() { return cNameCommentKeyword_0_0; }

		//clause=OsTxCommentClause
		public Assignment getClauseAssignment_1() { return cClauseAssignment_1; }

		//OsTxCommentClause
		public RuleCall getClauseOsTxCommentClauseParserRuleCall_1_0() { return cClauseOsTxCommentClauseParserRuleCall_1_0; }
	}

	public class OsTxCommentClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxCommentClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsTxCommentEqualsClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTxCommentPatternClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OsTxCommentClause:
		//	OsTxCommentEqualsClause //
		// | OsTxCommentPatternClause;
		public ParserRule getRule() { return rule; }

		//OsTxCommentEqualsClause //
		// | OsTxCommentPatternClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsTxCommentEqualsClause
		public RuleCall getOsTxCommentEqualsClauseParserRuleCall_0() { return cOsTxCommentEqualsClauseParserRuleCall_0; }

		//OsTxCommentPatternClause
		public RuleCall getOsTxCommentPatternClauseParserRuleCall_1() { return cOsTxCommentPatternClauseParserRuleCall_1; }
	}

	public class OsTxCommentEqualsClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxCommentEqualsClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameEqualsSignKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueOsTxCommentParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//OsTxCommentEqualsClause:
		//	name="=" value=OsTxComment;
		public ParserRule getRule() { return rule; }

		//name="=" value=OsTxComment
		public Group getGroup() { return cGroup; }

		//name="="
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"="
		public Keyword getNameEqualsSignKeyword_0_0() { return cNameEqualsSignKeyword_0_0; }

		//value=OsTxComment
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//OsTxComment
		public RuleCall getValueOsTxCommentParserRuleCall_1_0() { return cValueOsTxCommentParserRuleCall_1_0; }
	}

	public class OsTxCommentPatternClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxCommentPatternClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameMatchesKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueOsTxCommentPatternParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//OsTxCommentPatternClause:
		//	name="matches" value=OsTxCommentPattern;
		public ParserRule getRule() { return rule; }

		//name="matches" value=OsTxCommentPattern
		public Group getGroup() { return cGroup; }

		//name="matches"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"matches"
		public Keyword getNameMatchesKeyword_0_0() { return cNameMatchesKeyword_0_0; }

		//value=OsTxCommentPattern
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//OsTxCommentPattern
		public RuleCall getValueOsTxCommentPatternParserRuleCall_1_0() { return cValueOsTxCommentPatternParserRuleCall_1_0; }
	}

	public class OsTxBranchIdCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxBranchIdCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameBranchIdKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIdsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cIdsOsBranchIdParserRuleCall_2_0_0 = (RuleCall)cIdsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIdsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIdsOsBranchIdParserRuleCall_2_1_1_0 = (RuleCall)cIdsAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cIdsAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cIdsOsBranchIdParserRuleCall_2_1_2_1_0 = (RuleCall)cIdsAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//OsTxBranchIdCriteria:
		//	name="branch-id" "=" (ids+=OsBranchId | "[" ids+=OsBranchId ("," ids+=OsBranchId)* "]");
		public ParserRule getRule() { return rule; }

		//name="branch-id" "=" (ids+=OsBranchId | "[" ids+=OsBranchId ("," ids+=OsBranchId)* "]")
		public Group getGroup() { return cGroup; }

		//name="branch-id"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"branch-id"
		public Keyword getNameBranchIdKeyword_0_0() { return cNameBranchIdKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//ids+=OsBranchId | "[" ids+=OsBranchId ("," ids+=OsBranchId)* "]"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//ids+=OsBranchId
		public Assignment getIdsAssignment_2_0() { return cIdsAssignment_2_0; }

		//OsBranchId
		public RuleCall getIdsOsBranchIdParserRuleCall_2_0_0() { return cIdsOsBranchIdParserRuleCall_2_0_0; }

		//"[" ids+=OsBranchId ("," ids+=OsBranchId)* "]"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//ids+=OsBranchId
		public Assignment getIdsAssignment_2_1_1() { return cIdsAssignment_2_1_1; }

		//OsBranchId
		public RuleCall getIdsOsBranchIdParserRuleCall_2_1_1_0() { return cIdsOsBranchIdParserRuleCall_2_1_1_0; }

		//("," ids+=OsBranchId)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//ids+=OsBranchId
		public Assignment getIdsAssignment_2_1_2_1() { return cIdsAssignment_2_1_2_1; }

		//OsBranchId
		public RuleCall getIdsOsBranchIdParserRuleCall_2_1_2_1_0() { return cIdsOsBranchIdParserRuleCall_2_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }
	}

	public class OsTxHeadOfBranchIdCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxHeadOfBranchIdCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameIsHeadKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBranchIdKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdOsBranchIdParserRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		
		//OsTxHeadOfBranchIdCriteria:
		//	name="is-head" "of" "branch-id" id=OsBranchId;
		public ParserRule getRule() { return rule; }

		//name="is-head" "of" "branch-id" id=OsBranchId
		public Group getGroup() { return cGroup; }

		//name="is-head"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"is-head"
		public Keyword getNameIsHeadKeyword_0_0() { return cNameIsHeadKeyword_0_0; }

		//"of"
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }

		//"branch-id"
		public Keyword getBranchIdKeyword_2() { return cBranchIdKeyword_2; }

		//id=OsBranchId
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }

		//OsBranchId
		public RuleCall getIdOsBranchIdParserRuleCall_3_0() { return cIdOsBranchIdParserRuleCall_3_0; }
	}

	public class OsTxAuthorIdCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxAuthorIdCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameAuthorIdKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIdsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cIdsOsArtifactIdParserRuleCall_2_0_0 = (RuleCall)cIdsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIdsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIdsOsArtifactIdParserRuleCall_2_1_1_0 = (RuleCall)cIdsAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cIdsAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cIdsOsArtifactIdParserRuleCall_2_1_2_1_0 = (RuleCall)cIdsAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//OsTxAuthorIdCriteria:
		//	name="author-id" "=" (ids+=OsArtifactId | "[" ids+=OsArtifactId ("," ids+=OsArtifactId)* "]");
		public ParserRule getRule() { return rule; }

		//name="author-id" "=" (ids+=OsArtifactId | "[" ids+=OsArtifactId ("," ids+=OsArtifactId)* "]")
		public Group getGroup() { return cGroup; }

		//name="author-id"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"author-id"
		public Keyword getNameAuthorIdKeyword_0_0() { return cNameAuthorIdKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//ids+=OsArtifactId | "[" ids+=OsArtifactId ("," ids+=OsArtifactId)* "]"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//ids+=OsArtifactId
		public Assignment getIdsAssignment_2_0() { return cIdsAssignment_2_0; }

		//OsArtifactId
		public RuleCall getIdsOsArtifactIdParserRuleCall_2_0_0() { return cIdsOsArtifactIdParserRuleCall_2_0_0; }

		//"[" ids+=OsArtifactId ("," ids+=OsArtifactId)* "]"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//ids+=OsArtifactId
		public Assignment getIdsAssignment_2_1_1() { return cIdsAssignment_2_1_1; }

		//OsArtifactId
		public RuleCall getIdsOsArtifactIdParserRuleCall_2_1_1_0() { return cIdsOsArtifactIdParserRuleCall_2_1_1_0; }

		//("," ids+=OsArtifactId)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//ids+=OsArtifactId
		public Assignment getIdsAssignment_2_1_2_1() { return cIdsAssignment_2_1_2_1; }

		//OsArtifactId
		public RuleCall getIdsOsArtifactIdParserRuleCall_2_1_2_1_0() { return cIdsOsArtifactIdParserRuleCall_2_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }
	}

	public class OsTxCommitIdCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxCommitIdCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameCommitIdKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClauseOsTxCommitIdClauseParserRuleCall_1_0 = (RuleCall)cClauseAssignment_1.eContents().get(0);
		
		//OsTxCommitIdCriteria:
		//	name="commit-id" clause=OsTxCommitIdClause;
		public ParserRule getRule() { return rule; }

		//name="commit-id" clause=OsTxCommitIdClause
		public Group getGroup() { return cGroup; }

		//name="commit-id"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"commit-id"
		public Keyword getNameCommitIdKeyword_0_0() { return cNameCommitIdKeyword_0_0; }

		//clause=OsTxCommitIdClause
		public Assignment getClauseAssignment_1() { return cClauseAssignment_1; }

		//OsTxCommitIdClause
		public RuleCall getClauseOsTxCommitIdClauseParserRuleCall_1_0() { return cClauseOsTxCommitIdClauseParserRuleCall_1_0; }
	}

	public class OsTxCommitIdClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxCommitIdClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsTxCommitIdEqualsClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTxCommitIdIsNullClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OsTxCommitIdClause:
		//	OsTxCommitIdEqualsClause //
		// | OsTxCommitIdIsNullClause;
		public ParserRule getRule() { return rule; }

		//OsTxCommitIdEqualsClause //
		// | OsTxCommitIdIsNullClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsTxCommitIdEqualsClause
		public RuleCall getOsTxCommitIdEqualsClauseParserRuleCall_0() { return cOsTxCommitIdEqualsClauseParserRuleCall_0; }

		//OsTxCommitIdIsNullClause
		public RuleCall getOsTxCommitIdIsNullClauseParserRuleCall_1() { return cOsTxCommitIdIsNullClauseParserRuleCall_1; }
	}

	public class OsTxCommitIdEqualsClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxCommitIdEqualsClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameEqualsSignKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIdsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdsOsArtifactIdParserRuleCall_1_0_0 = (RuleCall)cIdsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cIdsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cIdsOsArtifactIdParserRuleCall_1_1_1_0 = (RuleCall)cIdsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cIdsAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cIdsOsArtifactIdParserRuleCall_1_1_2_1_0 = (RuleCall)cIdsAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		
		//OsTxCommitIdEqualsClause:
		//	name="=" (ids+=OsArtifactId | "[" ids+=OsArtifactId ("," ids+=OsArtifactId)* "]");
		public ParserRule getRule() { return rule; }

		//name="=" (ids+=OsArtifactId | "[" ids+=OsArtifactId ("," ids+=OsArtifactId)* "]")
		public Group getGroup() { return cGroup; }

		//name="="
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"="
		public Keyword getNameEqualsSignKeyword_0_0() { return cNameEqualsSignKeyword_0_0; }

		//ids+=OsArtifactId | "[" ids+=OsArtifactId ("," ids+=OsArtifactId)* "]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ids+=OsArtifactId
		public Assignment getIdsAssignment_1_0() { return cIdsAssignment_1_0; }

		//OsArtifactId
		public RuleCall getIdsOsArtifactIdParserRuleCall_1_0_0() { return cIdsOsArtifactIdParserRuleCall_1_0_0; }

		//"[" ids+=OsArtifactId ("," ids+=OsArtifactId)* "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }

		//ids+=OsArtifactId
		public Assignment getIdsAssignment_1_1_1() { return cIdsAssignment_1_1_1; }

		//OsArtifactId
		public RuleCall getIdsOsArtifactIdParserRuleCall_1_1_1_0() { return cIdsOsArtifactIdParserRuleCall_1_1_1_0; }

		//("," ids+=OsArtifactId)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//","
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }

		//ids+=OsArtifactId
		public Assignment getIdsAssignment_1_1_2_1() { return cIdsAssignment_1_1_2_1; }

		//OsArtifactId
		public RuleCall getIdsOsArtifactIdParserRuleCall_1_1_2_1_0() { return cIdsOsArtifactIdParserRuleCall_1_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_3() { return cRightSquareBracketKeyword_1_1_3; }
	}

	public class OsTxCommitIdIsNullClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxCommitIdIsNullClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameIsKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OsTxCommitIdIsNullClause:
		//	name="is" "null";
		public ParserRule getRule() { return rule; }

		//name="is" "null"
		public Group getGroup() { return cGroup; }

		//name="is"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"is"
		public Keyword getNameIsKeyword_0_0() { return cNameIsKeyword_0_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class OsTxIdCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxIdCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTxIdKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClauseOsTxIdClauseParserRuleCall_1_0 = (RuleCall)cClauseAssignment_1.eContents().get(0);
		
		//OsTxIdCriteria:
		//	name="tx-id" clause=OsTxIdClause;
		public ParserRule getRule() { return rule; }

		//name="tx-id" clause=OsTxIdClause
		public Group getGroup() { return cGroup; }

		//name="tx-id"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"tx-id"
		public Keyword getNameTxIdKeyword_0_0() { return cNameTxIdKeyword_0_0; }

		//clause=OsTxIdClause
		public Assignment getClauseAssignment_1() { return cClauseAssignment_1; }

		//OsTxIdClause
		public RuleCall getClauseOsTxIdClauseParserRuleCall_1_0() { return cClauseOsTxIdClauseParserRuleCall_1_0; }
	}

	public class OsTxIdClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxIdClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsTxIdEqualsClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTxIdOpClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsTxIdRangeClauseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsTxIdClause:
		//	OsTxIdEqualsClause //
		// //
		// | OsTxIdOpClause | OsTxIdRangeClause;
		public ParserRule getRule() { return rule; }

		//OsTxIdEqualsClause //
		// //
		// | OsTxIdOpClause | OsTxIdRangeClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsTxIdEqualsClause
		public RuleCall getOsTxIdEqualsClauseParserRuleCall_0() { return cOsTxIdEqualsClauseParserRuleCall_0; }

		//OsTxIdOpClause
		public RuleCall getOsTxIdOpClauseParserRuleCall_1() { return cOsTxIdOpClauseParserRuleCall_1; }

		//OsTxIdRangeClause
		public RuleCall getOsTxIdRangeClauseParserRuleCall_2() { return cOsTxIdRangeClauseParserRuleCall_2; }
	}

	public class OsTxIdEqualsClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxIdEqualsClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameEqualsSignKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIdsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdsOsTxIdParserRuleCall_1_0_0 = (RuleCall)cIdsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cIdsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cIdsOsTxIdParserRuleCall_1_1_1_0 = (RuleCall)cIdsAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cIdsAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cIdsOsTxIdParserRuleCall_1_1_2_1_0 = (RuleCall)cIdsAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		
		//OsTxIdEqualsClause:
		//	name="=" (ids+=OsTxId | "[" ids+=OsTxId ("," ids+=OsTxId)* "]");
		public ParserRule getRule() { return rule; }

		//name="=" (ids+=OsTxId | "[" ids+=OsTxId ("," ids+=OsTxId)* "]")
		public Group getGroup() { return cGroup; }

		//name="="
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"="
		public Keyword getNameEqualsSignKeyword_0_0() { return cNameEqualsSignKeyword_0_0; }

		//ids+=OsTxId | "[" ids+=OsTxId ("," ids+=OsTxId)* "]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ids+=OsTxId
		public Assignment getIdsAssignment_1_0() { return cIdsAssignment_1_0; }

		//OsTxId
		public RuleCall getIdsOsTxIdParserRuleCall_1_0_0() { return cIdsOsTxIdParserRuleCall_1_0_0; }

		//"[" ids+=OsTxId ("," ids+=OsTxId)* "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }

		//ids+=OsTxId
		public Assignment getIdsAssignment_1_1_1() { return cIdsAssignment_1_1_1; }

		//OsTxId
		public RuleCall getIdsOsTxIdParserRuleCall_1_1_1_0() { return cIdsOsTxIdParserRuleCall_1_1_1_0; }

		//("," ids+=OsTxId)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//","
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }

		//ids+=OsTxId
		public Assignment getIdsAssignment_1_1_2_1() { return cIdsAssignment_1_1_2_1; }

		//OsTxId
		public RuleCall getIdsOsTxIdParserRuleCall_1_1_2_1_0() { return cIdsOsTxIdParserRuleCall_1_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_3() { return cRightSquareBracketKeyword_1_1_3; }
	}

	public class OsTxIdOpClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxIdOpClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOsNonEqualOperatorEnumRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdOsTxIdParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//OsTxIdOpClause:
		//	op=OsNonEqualOperator id=OsTxId;
		public ParserRule getRule() { return rule; }

		//op=OsNonEqualOperator id=OsTxId
		public Group getGroup() { return cGroup; }

		//op=OsNonEqualOperator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//OsNonEqualOperator
		public RuleCall getOpOsNonEqualOperatorEnumRuleCall_0_0() { return cOpOsNonEqualOperatorEnumRuleCall_0_0; }

		//id=OsTxId
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//OsTxId
		public RuleCall getIdOsTxIdParserRuleCall_1_0() { return cIdOsTxIdParserRuleCall_1_0; }
	}

	public class OsTxIdRangeClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxIdRangeClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameInKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFromIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFromIdOsTxIdParserRuleCall_2_0 = (RuleCall)cFromIdAssignment_2.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cToIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cToIdOsTxIdParserRuleCall_4_0 = (RuleCall)cToIdAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OsTxIdRangeClause:
		//	name="in" "(" fromId=OsTxId ".." toId=OsTxId ")";
		public ParserRule getRule() { return rule; }

		//name="in" "(" fromId=OsTxId ".." toId=OsTxId ")"
		public Group getGroup() { return cGroup; }

		//name="in"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"in"
		public Keyword getNameInKeyword_0_0() { return cNameInKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//fromId=OsTxId
		public Assignment getFromIdAssignment_2() { return cFromIdAssignment_2; }

		//OsTxId
		public RuleCall getFromIdOsTxIdParserRuleCall_2_0() { return cFromIdOsTxIdParserRuleCall_2_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_3() { return cFullStopFullStopKeyword_3; }

		//toId=OsTxId
		public Assignment getToIdAssignment_4() { return cToIdAssignment_4; }

		//OsTxId
		public RuleCall getToIdOsTxIdParserRuleCall_4_0() { return cToIdOsTxIdParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class OsTxTimestampCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxTimestampCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameDateKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClauseOsTxTimestampClauseParserRuleCall_1_0 = (RuleCall)cClauseAssignment_1.eContents().get(0);
		
		//OsTxTimestampCriteria:
		//	name="date" clause=OsTxTimestampClause;
		public ParserRule getRule() { return rule; }

		//name="date" clause=OsTxTimestampClause
		public Group getGroup() { return cGroup; }

		//name="date"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"date"
		public Keyword getNameDateKeyword_0_0() { return cNameDateKeyword_0_0; }

		//clause=OsTxTimestampClause
		public Assignment getClauseAssignment_1() { return cClauseAssignment_1; }

		//OsTxTimestampClause
		public RuleCall getClauseOsTxTimestampClauseParserRuleCall_1_0() { return cClauseOsTxTimestampClauseParserRuleCall_1_0; }
	}

	public class OsTxTimestampClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxTimestampClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsTxTimestampOpClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsTxTimestampRangeClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OsTxTimestampClause:
		//	OsTxTimestampOpClause // 
		// | OsTxTimestampRangeClause;
		public ParserRule getRule() { return rule; }

		//OsTxTimestampOpClause // 
		// | OsTxTimestampRangeClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsTxTimestampOpClause
		public RuleCall getOsTxTimestampOpClauseParserRuleCall_0() { return cOsTxTimestampOpClauseParserRuleCall_0; }

		//OsTxTimestampRangeClause
		public RuleCall getOsTxTimestampRangeClauseParserRuleCall_1() { return cOsTxTimestampRangeClauseParserRuleCall_1; }
	}

	public class OsTxTimestampOpClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxTimestampOpClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOsOperatorEnumRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cTimestampAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimestampOsTxTimestampParserRuleCall_1_0 = (RuleCall)cTimestampAssignment_1.eContents().get(0);
		
		//OsTxTimestampOpClause:
		//	op=OsOperator timestamp=OsTxTimestamp;
		public ParserRule getRule() { return rule; }

		//op=OsOperator timestamp=OsTxTimestamp
		public Group getGroup() { return cGroup; }

		//op=OsOperator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//OsOperator
		public RuleCall getOpOsOperatorEnumRuleCall_0_0() { return cOpOsOperatorEnumRuleCall_0_0; }

		//timestamp=OsTxTimestamp
		public Assignment getTimestampAssignment_1() { return cTimestampAssignment_1; }

		//OsTxTimestamp
		public RuleCall getTimestampOsTxTimestampParserRuleCall_1_0() { return cTimestampOsTxTimestampParserRuleCall_1_0; }
	}

	public class OsTxTimestampRangeClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxTimestampRangeClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameInKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFromAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFromOsTxTimestampParserRuleCall_2_0 = (RuleCall)cFromAssignment_2.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cToAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cToOsTxTimestampParserRuleCall_4_0 = (RuleCall)cToAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OsTxTimestampRangeClause:
		//	name="in" "(" from=OsTxTimestamp ".." to=OsTxTimestamp ")";
		public ParserRule getRule() { return rule; }

		//name="in" "(" from=OsTxTimestamp ".." to=OsTxTimestamp ")"
		public Group getGroup() { return cGroup; }

		//name="in"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"in"
		public Keyword getNameInKeyword_0_0() { return cNameInKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//from=OsTxTimestamp
		public Assignment getFromAssignment_2() { return cFromAssignment_2; }

		//OsTxTimestamp
		public RuleCall getFromOsTxTimestampParserRuleCall_2_0() { return cFromOsTxTimestampParserRuleCall_2_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_3() { return cFullStopFullStopKeyword_3; }

		//to=OsTxTimestamp
		public Assignment getToAssignment_4() { return cToAssignment_4; }

		//OsTxTimestamp
		public RuleCall getToOsTxTimestampParserRuleCall_4_0() { return cToOsTxTimestampParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class OsArtifactQueryStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsArtifactQueryStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameArtifactsKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cDataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataOsArtifactQueryParserRuleCall_1_0 = (RuleCall)cDataAssignment_1.eContents().get(0);
		private final Assignment cCollectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCollectOsCollectClauseParserRuleCall_2_0 = (RuleCall)cCollectAssignment_2.eContents().get(0);
		
		//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS ARTIFACT QUERY
		//
		//OsArtifactQueryStatement:
		//	name="artifacts" data=OsArtifactQuery collect=OsCollectClause?;
		public ParserRule getRule() { return rule; }

		//name="artifacts" data=OsArtifactQuery collect=OsCollectClause?
		public Group getGroup() { return cGroup; }

		//name="artifacts"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"artifacts"
		public Keyword getNameArtifactsKeyword_0_0() { return cNameArtifactsKeyword_0_0; }

		//data=OsArtifactQuery
		public Assignment getDataAssignment_1() { return cDataAssignment_1; }

		//OsArtifactQuery
		public RuleCall getDataOsArtifactQueryParserRuleCall_1_0() { return cDataOsArtifactQueryParserRuleCall_1_0; }

		//collect=OsCollectClause?
		public Assignment getCollectAssignment_2() { return cCollectAssignment_2; }

		//OsCollectClause
		public RuleCall getCollectOsCollectClauseParserRuleCall_2_0() { return cCollectOsCollectClauseParserRuleCall_2_0; }
	}

	public class OsArtifactQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsArtifactQuery");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsArtifactQueryAllParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsArtifactQueryByPredicateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OsArtifactQuery:
		//	OsArtifactQueryAll //
		// | OsArtifactQueryByPredicate;
		public ParserRule getRule() { return rule; }

		//OsArtifactQueryAll //
		// | OsArtifactQueryByPredicate
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsArtifactQueryAll
		public RuleCall getOsArtifactQueryAllParserRuleCall_0() { return cOsArtifactQueryAllParserRuleCall_0; }

		//OsArtifactQueryByPredicate
		public RuleCall getOsArtifactQueryByPredicateParserRuleCall_1() { return cOsArtifactQueryByPredicateParserRuleCall_1; }
	}

	public class OsArtifactQueryAllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsArtifactQueryAll");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameAsteriskKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//OsArtifactQueryAll:
		//	name="*";
		public ParserRule getRule() { return rule; }

		//name="*"
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"*"
		public Keyword getNameAsteriskKeyword_0() { return cNameAsteriskKeyword_0; }
	}

	public class OsArtifactQueryByPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsArtifactQueryByPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameWhereKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cCriteriaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCriteriaOsItemCriteriaParserRuleCall_1_0 = (RuleCall)cCriteriaAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAndKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCriteriaAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCriteriaOsItemCriteriaParserRuleCall_2_1_0 = (RuleCall)cCriteriaAssignment_2_1.eContents().get(0);
		
		//OsArtifactQueryByPredicate:
		//	name="where" criteria+=OsItemCriteria ("and" criteria+=OsItemCriteria)*;
		public ParserRule getRule() { return rule; }

		//name="where" criteria+=OsItemCriteria ("and" criteria+=OsItemCriteria)*
		public Group getGroup() { return cGroup; }

		//name="where"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"where"
		public Keyword getNameWhereKeyword_0_0() { return cNameWhereKeyword_0_0; }

		//criteria+=OsItemCriteria
		public Assignment getCriteriaAssignment_1() { return cCriteriaAssignment_1; }

		//OsItemCriteria
		public RuleCall getCriteriaOsItemCriteriaParserRuleCall_1_0() { return cCriteriaOsItemCriteriaParserRuleCall_1_0; }

		//("and" criteria+=OsItemCriteria)*
		public Group getGroup_2() { return cGroup_2; }

		//"and"
		public Keyword getAndKeyword_2_0() { return cAndKeyword_2_0; }

		//criteria+=OsItemCriteria
		public Assignment getCriteriaAssignment_2_1() { return cCriteriaAssignment_2_1; }

		//OsItemCriteria
		public RuleCall getCriteriaOsItemCriteriaParserRuleCall_2_1_0() { return cCriteriaOsItemCriteriaParserRuleCall_2_1_0; }
	}

	public class OsItemCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsItemCriteria");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsArtifactCriteriaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsAttributeCriteriaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsRelationCriteriaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsItemCriteria:
		//	OsArtifactCriteria //
		// //
		// | OsAttributeCriteria | OsRelationCriteria;
		public ParserRule getRule() { return rule; }

		//OsArtifactCriteria //
		// //
		// | OsAttributeCriteria | OsRelationCriteria
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsArtifactCriteria
		public RuleCall getOsArtifactCriteriaParserRuleCall_0() { return cOsArtifactCriteriaParserRuleCall_0; }

		//OsAttributeCriteria
		public RuleCall getOsAttributeCriteriaParserRuleCall_1() { return cOsAttributeCriteriaParserRuleCall_1; }

		//OsRelationCriteria
		public RuleCall getOsRelationCriteriaParserRuleCall_2() { return cOsRelationCriteriaParserRuleCall_2; }
	}

	public class OsArtifactCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsArtifactCriteria");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsArtifactIdCriteriaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsArtifactTypeCriteriaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOsArtifactGuidCriteriaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OsArtifactCriteria:
		//	OsArtifactIdCriteria //
		// //
		// | OsArtifactTypeCriteria | OsArtifactGuidCriteria;
		public ParserRule getRule() { return rule; }

		//OsArtifactIdCriteria //
		// //
		// | OsArtifactTypeCriteria | OsArtifactGuidCriteria
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsArtifactIdCriteria
		public RuleCall getOsArtifactIdCriteriaParserRuleCall_0() { return cOsArtifactIdCriteriaParserRuleCall_0; }

		//OsArtifactTypeCriteria
		public RuleCall getOsArtifactTypeCriteriaParserRuleCall_1() { return cOsArtifactTypeCriteriaParserRuleCall_1; }

		//OsArtifactGuidCriteria
		public RuleCall getOsArtifactGuidCriteriaParserRuleCall_2() { return cOsArtifactGuidCriteriaParserRuleCall_2; }
	}

	public class OsArtifactIdCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsArtifactIdCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameArtIdKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIdsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cIdsOsArtifactIdParserRuleCall_2_0_0 = (RuleCall)cIdsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIdsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIdsOsArtifactIdParserRuleCall_2_1_1_0 = (RuleCall)cIdsAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cIdsAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cIdsOsArtifactIdParserRuleCall_2_1_2_1_0 = (RuleCall)cIdsAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//OsArtifactIdCriteria:
		//	name="art-id" "=" (ids+=OsArtifactId | "[" ids+=OsArtifactId ("," ids+=OsArtifactId)* "]");
		public ParserRule getRule() { return rule; }

		//name="art-id" "=" (ids+=OsArtifactId | "[" ids+=OsArtifactId ("," ids+=OsArtifactId)* "]")
		public Group getGroup() { return cGroup; }

		//name="art-id"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"art-id"
		public Keyword getNameArtIdKeyword_0_0() { return cNameArtIdKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//ids+=OsArtifactId | "[" ids+=OsArtifactId ("," ids+=OsArtifactId)* "]"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//ids+=OsArtifactId
		public Assignment getIdsAssignment_2_0() { return cIdsAssignment_2_0; }

		//OsArtifactId
		public RuleCall getIdsOsArtifactIdParserRuleCall_2_0_0() { return cIdsOsArtifactIdParserRuleCall_2_0_0; }

		//"[" ids+=OsArtifactId ("," ids+=OsArtifactId)* "]"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//ids+=OsArtifactId
		public Assignment getIdsAssignment_2_1_1() { return cIdsAssignment_2_1_1; }

		//OsArtifactId
		public RuleCall getIdsOsArtifactIdParserRuleCall_2_1_1_0() { return cIdsOsArtifactIdParserRuleCall_2_1_1_0; }

		//("," ids+=OsArtifactId)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//ids+=OsArtifactId
		public Assignment getIdsAssignment_2_1_2_1() { return cIdsAssignment_2_1_2_1; }

		//OsArtifactId
		public RuleCall getIdsOsArtifactIdParserRuleCall_2_1_2_1_0() { return cIdsOsArtifactIdParserRuleCall_2_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }
	}

	public class OsArtifactGuidCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsArtifactGuidCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameArtGuidKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIdsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cIdsOsArtifactGuidParserRuleCall_2_0_0 = (RuleCall)cIdsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cIdsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cIdsOsArtifactGuidParserRuleCall_2_1_1_0 = (RuleCall)cIdsAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cIdsAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cIdsOsArtifactGuidParserRuleCall_2_1_2_1_0 = (RuleCall)cIdsAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//OsArtifactGuidCriteria:
		//	name="art-guid" "=" (ids+=OsArtifactGuid | "[" ids+=OsArtifactGuid ("," ids+=OsArtifactGuid)* "]");
		public ParserRule getRule() { return rule; }

		//name="art-guid" "=" (ids+=OsArtifactGuid | "[" ids+=OsArtifactGuid ("," ids+=OsArtifactGuid)* "]")
		public Group getGroup() { return cGroup; }

		//name="art-guid"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"art-guid"
		public Keyword getNameArtGuidKeyword_0_0() { return cNameArtGuidKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//ids+=OsArtifactGuid | "[" ids+=OsArtifactGuid ("," ids+=OsArtifactGuid)* "]"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//ids+=OsArtifactGuid
		public Assignment getIdsAssignment_2_0() { return cIdsAssignment_2_0; }

		//OsArtifactGuid
		public RuleCall getIdsOsArtifactGuidParserRuleCall_2_0_0() { return cIdsOsArtifactGuidParserRuleCall_2_0_0; }

		//"[" ids+=OsArtifactGuid ("," ids+=OsArtifactGuid)* "]"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//ids+=OsArtifactGuid
		public Assignment getIdsAssignment_2_1_1() { return cIdsAssignment_2_1_1; }

		//OsArtifactGuid
		public RuleCall getIdsOsArtifactGuidParserRuleCall_2_1_1_0() { return cIdsOsArtifactGuidParserRuleCall_2_1_1_0; }

		//("," ids+=OsArtifactGuid)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//ids+=OsArtifactGuid
		public Assignment getIdsAssignment_2_1_2_1() { return cIdsAssignment_2_1_2_1; }

		//OsArtifactGuid
		public RuleCall getIdsOsArtifactGuidParserRuleCall_2_1_2_1_0() { return cIdsOsArtifactGuidParserRuleCall_2_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }
	}

	public class OsArtifactTypeCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsArtifactTypeCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameArtTypeKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClauseOsArtifactTypeClauseParserRuleCall_1_0 = (RuleCall)cClauseAssignment_1.eContents().get(0);
		
		//OsArtifactTypeCriteria:
		//	name="art-type" clause=OsArtifactTypeClause;
		public ParserRule getRule() { return rule; }

		//name="art-type" clause=OsArtifactTypeClause
		public Group getGroup() { return cGroup; }

		//name="art-type"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"art-type"
		public Keyword getNameArtTypeKeyword_0_0() { return cNameArtTypeKeyword_0_0; }

		//clause=OsArtifactTypeClause
		public Assignment getClauseAssignment_1() { return cClauseAssignment_1; }

		//OsArtifactTypeClause
		public RuleCall getClauseOsArtifactTypeClauseParserRuleCall_1_0() { return cClauseOsArtifactTypeClauseParserRuleCall_1_0; }
	}

	public class OsArtifactTypeClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsArtifactTypeClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsArtifactTypeEqualsClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsArtifactTypeInstanceOfClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OsArtifactTypeClause:
		//	OsArtifactTypeEqualsClause //
		// | OsArtifactTypeInstanceOfClause;
		public ParserRule getRule() { return rule; }

		//OsArtifactTypeEqualsClause //
		// | OsArtifactTypeInstanceOfClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsArtifactTypeEqualsClause
		public RuleCall getOsArtifactTypeEqualsClauseParserRuleCall_0() { return cOsArtifactTypeEqualsClauseParserRuleCall_0; }

		//OsArtifactTypeInstanceOfClause
		public RuleCall getOsArtifactTypeInstanceOfClauseParserRuleCall_1() { return cOsArtifactTypeInstanceOfClauseParserRuleCall_1; }
	}

	public class OsArtifactTypeEqualsClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsArtifactTypeEqualsClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameEqualsSignKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypesOsMetaTypeIdParserRuleCall_1_0_0 = (RuleCall)cTypesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTypesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypesOsMetaTypeIdParserRuleCall_1_1_1_0 = (RuleCall)cTypesAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cTypesAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cTypesOsMetaTypeIdParserRuleCall_1_1_2_1_0 = (RuleCall)cTypesAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		
		//OsArtifactTypeEqualsClause:
		//	name="=" (types+=OsMetaTypeId | "[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]");
		public ParserRule getRule() { return rule; }

		//name="=" (types+=OsMetaTypeId | "[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]")
		public Group getGroup() { return cGroup; }

		//name="="
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"="
		public Keyword getNameEqualsSignKeyword_0_0() { return cNameEqualsSignKeyword_0_0; }

		//types+=OsMetaTypeId | "[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//types+=OsMetaTypeId
		public Assignment getTypesAssignment_1_0() { return cTypesAssignment_1_0; }

		//OsMetaTypeId
		public RuleCall getTypesOsMetaTypeIdParserRuleCall_1_0_0() { return cTypesOsMetaTypeIdParserRuleCall_1_0_0; }

		//"[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }

		//types+=OsMetaTypeId
		public Assignment getTypesAssignment_1_1_1() { return cTypesAssignment_1_1_1; }

		//OsMetaTypeId
		public RuleCall getTypesOsMetaTypeIdParserRuleCall_1_1_1_0() { return cTypesOsMetaTypeIdParserRuleCall_1_1_1_0; }

		//("," types+=OsMetaTypeId)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//","
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }

		//types+=OsMetaTypeId
		public Assignment getTypesAssignment_1_1_2_1() { return cTypesAssignment_1_1_2_1; }

		//OsMetaTypeId
		public RuleCall getTypesOsMetaTypeIdParserRuleCall_1_1_2_1_0() { return cTypesOsMetaTypeIdParserRuleCall_1_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_3() { return cRightSquareBracketKeyword_1_1_3; }
	}

	public class OsArtifactTypeInstanceOfClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsArtifactTypeInstanceOfClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameInstanceOfKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypesOsMetaTypeIdParserRuleCall_1_0_0 = (RuleCall)cTypesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTypesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypesOsMetaTypeIdParserRuleCall_1_1_1_0 = (RuleCall)cTypesAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cTypesAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cTypesOsMetaTypeIdParserRuleCall_1_1_2_1_0 = (RuleCall)cTypesAssignment_1_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		
		//OsArtifactTypeInstanceOfClause:
		//	name="instance-of" (types+=OsMetaTypeId | "[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]");
		public ParserRule getRule() { return rule; }

		//name="instance-of" (types+=OsMetaTypeId | "[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]")
		public Group getGroup() { return cGroup; }

		//name="instance-of"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"instance-of"
		public Keyword getNameInstanceOfKeyword_0_0() { return cNameInstanceOfKeyword_0_0; }

		//types+=OsMetaTypeId | "[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//types+=OsMetaTypeId
		public Assignment getTypesAssignment_1_0() { return cTypesAssignment_1_0; }

		//OsMetaTypeId
		public RuleCall getTypesOsMetaTypeIdParserRuleCall_1_0_0() { return cTypesOsMetaTypeIdParserRuleCall_1_0_0; }

		//"[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }

		//types+=OsMetaTypeId
		public Assignment getTypesAssignment_1_1_1() { return cTypesAssignment_1_1_1; }

		//OsMetaTypeId
		public RuleCall getTypesOsMetaTypeIdParserRuleCall_1_1_1_0() { return cTypesOsMetaTypeIdParserRuleCall_1_1_1_0; }

		//("," types+=OsMetaTypeId)*
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//","
		public Keyword getCommaKeyword_1_1_2_0() { return cCommaKeyword_1_1_2_0; }

		//types+=OsMetaTypeId
		public Assignment getTypesAssignment_1_1_2_1() { return cTypesAssignment_1_1_2_1; }

		//OsMetaTypeId
		public RuleCall getTypesOsMetaTypeIdParserRuleCall_1_1_2_1_0() { return cTypesOsMetaTypeIdParserRuleCall_1_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_3() { return cRightSquareBracketKeyword_1_1_3; }
	}

	public class OsAttributeCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsAttributeCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameAttributeKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClauseOsAttributeClauseParserRuleCall_1_0 = (RuleCall)cClauseAssignment_1.eContents().get(0);
		
		//OsAttributeCriteria:
		//	name="attribute" clause=OsAttributeClause;
		public ParserRule getRule() { return rule; }

		//name="attribute" clause=OsAttributeClause
		public Group getGroup() { return cGroup; }

		//name="attribute"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"attribute"
		public Keyword getNameAttributeKeyword_0_0() { return cNameAttributeKeyword_0_0; }

		//clause=OsAttributeClause
		public Assignment getClauseAssignment_1() { return cClauseAssignment_1; }

		//OsAttributeClause
		public RuleCall getClauseOsAttributeClauseParserRuleCall_1_0() { return cClauseOsAttributeClauseParserRuleCall_1_0; }
	}

	public class OsAttributeClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsAttributeClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsAttributeExistClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOseAttributeOpClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OsAttributeClause:
		//	OsAttributeExistClause //
		// | OseAttributeOpClause;
		public ParserRule getRule() { return rule; }

		//OsAttributeExistClause //
		// | OseAttributeOpClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsAttributeExistClause
		public RuleCall getOsAttributeExistClauseParserRuleCall_0() { return cOsAttributeExistClauseParserRuleCall_0; }

		//OseAttributeOpClause
		public RuleCall getOseAttributeOpClauseParserRuleCall_1() { return cOseAttributeOpClauseParserRuleCall_1; }
	}

	public class OsAttributeExistClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsAttributeExistClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTypesOsMetaTypeIdParserRuleCall_2_0_0 = (RuleCall)cTypesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTypesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTypesOsMetaTypeIdParserRuleCall_2_1_1_0 = (RuleCall)cTypesAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cTypesOsMetaTypeIdParserRuleCall_2_1_2_1_0 = (RuleCall)cTypesAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNameExistsKeyword_3_0 = (Keyword)cNameAssignment_3.eContents().get(0);
		
		//OsAttributeExistClause:
		//	"type" "=" (types+=OsMetaTypeId | "[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]") name="exists";
		public ParserRule getRule() { return rule; }

		//"type" "=" (types+=OsMetaTypeId | "[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]") name="exists"
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//types+=OsMetaTypeId | "[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//types+=OsMetaTypeId
		public Assignment getTypesAssignment_2_0() { return cTypesAssignment_2_0; }

		//OsMetaTypeId
		public RuleCall getTypesOsMetaTypeIdParserRuleCall_2_0_0() { return cTypesOsMetaTypeIdParserRuleCall_2_0_0; }

		//"[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//types+=OsMetaTypeId
		public Assignment getTypesAssignment_2_1_1() { return cTypesAssignment_2_1_1; }

		//OsMetaTypeId
		public RuleCall getTypesOsMetaTypeIdParserRuleCall_2_1_1_0() { return cTypesOsMetaTypeIdParserRuleCall_2_1_1_0; }

		//("," types+=OsMetaTypeId)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//types+=OsMetaTypeId
		public Assignment getTypesAssignment_2_1_2_1() { return cTypesAssignment_2_1_2_1; }

		//OsMetaTypeId
		public RuleCall getTypesOsMetaTypeIdParserRuleCall_2_1_2_1_0() { return cTypesOsMetaTypeIdParserRuleCall_2_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }

		//name="exists"
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//"exists"
		public Keyword getNameExistsKeyword_3_0() { return cNameExistsKeyword_3_0; }
	}

	public class OseAttributeOpClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OseAttributeOpClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameEqualsSignKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTypesOsMetaTypeIdParserRuleCall_2_0_0 = (RuleCall)cTypesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTypesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTypesOsMetaTypeIdParserRuleCall_2_1_1_0 = (RuleCall)cTypesAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cTypesOsMetaTypeIdParserRuleCall_2_1_2_1_0 = (RuleCall)cTypesAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cOptionsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cOptionsOsQueryOptionEnumRuleCall_3_0_0 = (RuleCall)cOptionsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cOptionsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cOptionsOsQueryOptionEnumRuleCall_3_1_1_0 = (RuleCall)cOptionsAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cGroup_3_1.eContents().get(2);
		private final Keyword cCommaKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Assignment cOptionsAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cOptionsOsQueryOptionEnumRuleCall_3_1_2_1_0 = (RuleCall)cOptionsAssignment_3_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cValuesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cValuesOsAttributeValueParserRuleCall_4_0_0 = (RuleCall)cValuesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cValuesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cValuesOsAttributeValueParserRuleCall_4_1_1_0 = (RuleCall)cValuesAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_1_2 = (Group)cGroup_4_1.eContents().get(2);
		private final Keyword cCommaKeyword_4_1_2_0 = (Keyword)cGroup_4_1_2.eContents().get(0);
		private final Assignment cValuesAssignment_4_1_2_1 = (Assignment)cGroup_4_1_2.eContents().get(1);
		private final RuleCall cValuesOsAttributeValueParserRuleCall_4_1_2_1_0 = (RuleCall)cValuesAssignment_4_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_1_3 = (Keyword)cGroup_4_1.eContents().get(3);
		
		//OseAttributeOpClause:
		//	"type" name="=" (types+=OsMetaTypeId // 
		// | "[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]")
		//	(options+=OsQueryOption | "[" options+=OsQueryOption ("," options+=OsQueryOption)* "]")? //
		//
		//	(values+=OsAttributeValue | "[" values+=OsAttributeValue ("," values+=OsAttributeValue)* "]");
		public ParserRule getRule() { return rule; }

		//"type" name="=" (types+=OsMetaTypeId // 
		// | "[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]")
		//(options+=OsQueryOption | "[" options+=OsQueryOption ("," options+=OsQueryOption)* "]")? //
		// (values+=OsAttributeValue
		//| "[" values+=OsAttributeValue ("," values+=OsAttributeValue)* "]")
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name="="
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"="
		public Keyword getNameEqualsSignKeyword_1_0() { return cNameEqualsSignKeyword_1_0; }

		//types+=OsMetaTypeId // 
		// | "[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//types+=OsMetaTypeId
		public Assignment getTypesAssignment_2_0() { return cTypesAssignment_2_0; }

		//OsMetaTypeId
		public RuleCall getTypesOsMetaTypeIdParserRuleCall_2_0_0() { return cTypesOsMetaTypeIdParserRuleCall_2_0_0; }

		//"[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//types+=OsMetaTypeId
		public Assignment getTypesAssignment_2_1_1() { return cTypesAssignment_2_1_1; }

		//OsMetaTypeId
		public RuleCall getTypesOsMetaTypeIdParserRuleCall_2_1_1_0() { return cTypesOsMetaTypeIdParserRuleCall_2_1_1_0; }

		//("," types+=OsMetaTypeId)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//types+=OsMetaTypeId
		public Assignment getTypesAssignment_2_1_2_1() { return cTypesAssignment_2_1_2_1; }

		//OsMetaTypeId
		public RuleCall getTypesOsMetaTypeIdParserRuleCall_2_1_2_1_0() { return cTypesOsMetaTypeIdParserRuleCall_2_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_3() { return cRightSquareBracketKeyword_2_1_3; }

		//(options+=OsQueryOption | "[" options+=OsQueryOption ("," options+=OsQueryOption)* "]")?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//options+=OsQueryOption
		public Assignment getOptionsAssignment_3_0() { return cOptionsAssignment_3_0; }

		//OsQueryOption
		public RuleCall getOptionsOsQueryOptionEnumRuleCall_3_0_0() { return cOptionsOsQueryOptionEnumRuleCall_3_0_0; }

		//"[" options+=OsQueryOption ("," options+=OsQueryOption)* "]"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_1_0() { return cLeftSquareBracketKeyword_3_1_0; }

		//options+=OsQueryOption
		public Assignment getOptionsAssignment_3_1_1() { return cOptionsAssignment_3_1_1; }

		//OsQueryOption
		public RuleCall getOptionsOsQueryOptionEnumRuleCall_3_1_1_0() { return cOptionsOsQueryOptionEnumRuleCall_3_1_1_0; }

		//("," options+=OsQueryOption)*
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }

		//","
		public Keyword getCommaKeyword_3_1_2_0() { return cCommaKeyword_3_1_2_0; }

		//options+=OsQueryOption
		public Assignment getOptionsAssignment_3_1_2_1() { return cOptionsAssignment_3_1_2_1; }

		//OsQueryOption
		public RuleCall getOptionsOsQueryOptionEnumRuleCall_3_1_2_1_0() { return cOptionsOsQueryOptionEnumRuleCall_3_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_1_3() { return cRightSquareBracketKeyword_3_1_3; }

		//values+=OsAttributeValue | "[" values+=OsAttributeValue ("," values+=OsAttributeValue)* "]"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//values+=OsAttributeValue
		public Assignment getValuesAssignment_4_0() { return cValuesAssignment_4_0; }

		//OsAttributeValue
		public RuleCall getValuesOsAttributeValueParserRuleCall_4_0_0() { return cValuesOsAttributeValueParserRuleCall_4_0_0; }

		//"[" values+=OsAttributeValue ("," values+=OsAttributeValue)* "]"
		public Group getGroup_4_1() { return cGroup_4_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_1_0() { return cLeftSquareBracketKeyword_4_1_0; }

		//values+=OsAttributeValue
		public Assignment getValuesAssignment_4_1_1() { return cValuesAssignment_4_1_1; }

		//OsAttributeValue
		public RuleCall getValuesOsAttributeValueParserRuleCall_4_1_1_0() { return cValuesOsAttributeValueParserRuleCall_4_1_1_0; }

		//("," values+=OsAttributeValue)*
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }

		//","
		public Keyword getCommaKeyword_4_1_2_0() { return cCommaKeyword_4_1_2_0; }

		//values+=OsAttributeValue
		public Assignment getValuesAssignment_4_1_2_1() { return cValuesAssignment_4_1_2_1; }

		//OsAttributeValue
		public RuleCall getValuesOsAttributeValueParserRuleCall_4_1_2_1_0() { return cValuesOsAttributeValueParserRuleCall_4_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_1_3() { return cRightSquareBracketKeyword_4_1_3; }
	}

	public class OsRelationCriteriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsRelationCriteria");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameRelationKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cClauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClauseOsRelationClauseParserRuleCall_1_0 = (RuleCall)cClauseAssignment_1.eContents().get(0);
		
		//OsRelationCriteria:
		//	name="relation" clause=OsRelationClause;
		public ParserRule getRule() { return rule; }

		//name="relation" clause=OsRelationClause
		public Group getGroup() { return cGroup; }

		//name="relation"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"relation"
		public Keyword getNameRelationKeyword_0_0() { return cNameRelationKeyword_0_0; }

		//clause=OsRelationClause
		public Assignment getClauseAssignment_1() { return cClauseAssignment_1; }

		//OsRelationClause
		public RuleCall getClauseOsRelationClauseParserRuleCall_1_0() { return cClauseOsRelationClauseParserRuleCall_1_0; }
	}

	public class OsRelationClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsRelationClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOsRelationExistClauseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOsRelatedToClauseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OsRelationClause:
		//	OsRelationExistClause //
		// | OsRelatedToClause;
		public ParserRule getRule() { return rule; }

		//OsRelationExistClause //
		// | OsRelatedToClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//OsRelationExistClause
		public RuleCall getOsRelationExistClauseParserRuleCall_0() { return cOsRelationExistClauseParserRuleCall_0; }

		//OsRelatedToClause
		public RuleCall getOsRelatedToClauseParserRuleCall_1() { return cOsRelatedToClauseParserRuleCall_1; }
	}

	public class OsRelationExistClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsRelationExistClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTypeKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeOsMetaTypeIdParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOpOsExistenceOperatorEnumRuleCall_3_0 = (RuleCall)cOpAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOnKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSideAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSideOsRelationSideEnumRuleCall_4_1_0 = (RuleCall)cSideAssignment_4_1.eContents().get(0);
		
		//OsRelationExistClause:
		//	name="type" "=" type=OsMetaTypeId op=OsExistenceOperator ("on" side=OsRelationSide)?;
		public ParserRule getRule() { return rule; }

		//name="type" "=" type=OsMetaTypeId op=OsExistenceOperator ("on" side=OsRelationSide)?
		public Group getGroup() { return cGroup; }

		//name="type"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"type"
		public Keyword getNameTypeKeyword_0_0() { return cNameTypeKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//type=OsMetaTypeId
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//OsMetaTypeId
		public RuleCall getTypeOsMetaTypeIdParserRuleCall_2_0() { return cTypeOsMetaTypeIdParserRuleCall_2_0; }

		//op=OsExistenceOperator
		public Assignment getOpAssignment_3() { return cOpAssignment_3; }

		//OsExistenceOperator
		public RuleCall getOpOsExistenceOperatorEnumRuleCall_3_0() { return cOpOsExistenceOperatorEnumRuleCall_3_0; }

		//("on" side=OsRelationSide)?
		public Group getGroup_4() { return cGroup_4; }

		//"on"
		public Keyword getOnKeyword_4_0() { return cOnKeyword_4_0; }

		//side=OsRelationSide
		public Assignment getSideAssignment_4_1() { return cSideAssignment_4_1; }

		//OsRelationSide
		public RuleCall getSideOsRelationSideEnumRuleCall_4_1_0() { return cSideOsRelationSideEnumRuleCall_4_1_0; }
	}

	public class OsRelatedToClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsRelatedToClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTypeKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeOsMetaTypeIdParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSideAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSideOsRelationSideEnumRuleCall_4_0 = (RuleCall)cSideAssignment_4.eContents().get(0);
		private final Keyword cIdKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cIdsAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cIdsOsArtifactIdParserRuleCall_7_0_0 = (RuleCall)cIdsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cAlternatives_7.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cIdsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cIdsOsArtifactIdParserRuleCall_7_1_1_0 = (RuleCall)cIdsAssignment_7_1_1.eContents().get(0);
		private final Group cGroup_7_1_2 = (Group)cGroup_7_1.eContents().get(2);
		private final Keyword cCommaKeyword_7_1_2_0 = (Keyword)cGroup_7_1_2.eContents().get(0);
		private final Assignment cIdsAssignment_7_1_2_1 = (Assignment)cGroup_7_1_2.eContents().get(1);
		private final RuleCall cIdsOsArtifactIdParserRuleCall_7_1_2_1_0 = (RuleCall)cIdsAssignment_7_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_1_3 = (Keyword)cGroup_7_1.eContents().get(3);
		
		//OsRelatedToClause:
		//	name="type" "=" type=OsMetaTypeId "on" side=OsRelationSide "id" //
		// "=" (ids+=OsArtifactId | "[" ids+=OsArtifactId
		//	("," ids+=OsArtifactId)* "]");
		public ParserRule getRule() { return rule; }

		//name="type" "=" type=OsMetaTypeId "on" side=OsRelationSide "id" //
		// "=" (ids+=OsArtifactId | "[" ids+=OsArtifactId (","
		//ids+=OsArtifactId)* "]")
		public Group getGroup() { return cGroup; }

		//name="type"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"type"
		public Keyword getNameTypeKeyword_0_0() { return cNameTypeKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//type=OsMetaTypeId
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//OsMetaTypeId
		public RuleCall getTypeOsMetaTypeIdParserRuleCall_2_0() { return cTypeOsMetaTypeIdParserRuleCall_2_0; }

		//"on"
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }

		//side=OsRelationSide
		public Assignment getSideAssignment_4() { return cSideAssignment_4; }

		//OsRelationSide
		public RuleCall getSideOsRelationSideEnumRuleCall_4_0() { return cSideOsRelationSideEnumRuleCall_4_0; }

		//"id"
		public Keyword getIdKeyword_5() { return cIdKeyword_5; }

		////
		// "="
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }

		//ids+=OsArtifactId | "[" ids+=OsArtifactId ("," ids+=OsArtifactId)* "]"
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//ids+=OsArtifactId
		public Assignment getIdsAssignment_7_0() { return cIdsAssignment_7_0; }

		//OsArtifactId
		public RuleCall getIdsOsArtifactIdParserRuleCall_7_0_0() { return cIdsOsArtifactIdParserRuleCall_7_0_0; }

		//"[" ids+=OsArtifactId ("," ids+=OsArtifactId)* "]"
		public Group getGroup_7_1() { return cGroup_7_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_7_1_0() { return cLeftSquareBracketKeyword_7_1_0; }

		//ids+=OsArtifactId
		public Assignment getIdsAssignment_7_1_1() { return cIdsAssignment_7_1_1; }

		//OsArtifactId
		public RuleCall getIdsOsArtifactIdParserRuleCall_7_1_1_0() { return cIdsOsArtifactIdParserRuleCall_7_1_1_0; }

		//("," ids+=OsArtifactId)*
		public Group getGroup_7_1_2() { return cGroup_7_1_2; }

		//","
		public Keyword getCommaKeyword_7_1_2_0() { return cCommaKeyword_7_1_2_0; }

		//ids+=OsArtifactId
		public Assignment getIdsAssignment_7_1_2_1() { return cIdsAssignment_7_1_2_1; }

		//OsArtifactId
		public RuleCall getIdsOsArtifactIdParserRuleCall_7_1_2_1_0() { return cIdsOsArtifactIdParserRuleCall_7_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7_1_3() { return cRightSquareBracketKeyword_7_1_3; }
	}

	public class OsFollowClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsFollowClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameFollowKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cStmtAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStmtOsFollowStatementParserRuleCall_1_0 = (RuleCall)cStmtAssignment_1.eContents().get(0);
		
		//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS FOLLOW
		// OsFollowClause:
		//	name="follow" stmt=OsFollowStatement;
		public ParserRule getRule() { return rule; }

		//name="follow" stmt=OsFollowStatement
		public Group getGroup() { return cGroup; }

		//name="follow"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"follow"
		public Keyword getNameFollowKeyword_0_0() { return cNameFollowKeyword_0_0; }

		//stmt=OsFollowStatement
		public Assignment getStmtAssignment_1() { return cStmtAssignment_1; }

		//OsFollowStatement
		public RuleCall getStmtOsFollowStatementParserRuleCall_1_0() { return cStmtOsFollowStatementParserRuleCall_1_0; }
	}

	public class OsFollowStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsFollowStatement");
		private final RuleCall cOsFollowRelationTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OsFollowStatement:
		//	OsFollowRelationType;
		public ParserRule getRule() { return rule; }

		//OsFollowRelationType
		public RuleCall getOsFollowRelationTypeParserRuleCall() { return cOsFollowRelationTypeParserRuleCall; }
	}

	public class OsFollowRelationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OsFollowRelationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameRelationKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeOsMetaTypeIdParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSideAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSideOsRelationSideEnumRuleCall_5_0 = (RuleCall)cSideAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWhereKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCriteriaAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCriteriaOsItemCriteriaParserRuleCall_6_1_0 = (RuleCall)cCriteriaAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cAndKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cCriteriaAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cCriteriaOsItemCriteriaParserRuleCall_6_2_1_0 = (RuleCall)cCriteriaAssignment_6_2_1.eContents().get(0);
		private final Assignment cCollectAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCollectOsCollectClauseParserRuleCall_7_0 = (RuleCall)cCollectAssignment_7.eContents().get(0);
		
		//OsFollowRelationType:
		//	name="relation" "type" "=" type=OsMetaTypeId "to" side= // 
		// OsRelationSide ("where" criteria+=OsItemCriteria ("and"
		//	criteria+=OsItemCriteria)*)? // 
		// collect=OsCollectClause?;
		public ParserRule getRule() { return rule; }

		//name="relation" "type" "=" type=OsMetaTypeId "to" side= // 
		// OsRelationSide ("where" criteria+=OsItemCriteria ("and"
		//criteria+=OsItemCriteria)*)? // 
		// collect=OsCollectClause?
		public Group getGroup() { return cGroup; }

		//name="relation"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"relation"
		public Keyword getNameRelationKeyword_0_0() { return cNameRelationKeyword_0_0; }

		//"type"
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//type=OsMetaTypeId
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//OsMetaTypeId
		public RuleCall getTypeOsMetaTypeIdParserRuleCall_3_0() { return cTypeOsMetaTypeIdParserRuleCall_3_0; }

		//"to"
		public Keyword getToKeyword_4() { return cToKeyword_4; }

		//side= // 
		// OsRelationSide
		public Assignment getSideAssignment_5() { return cSideAssignment_5; }

		//// 
		// OsRelationSide
		public RuleCall getSideOsRelationSideEnumRuleCall_5_0() { return cSideOsRelationSideEnumRuleCall_5_0; }

		//("where" criteria+=OsItemCriteria ("and" criteria+=OsItemCriteria)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"where"
		public Keyword getWhereKeyword_6_0() { return cWhereKeyword_6_0; }

		//criteria+=OsItemCriteria
		public Assignment getCriteriaAssignment_6_1() { return cCriteriaAssignment_6_1; }

		//OsItemCriteria
		public RuleCall getCriteriaOsItemCriteriaParserRuleCall_6_1_0() { return cCriteriaOsItemCriteriaParserRuleCall_6_1_0; }

		//("and" criteria+=OsItemCriteria)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//"and"
		public Keyword getAndKeyword_6_2_0() { return cAndKeyword_6_2_0; }

		//criteria+=OsItemCriteria
		public Assignment getCriteriaAssignment_6_2_1() { return cCriteriaAssignment_6_2_1; }

		//OsItemCriteria
		public RuleCall getCriteriaOsItemCriteriaParserRuleCall_6_2_1_0() { return cCriteriaOsItemCriteriaParserRuleCall_6_2_1_0; }

		//collect=OsCollectClause?
		public Assignment getCollectAssignment_7() { return cCollectAssignment_7; }

		//OsCollectClause
		public RuleCall getCollectOsCollectClauseParserRuleCall_7_0() { return cCollectOsCollectClauseParserRuleCall_7_0; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHEXTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFLOATTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Number hidden():
		//	HEX | DECIMAL | INT | FLOAT;
		public ParserRule getRule() { return rule; }

		//HEX | DECIMAL | INT | FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_0() { return cHEXTerminalRuleCall_0; }

		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1() { return cDECIMALTerminalRuleCall_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_3() { return cFLOATTerminalRuleCall_3; }
	}
	
	
	public class OsBranchStateElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCREATEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCREATEDCreatedKeyword_0_0 = (Keyword)cCREATEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMODIFIEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMODIFIEDModifiedKeyword_1_0 = (Keyword)cMODIFIEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCOMMITTEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCOMMITTEDCommittedKeyword_2_0 = (Keyword)cCOMMITTEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cREBASELINEDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cREBASELINEDRebaselinedKeyword_3_0 = (Keyword)cREBASELINEDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDELETEDEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDELETEDDeletedKeyword_4_0 = (Keyword)cDELETEDEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cREBASELINE_IN_PROGRESSEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cREBASELINE_IN_PROGRESSRebaseline_in_progressKeyword_5_0 = (Keyword)cREBASELINE_IN_PROGRESSEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cCOMMIT_IN_PROGRESSEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cCOMMIT_IN_PROGRESSCommit_in_progressKeyword_6_0 = (Keyword)cCOMMIT_IN_PROGRESSEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cCREATION_IN_PROGRESSEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cCREATION_IN_PROGRESSCreation_in_progressKeyword_7_0 = (Keyword)cCREATION_IN_PROGRESSEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cDELETE_IN_PROGRESSEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cDELETE_IN_PROGRESSDelete_in_progressKeyword_8_0 = (Keyword)cDELETE_IN_PROGRESSEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cPURGE_IN_PROGRESSEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cPURGE_IN_PROGRESSPurge_in_progressKeyword_9_0 = (Keyword)cPURGE_IN_PROGRESSEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cPURGEDEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cPURGEDPurgedKeyword_10_0 = (Keyword)cPURGEDEnumLiteralDeclaration_10.eContents().get(0);
		
		//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ENUMERATIONS
		// enum OsBranchState:
		//	CREATED="created" // 
		// // 
		// // 
		// // 
		// // 
		// //
		// //
		// //
		// //
		// // 
		// | MODIFIED="modified" | COMMITTED="committed" |
		//	REBASELINED="rebaselined" | DELETED="deleted" | REBASELINE_IN_PROGRESS="rebaseline_in_progress" |
		//	COMMIT_IN_PROGRESS="commit_in_progress" | CREATION_IN_PROGRESS="creation_in_progress" |
		//	DELETE_IN_PROGRESS="delete_in_progress" | PURGE_IN_PROGRESS="purge_in_progress" | PURGED="purged";
		public EnumRule getRule() { return rule; }

		//CREATED="created" // 
		// // 
		// // 
		// // 
		// // 
		// //
		// //
		// //
		// //
		// // 
		// | MODIFIED="modified" | COMMITTED="committed" |
		//REBASELINED="rebaselined" | DELETED="deleted" | REBASELINE_IN_PROGRESS="rebaseline_in_progress" |
		//COMMIT_IN_PROGRESS="commit_in_progress" | CREATION_IN_PROGRESS="creation_in_progress" |
		//DELETE_IN_PROGRESS="delete_in_progress" | PURGE_IN_PROGRESS="purge_in_progress" | PURGED="purged"
		public Alternatives getAlternatives() { return cAlternatives; }

		//CREATED="created"
		public EnumLiteralDeclaration getCREATEDEnumLiteralDeclaration_0() { return cCREATEDEnumLiteralDeclaration_0; }

		//"created"
		public Keyword getCREATEDCreatedKeyword_0_0() { return cCREATEDCreatedKeyword_0_0; }

		//MODIFIED="modified"
		public EnumLiteralDeclaration getMODIFIEDEnumLiteralDeclaration_1() { return cMODIFIEDEnumLiteralDeclaration_1; }

		//"modified"
		public Keyword getMODIFIEDModifiedKeyword_1_0() { return cMODIFIEDModifiedKeyword_1_0; }

		//COMMITTED="committed"
		public EnumLiteralDeclaration getCOMMITTEDEnumLiteralDeclaration_2() { return cCOMMITTEDEnumLiteralDeclaration_2; }

		//"committed"
		public Keyword getCOMMITTEDCommittedKeyword_2_0() { return cCOMMITTEDCommittedKeyword_2_0; }

		//REBASELINED="rebaselined"
		public EnumLiteralDeclaration getREBASELINEDEnumLiteralDeclaration_3() { return cREBASELINEDEnumLiteralDeclaration_3; }

		//"rebaselined"
		public Keyword getREBASELINEDRebaselinedKeyword_3_0() { return cREBASELINEDRebaselinedKeyword_3_0; }

		//DELETED="deleted"
		public EnumLiteralDeclaration getDELETEDEnumLiteralDeclaration_4() { return cDELETEDEnumLiteralDeclaration_4; }

		//"deleted"
		public Keyword getDELETEDDeletedKeyword_4_0() { return cDELETEDDeletedKeyword_4_0; }

		//REBASELINE_IN_PROGRESS="rebaseline_in_progress"
		public EnumLiteralDeclaration getREBASELINE_IN_PROGRESSEnumLiteralDeclaration_5() { return cREBASELINE_IN_PROGRESSEnumLiteralDeclaration_5; }

		//"rebaseline_in_progress"
		public Keyword getREBASELINE_IN_PROGRESSRebaseline_in_progressKeyword_5_0() { return cREBASELINE_IN_PROGRESSRebaseline_in_progressKeyword_5_0; }

		//COMMIT_IN_PROGRESS="commit_in_progress"
		public EnumLiteralDeclaration getCOMMIT_IN_PROGRESSEnumLiteralDeclaration_6() { return cCOMMIT_IN_PROGRESSEnumLiteralDeclaration_6; }

		//"commit_in_progress"
		public Keyword getCOMMIT_IN_PROGRESSCommit_in_progressKeyword_6_0() { return cCOMMIT_IN_PROGRESSCommit_in_progressKeyword_6_0; }

		//CREATION_IN_PROGRESS="creation_in_progress"
		public EnumLiteralDeclaration getCREATION_IN_PROGRESSEnumLiteralDeclaration_7() { return cCREATION_IN_PROGRESSEnumLiteralDeclaration_7; }

		//"creation_in_progress"
		public Keyword getCREATION_IN_PROGRESSCreation_in_progressKeyword_7_0() { return cCREATION_IN_PROGRESSCreation_in_progressKeyword_7_0; }

		//DELETE_IN_PROGRESS="delete_in_progress"
		public EnumLiteralDeclaration getDELETE_IN_PROGRESSEnumLiteralDeclaration_8() { return cDELETE_IN_PROGRESSEnumLiteralDeclaration_8; }

		//"delete_in_progress"
		public Keyword getDELETE_IN_PROGRESSDelete_in_progressKeyword_8_0() { return cDELETE_IN_PROGRESSDelete_in_progressKeyword_8_0; }

		//PURGE_IN_PROGRESS="purge_in_progress"
		public EnumLiteralDeclaration getPURGE_IN_PROGRESSEnumLiteralDeclaration_9() { return cPURGE_IN_PROGRESSEnumLiteralDeclaration_9; }

		//"purge_in_progress"
		public Keyword getPURGE_IN_PROGRESSPurge_in_progressKeyword_9_0() { return cPURGE_IN_PROGRESSPurge_in_progressKeyword_9_0; }

		//PURGED="purged"
		public EnumLiteralDeclaration getPURGEDEnumLiteralDeclaration_10() { return cPURGEDEnumLiteralDeclaration_10; }

		//"purged"
		public Keyword getPURGEDPurgedKeyword_10_0() { return cPURGEDPurgedKeyword_10_0; }
	}

	public class OsBranchTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWORKINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWORKINGWorkingKeyword_0_0 = (Keyword)cWORKINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBASELINEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBASELINEBaselineKeyword_1_0 = (Keyword)cBASELINEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMERGEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMERGEMergeKeyword_2_0 = (Keyword)cMERGEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSYSTEM_ROOTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSYSTEM_ROOTSystemRootKeyword_3_0 = (Keyword)cSYSTEM_ROOTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPORTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPORTPortKeyword_4_0 = (Keyword)cPORTEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum OsBranchType:
		//	WORKING="working" //
		// //
		// //
		// //
		// | BASELINE="baseline" | MERGE="merge" | SYSTEM_ROOT="system-root" | PORT="port";
		public EnumRule getRule() { return rule; }

		//WORKING="working" //
		// //
		// //
		// //
		// | BASELINE="baseline" | MERGE="merge" | SYSTEM_ROOT="system-root" | PORT="port"
		public Alternatives getAlternatives() { return cAlternatives; }

		//WORKING="working"
		public EnumLiteralDeclaration getWORKINGEnumLiteralDeclaration_0() { return cWORKINGEnumLiteralDeclaration_0; }

		//"working"
		public Keyword getWORKINGWorkingKeyword_0_0() { return cWORKINGWorkingKeyword_0_0; }

		//BASELINE="baseline"
		public EnumLiteralDeclaration getBASELINEEnumLiteralDeclaration_1() { return cBASELINEEnumLiteralDeclaration_1; }

		//"baseline"
		public Keyword getBASELINEBaselineKeyword_1_0() { return cBASELINEBaselineKeyword_1_0; }

		//MERGE="merge"
		public EnumLiteralDeclaration getMERGEEnumLiteralDeclaration_2() { return cMERGEEnumLiteralDeclaration_2; }

		//"merge"
		public Keyword getMERGEMergeKeyword_2_0() { return cMERGEMergeKeyword_2_0; }

		//SYSTEM_ROOT="system-root"
		public EnumLiteralDeclaration getSYSTEM_ROOTEnumLiteralDeclaration_3() { return cSYSTEM_ROOTEnumLiteralDeclaration_3; }

		//"system-root"
		public Keyword getSYSTEM_ROOTSystemRootKeyword_3_0() { return cSYSTEM_ROOTSystemRootKeyword_3_0; }

		//PORT="port"
		public EnumLiteralDeclaration getPORTEnumLiteralDeclaration_4() { return cPORTEnumLiteralDeclaration_4; }

		//"port"
		public Keyword getPORTPortKeyword_4_0() { return cPORTPortKeyword_4_0; }
	}

	public class OsBranchArchiveFilterElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OsBranchArchiveFilter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cARCHIVED_EXCLUDEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cARCHIVED_EXCLUDEDExcludedKeyword_0_0 = (Keyword)cARCHIVED_EXCLUDEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cARCHIVED_INCLUDEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cARCHIVED_INCLUDEDIncludedKeyword_1_0 = (Keyword)cARCHIVED_INCLUDEDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OsBranchArchiveFilter:
		//	ARCHIVED_EXCLUDED="excluded" //
		// | ARCHIVED_INCLUDED="included";
		public EnumRule getRule() { return rule; }

		//ARCHIVED_EXCLUDED="excluded" //
		// | ARCHIVED_INCLUDED="included"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ARCHIVED_EXCLUDED="excluded"
		public EnumLiteralDeclaration getARCHIVED_EXCLUDEDEnumLiteralDeclaration_0() { return cARCHIVED_EXCLUDEDEnumLiteralDeclaration_0; }

		//"excluded"
		public Keyword getARCHIVED_EXCLUDEDExcludedKeyword_0_0() { return cARCHIVED_EXCLUDEDExcludedKeyword_0_0; }

		//ARCHIVED_INCLUDED="included"
		public EnumLiteralDeclaration getARCHIVED_INCLUDEDEnumLiteralDeclaration_1() { return cARCHIVED_INCLUDEDEnumLiteralDeclaration_1; }

		//"included"
		public Keyword getARCHIVED_INCLUDEDIncludedKeyword_1_0() { return cARCHIVED_INCLUDEDIncludedKeyword_1_0; }
	}

	public class OsTxTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OsTxType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBASELINEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBASELINEBaselineKeyword_0_0 = (Keyword)cBASELINEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNON_BASELINEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNON_BASELINENonBaselineKeyword_1_0 = (Keyword)cNON_BASELINEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OsTxType:
		//	BASELINE="baseline" //
		// | NON_BASELINE="non-baseline";
		public EnumRule getRule() { return rule; }

		//BASELINE="baseline" //
		// | NON_BASELINE="non-baseline"
		public Alternatives getAlternatives() { return cAlternatives; }

		//BASELINE="baseline"
		public EnumLiteralDeclaration getBASELINEEnumLiteralDeclaration_0() { return cBASELINEEnumLiteralDeclaration_0; }

		//"baseline"
		public Keyword getBASELINEBaselineKeyword_0_0() { return cBASELINEBaselineKeyword_0_0; }

		//NON_BASELINE="non-baseline"
		public EnumLiteralDeclaration getNON_BASELINEEnumLiteralDeclaration_1() { return cNON_BASELINEEnumLiteralDeclaration_1; }

		//"non-baseline"
		public Keyword getNON_BASELINENonBaselineKeyword_1_0() { return cNON_BASELINENonBaselineKeyword_1_0; }
	}

	public class OsRelationSideElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OsRelationSide");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSIDE_AEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSIDE_ASideAKeyword_0_0 = (Keyword)cSIDE_AEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSIDE_BEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSIDE_BSideBKeyword_1_0 = (Keyword)cSIDE_BEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OsRelationSide:
		//	SIDE_A="side-A" //
		// | SIDE_B="side-B";
		public EnumRule getRule() { return rule; }

		//SIDE_A="side-A" //
		// | SIDE_B="side-B"
		public Alternatives getAlternatives() { return cAlternatives; }

		//SIDE_A="side-A"
		public EnumLiteralDeclaration getSIDE_AEnumLiteralDeclaration_0() { return cSIDE_AEnumLiteralDeclaration_0; }

		//"side-A"
		public Keyword getSIDE_ASideAKeyword_0_0() { return cSIDE_ASideAKeyword_0_0; }

		//SIDE_B="side-B"
		public EnumLiteralDeclaration getSIDE_BEnumLiteralDeclaration_1() { return cSIDE_BEnumLiteralDeclaration_1; }

		//"side-B"
		public Keyword getSIDE_BSideBKeyword_1_0() { return cSIDE_BSideBKeyword_1_0; }
	}

	public class OsOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OsOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOT_EQUALExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_THANEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESS_THANLessThanSignKeyword_2_0 = (Keyword)cLESS_THANEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_THAN_EQEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLESS_THAN_EQLessThanSignEqualsSignKeyword_3_0 = (Keyword)cLESS_THAN_EQEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THANEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGREATER_THANGreaterThanSignKeyword_4_0 = (Keyword)cGREATER_THANEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THAN_EQEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGREATER_THAN_EQGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGREATER_THAN_EQEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum OsOperator:
		//	EQUAL="=" //
		// //
		// //
		// //
		// //
		// | NOT_EQUAL="!=" | LESS_THAN="<" | LESS_THAN_EQ="<=" | GREATER_THAN=">" |
		//	GREATER_THAN_EQ=">=";
		public EnumRule getRule() { return rule; }

		//EQUAL="=" //
		// //
		// //
		// //
		// //
		// | NOT_EQUAL="!=" | LESS_THAN="<" | LESS_THAN_EQ="<=" | GREATER_THAN=">" |
		//GREATER_THAN_EQ=">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQUAL="="
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }

		//"="
		public Keyword getEQUALEqualsSignKeyword_0_0() { return cEQUALEqualsSignKeyword_0_0; }

		//NOT_EQUAL="!="
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_1() { return cNOT_EQUALEnumLiteralDeclaration_1; }

		//"!="
		public Keyword getNOT_EQUALExclamationMarkEqualsSignKeyword_1_0() { return cNOT_EQUALExclamationMarkEqualsSignKeyword_1_0; }

		//LESS_THAN="<"
		public EnumLiteralDeclaration getLESS_THANEnumLiteralDeclaration_2() { return cLESS_THANEnumLiteralDeclaration_2; }

		//"<"
		public Keyword getLESS_THANLessThanSignKeyword_2_0() { return cLESS_THANLessThanSignKeyword_2_0; }

		//LESS_THAN_EQ="<="
		public EnumLiteralDeclaration getLESS_THAN_EQEnumLiteralDeclaration_3() { return cLESS_THAN_EQEnumLiteralDeclaration_3; }

		//"<="
		public Keyword getLESS_THAN_EQLessThanSignEqualsSignKeyword_3_0() { return cLESS_THAN_EQLessThanSignEqualsSignKeyword_3_0; }

		//GREATER_THAN=">"
		public EnumLiteralDeclaration getGREATER_THANEnumLiteralDeclaration_4() { return cGREATER_THANEnumLiteralDeclaration_4; }

		//">"
		public Keyword getGREATER_THANGreaterThanSignKeyword_4_0() { return cGREATER_THANGreaterThanSignKeyword_4_0; }

		//GREATER_THAN_EQ=">="
		public EnumLiteralDeclaration getGREATER_THAN_EQEnumLiteralDeclaration_5() { return cGREATER_THAN_EQEnumLiteralDeclaration_5; }

		//">="
		public Keyword getGREATER_THAN_EQGreaterThanSignEqualsSignKeyword_5_0() { return cGREATER_THAN_EQGreaterThanSignEqualsSignKeyword_5_0; }
	}

	public class OsNonEqualOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OsNonEqualOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNOT_EQUALExclamationMarkEqualsSignKeyword_0_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_THANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLESS_THANLessThanSignKeyword_1_0 = (Keyword)cLESS_THANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_THAN_EQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESS_THAN_EQLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLESS_THAN_EQEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THANEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATER_THANGreaterThanSignKeyword_3_0 = (Keyword)cGREATER_THANEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THAN_EQEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGREATER_THAN_EQGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGREATER_THAN_EQEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum OsNonEqualOperator:
		//	NOT_EQUAL="!=" //
		// //
		// //
		// //
		// | LESS_THAN="<" | LESS_THAN_EQ="<=" | GREATER_THAN=">" | GREATER_THAN_EQ=">=";
		public EnumRule getRule() { return rule; }

		//NOT_EQUAL="!=" //
		// //
		// //
		// //
		// | LESS_THAN="<" | LESS_THAN_EQ="<=" | GREATER_THAN=">" | GREATER_THAN_EQ=">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//NOT_EQUAL="!="
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_0() { return cNOT_EQUALEnumLiteralDeclaration_0; }

		//"!="
		public Keyword getNOT_EQUALExclamationMarkEqualsSignKeyword_0_0() { return cNOT_EQUALExclamationMarkEqualsSignKeyword_0_0; }

		//LESS_THAN="<"
		public EnumLiteralDeclaration getLESS_THANEnumLiteralDeclaration_1() { return cLESS_THANEnumLiteralDeclaration_1; }

		//"<"
		public Keyword getLESS_THANLessThanSignKeyword_1_0() { return cLESS_THANLessThanSignKeyword_1_0; }

		//LESS_THAN_EQ="<="
		public EnumLiteralDeclaration getLESS_THAN_EQEnumLiteralDeclaration_2() { return cLESS_THAN_EQEnumLiteralDeclaration_2; }

		//"<="
		public Keyword getLESS_THAN_EQLessThanSignEqualsSignKeyword_2_0() { return cLESS_THAN_EQLessThanSignEqualsSignKeyword_2_0; }

		//GREATER_THAN=">"
		public EnumLiteralDeclaration getGREATER_THANEnumLiteralDeclaration_3() { return cGREATER_THANEnumLiteralDeclaration_3; }

		//">"
		public Keyword getGREATER_THANGreaterThanSignKeyword_3_0() { return cGREATER_THANGreaterThanSignKeyword_3_0; }

		//GREATER_THAN_EQ=">="
		public EnumLiteralDeclaration getGREATER_THAN_EQEnumLiteralDeclaration_4() { return cGREATER_THAN_EQEnumLiteralDeclaration_4; }

		//">="
		public Keyword getGREATER_THAN_EQGreaterThanSignEqualsSignKeyword_4_0() { return cGREATER_THAN_EQGreaterThanSignEqualsSignKeyword_4_0; }
	}

	public class OsExistenceOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OsExistenceOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEXISTSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEXISTSExistsKeyword_0_0 = (Keyword)cEXISTSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EXISTSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOT_EXISTSNotExistsKeyword_1_0 = (Keyword)cNOT_EXISTSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OsExistenceOperator:
		//	EXISTS="exists" //
		// | NOT_EXISTS="not-exists";
		public EnumRule getRule() { return rule; }

		//EXISTS="exists" //
		// | NOT_EXISTS="not-exists"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EXISTS="exists"
		public EnumLiteralDeclaration getEXISTSEnumLiteralDeclaration_0() { return cEXISTSEnumLiteralDeclaration_0; }

		//"exists"
		public Keyword getEXISTSExistsKeyword_0_0() { return cEXISTSExistsKeyword_0_0; }

		//NOT_EXISTS="not-exists"
		public EnumLiteralDeclaration getNOT_EXISTSEnumLiteralDeclaration_1() { return cNOT_EXISTSEnumLiteralDeclaration_1; }

		//"not-exists"
		public Keyword getNOT_EXISTSNotExistsKeyword_1_0() { return cNOT_EXISTSNotExistsKeyword_1_0; }
	}

	public class OsQueryOptionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OsQueryOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCONTAINSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCONTAINSContainsKeyword_0_0 = (Keyword)cCONTAINSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCASE__MATCHEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCASE__MATCHMatchCaseKeyword_1_0 = (Keyword)cCASE__MATCHEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCASE__IGNOREEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCASE__IGNOREIgnoreCaseKeyword_2_0 = (Keyword)cCASE__IGNOREEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEXISTANCE__EXISTSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEXISTANCE__EXISTSNotExistsKeyword_3_0 = (Keyword)cEXISTANCE__EXISTSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEXISTANCE__NOT_EXISTSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEXISTANCE__NOT_EXISTSExistsKeyword_4_0 = (Keyword)cEXISTANCE__NOT_EXISTSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cTOKEN_COUNT__MATCHEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cTOKEN_COUNT__MATCHMatchTokenCountKeyword_5_0 = (Keyword)cTOKEN_COUNT__MATCHEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTOKEN_COUNT__IGNOREEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTOKEN_COUNT__IGNOREIgnoreTokenCountKeyword_6_0 = (Keyword)cTOKEN_COUNT__IGNOREEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cTOKEN_DELIMITER__EXACTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cTOKEN_DELIMITER__EXACTExactDelimKeyword_7_0 = (Keyword)cTOKEN_DELIMITER__EXACTEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cTOKEN_DELIMITER__WHITESPACEEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cTOKEN_DELIMITER__WHITESPACEWhitespaceDelimKeyword_8_0 = (Keyword)cTOKEN_DELIMITER__WHITESPACEEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cTOKEN_DELIMITER__ANYEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cTOKEN_DELIMITER__ANYAnyDelimKeyword_9_0 = (Keyword)cTOKEN_DELIMITER__ANYEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cTOKEN_MATCH_ORDER__ANYEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cTOKEN_MATCH_ORDER__ANYAnyOrderKeyword_10_0 = (Keyword)cTOKEN_MATCH_ORDER__ANYEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cTOKEN_MATCH_ORDER__MATCHEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cTOKEN_MATCH_ORDER__MATCHMatchOrderKeyword_11_0 = (Keyword)cTOKEN_MATCH_ORDER__MATCHEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum OsQueryOption:
		//	CONTAINS="contains" //
		// //
		// //
		// //
		// //
		// //
		// //
		// //
		// //
		// //
		// //
		// | CASE__MATCH="match-case" |
		//	CASE__IGNORE="ignore-case" | EXISTANCE__EXISTS="not-exists" | EXISTANCE__NOT_EXISTS="exists" |
		//	TOKEN_COUNT__MATCH="match-token-count" | TOKEN_COUNT__IGNORE="ignore-token-count" |
		//	TOKEN_DELIMITER__EXACT="exact-delim" | TOKEN_DELIMITER__WHITESPACE="whitespace-delim" |
		//	TOKEN_DELIMITER__ANY="any-delim" | TOKEN_MATCH_ORDER__ANY="any-order" | TOKEN_MATCH_ORDER__MATCH="match-order";
		public EnumRule getRule() { return rule; }

		//CONTAINS="contains" //
		// //
		// //
		// //
		// //
		// //
		// //
		// //
		// //
		// //
		// //
		// | CASE__MATCH="match-case" | CASE__IGNORE="ignore-case"
		//| EXISTANCE__EXISTS="not-exists" | EXISTANCE__NOT_EXISTS="exists" | TOKEN_COUNT__MATCH="match-token-count" |
		//TOKEN_COUNT__IGNORE="ignore-token-count" | TOKEN_DELIMITER__EXACT="exact-delim" |
		//TOKEN_DELIMITER__WHITESPACE="whitespace-delim" | TOKEN_DELIMITER__ANY="any-delim" | TOKEN_MATCH_ORDER__ANY="any-order"
		//| TOKEN_MATCH_ORDER__MATCH="match-order"
		public Alternatives getAlternatives() { return cAlternatives; }

		//CONTAINS="contains"
		public EnumLiteralDeclaration getCONTAINSEnumLiteralDeclaration_0() { return cCONTAINSEnumLiteralDeclaration_0; }

		//"contains"
		public Keyword getCONTAINSContainsKeyword_0_0() { return cCONTAINSContainsKeyword_0_0; }

		//CASE__MATCH="match-case"
		public EnumLiteralDeclaration getCASE__MATCHEnumLiteralDeclaration_1() { return cCASE__MATCHEnumLiteralDeclaration_1; }

		//"match-case"
		public Keyword getCASE__MATCHMatchCaseKeyword_1_0() { return cCASE__MATCHMatchCaseKeyword_1_0; }

		//CASE__IGNORE="ignore-case"
		public EnumLiteralDeclaration getCASE__IGNOREEnumLiteralDeclaration_2() { return cCASE__IGNOREEnumLiteralDeclaration_2; }

		//"ignore-case"
		public Keyword getCASE__IGNOREIgnoreCaseKeyword_2_0() { return cCASE__IGNOREIgnoreCaseKeyword_2_0; }

		//EXISTANCE__EXISTS="not-exists"
		public EnumLiteralDeclaration getEXISTANCE__EXISTSEnumLiteralDeclaration_3() { return cEXISTANCE__EXISTSEnumLiteralDeclaration_3; }

		//"not-exists"
		public Keyword getEXISTANCE__EXISTSNotExistsKeyword_3_0() { return cEXISTANCE__EXISTSNotExistsKeyword_3_0; }

		//EXISTANCE__NOT_EXISTS="exists"
		public EnumLiteralDeclaration getEXISTANCE__NOT_EXISTSEnumLiteralDeclaration_4() { return cEXISTANCE__NOT_EXISTSEnumLiteralDeclaration_4; }

		//"exists"
		public Keyword getEXISTANCE__NOT_EXISTSExistsKeyword_4_0() { return cEXISTANCE__NOT_EXISTSExistsKeyword_4_0; }

		//TOKEN_COUNT__MATCH="match-token-count"
		public EnumLiteralDeclaration getTOKEN_COUNT__MATCHEnumLiteralDeclaration_5() { return cTOKEN_COUNT__MATCHEnumLiteralDeclaration_5; }

		//"match-token-count"
		public Keyword getTOKEN_COUNT__MATCHMatchTokenCountKeyword_5_0() { return cTOKEN_COUNT__MATCHMatchTokenCountKeyword_5_0; }

		//TOKEN_COUNT__IGNORE="ignore-token-count"
		public EnumLiteralDeclaration getTOKEN_COUNT__IGNOREEnumLiteralDeclaration_6() { return cTOKEN_COUNT__IGNOREEnumLiteralDeclaration_6; }

		//"ignore-token-count"
		public Keyword getTOKEN_COUNT__IGNOREIgnoreTokenCountKeyword_6_0() { return cTOKEN_COUNT__IGNOREIgnoreTokenCountKeyword_6_0; }

		//TOKEN_DELIMITER__EXACT="exact-delim"
		public EnumLiteralDeclaration getTOKEN_DELIMITER__EXACTEnumLiteralDeclaration_7() { return cTOKEN_DELIMITER__EXACTEnumLiteralDeclaration_7; }

		//"exact-delim"
		public Keyword getTOKEN_DELIMITER__EXACTExactDelimKeyword_7_0() { return cTOKEN_DELIMITER__EXACTExactDelimKeyword_7_0; }

		//TOKEN_DELIMITER__WHITESPACE="whitespace-delim"
		public EnumLiteralDeclaration getTOKEN_DELIMITER__WHITESPACEEnumLiteralDeclaration_8() { return cTOKEN_DELIMITER__WHITESPACEEnumLiteralDeclaration_8; }

		//"whitespace-delim"
		public Keyword getTOKEN_DELIMITER__WHITESPACEWhitespaceDelimKeyword_8_0() { return cTOKEN_DELIMITER__WHITESPACEWhitespaceDelimKeyword_8_0; }

		//TOKEN_DELIMITER__ANY="any-delim"
		public EnumLiteralDeclaration getTOKEN_DELIMITER__ANYEnumLiteralDeclaration_9() { return cTOKEN_DELIMITER__ANYEnumLiteralDeclaration_9; }

		//"any-delim"
		public Keyword getTOKEN_DELIMITER__ANYAnyDelimKeyword_9_0() { return cTOKEN_DELIMITER__ANYAnyDelimKeyword_9_0; }

		//TOKEN_MATCH_ORDER__ANY="any-order"
		public EnumLiteralDeclaration getTOKEN_MATCH_ORDER__ANYEnumLiteralDeclaration_10() { return cTOKEN_MATCH_ORDER__ANYEnumLiteralDeclaration_10; }

		//"any-order"
		public Keyword getTOKEN_MATCH_ORDER__ANYAnyOrderKeyword_10_0() { return cTOKEN_MATCH_ORDER__ANYAnyOrderKeyword_10_0; }

		//TOKEN_MATCH_ORDER__MATCH="match-order"
		public EnumLiteralDeclaration getTOKEN_MATCH_ORDER__MATCHEnumLiteralDeclaration_11() { return cTOKEN_MATCH_ORDER__MATCHEnumLiteralDeclaration_11; }

		//"match-order"
		public Keyword getTOKEN_MATCH_ORDER__MATCHMatchOrderKeyword_11_0() { return cTOKEN_MATCH_ORDER__MATCHMatchOrderKeyword_11_0; }
	}
	
	private OrcsScriptElements pOrcsScript;
	private ScriptStatementElements pScriptStatement;
	private ScriptVersionElements pScriptVersion;
	private QualifiedNameElements pQualifiedName;
	private OsVariableDeclarationElements pOsVariableDeclaration;
	private OsVariableElements pOsVariable;
	private OsTemplateIdElements pOsTemplateId;
	private OsExpressionElements pOsExpression;
	private OsAssignmentElements pOsAssignment;
	private OsAssignmentValueElements pOsAssignmentValue;
	private OsLiteralElements pOsLiteral;
	private OsBooleanLiteralElements pOsBooleanLiteral;
	private OsNullLiteralElements pOsNullLiteral;
	private OsNumberLiteralElements pOsNumberLiteral;
	private OsStringLiteralElements pOsStringLiteral;
	private OsTemplateLiteralElements pOsTemplateLiteral;
	private OsCollectionLiteralElements pOsCollectionLiteral;
	private OsListLiteralElements pOsListLiteral;
	private OsVariableReferenceElements pOsVariableReference;
	private OsDotExpressionElements pOsDotExpression;
	private OsQueryExpressionElements pOsQueryExpression;
	private OsQueryStatementElements pOsQueryStatement;
	private OsQueryElements pOsQuery;
	private OsCritieriaElements pOsCritieria;
	private OsClauseElements pOsClause;
	private OsMetaTypeIdElements pOsMetaTypeId;
	private OsTxIdElements pOsTxId;
	private OsBranchIdElements pOsBranchId;
	private OsBranchIdOrNameElements pOsBranchIdOrName;
	private OsArtifactIdElements pOsArtifactId;
	private OsArtifactGuidElements pOsArtifactGuid;
	private OsTxTimestampElements pOsTxTimestamp;
	private OsBranchNameElements pOsBranchName;
	private OsBranchPatternElements pOsBranchPattern;
	private OsTxCommentElements pOsTxComment;
	private OsTxCommentPatternElements pOsTxCommentPattern;
	private OsAliasElements pOsAlias;
	private OsLimitElements pOsLimit;
	private OsAttributeValueElements pOsAttributeValue;
	private OsFieldIdElements pOsFieldId;
	private OsFieldMatchingKeywordsElements pOsFieldMatchingKeywords;
	private OsBranchStateElements unknownRuleOsBranchState;
	private OsBranchTypeElements unknownRuleOsBranchType;
	private OsBranchArchiveFilterElements unknownRuleOsBranchArchiveFilter;
	private OsTxTypeElements unknownRuleOsTxType;
	private OsRelationSideElements unknownRuleOsRelationSide;
	private OsOperatorElements unknownRuleOsOperator;
	private OsNonEqualOperatorElements unknownRuleOsNonEqualOperator;
	private OsExistenceOperatorElements unknownRuleOsExistenceOperator;
	private OsQueryOptionElements unknownRuleOsQueryOption;
	private OsCollectTypeIdElements pOsCollectTypeId;
	private OsCollectClauseElements pOsCollectClause;
	private OsLimitClauseElements pOsLimitClause;
	private OsCollectExpressionElements pOsCollectExpression;
	private OsCollectItemExpressionElements pOsCollectItemExpression;
	private OsCollectObjectExpressionElements pOsCollectObjectExpression;
	private OsCollectAllFieldsExpressionElements pOsCollectAllFieldsExpression;
	private OsCollectFieldExpressionElements pOsCollectFieldExpression;
	private OsFindClauseElements pOsFindClause;
	private OsObjectQueryElements pOsObjectQuery;
	private OsBranchQueryStatementElements pOsBranchQueryStatement;
	private OsBranchQueryElements pOsBranchQuery;
	private OsBranchQueryByIdElements pOsBranchQueryById;
	private OsBranchQueryAllElements pOsBranchQueryAll;
	private OsBranchQueryByPredicateElements pOsBranchQueryByPredicate;
	private OsBranchCriteriaElements pOsBranchCriteria;
	private OsBranchNameCriteriaElements pOsBranchNameCriteria;
	private OsBranchNameClauseElements pOsBranchNameClause;
	private OsBranchNameEqualsClauseElements pOsBranchNameEqualsClause;
	private OsBranchNamePatternClauseElements pOsBranchNamePatternClause;
	private OsBranchTypeCriteriaElements pOsBranchTypeCriteria;
	private OsBranchStateCriteriaElements pOsBranchStateCriteria;
	private OsBranchArchivedCriteriaElements pOsBranchArchivedCriteria;
	private OsBranchIdCriteriaElements pOsBranchIdCriteria;
	private OsBranchOfCriteriaElements pOsBranchOfCriteria;
	private OsBranchClauseElements pOsBranchClause;
	private OsBranchChildOfClauseElements pOsBranchChildOfClause;
	private OsBranchParentOfClauseElements pOsBranchParentOfClause;
	private OsTxQueryStatementElements pOsTxQueryStatement;
	private OsTxQueryElements pOsTxQuery;
	private OsTxQueryByIdElements pOsTxQueryById;
	private OsTxQueryAllElements pOsTxQueryAll;
	private OsTxQueryByPredicateElements pOsTxQueryByPredicate;
	private OsTxCriteriaElements pOsTxCriteria;
	private OsTxTypeCriteriaElements pOsTxTypeCriteria;
	private OsTxCommentCriteriaElements pOsTxCommentCriteria;
	private OsTxCommentClauseElements pOsTxCommentClause;
	private OsTxCommentEqualsClauseElements pOsTxCommentEqualsClause;
	private OsTxCommentPatternClauseElements pOsTxCommentPatternClause;
	private OsTxBranchIdCriteriaElements pOsTxBranchIdCriteria;
	private OsTxHeadOfBranchIdCriteriaElements pOsTxHeadOfBranchIdCriteria;
	private OsTxAuthorIdCriteriaElements pOsTxAuthorIdCriteria;
	private OsTxCommitIdCriteriaElements pOsTxCommitIdCriteria;
	private OsTxCommitIdClauseElements pOsTxCommitIdClause;
	private OsTxCommitIdEqualsClauseElements pOsTxCommitIdEqualsClause;
	private OsTxCommitIdIsNullClauseElements pOsTxCommitIdIsNullClause;
	private OsTxIdCriteriaElements pOsTxIdCriteria;
	private OsTxIdClauseElements pOsTxIdClause;
	private OsTxIdEqualsClauseElements pOsTxIdEqualsClause;
	private OsTxIdOpClauseElements pOsTxIdOpClause;
	private OsTxIdRangeClauseElements pOsTxIdRangeClause;
	private OsTxTimestampCriteriaElements pOsTxTimestampCriteria;
	private OsTxTimestampClauseElements pOsTxTimestampClause;
	private OsTxTimestampOpClauseElements pOsTxTimestampOpClause;
	private OsTxTimestampRangeClauseElements pOsTxTimestampRangeClause;
	private OsArtifactQueryStatementElements pOsArtifactQueryStatement;
	private OsArtifactQueryElements pOsArtifactQuery;
	private OsArtifactQueryAllElements pOsArtifactQueryAll;
	private OsArtifactQueryByPredicateElements pOsArtifactQueryByPredicate;
	private OsItemCriteriaElements pOsItemCriteria;
	private OsArtifactCriteriaElements pOsArtifactCriteria;
	private OsArtifactIdCriteriaElements pOsArtifactIdCriteria;
	private OsArtifactGuidCriteriaElements pOsArtifactGuidCriteria;
	private OsArtifactTypeCriteriaElements pOsArtifactTypeCriteria;
	private OsArtifactTypeClauseElements pOsArtifactTypeClause;
	private OsArtifactTypeEqualsClauseElements pOsArtifactTypeEqualsClause;
	private OsArtifactTypeInstanceOfClauseElements pOsArtifactTypeInstanceOfClause;
	private OsAttributeCriteriaElements pOsAttributeCriteria;
	private OsAttributeClauseElements pOsAttributeClause;
	private OsAttributeExistClauseElements pOsAttributeExistClause;
	private OseAttributeOpClauseElements pOseAttributeOpClause;
	private OsRelationCriteriaElements pOsRelationCriteria;
	private OsRelationClauseElements pOsRelationClause;
	private OsRelationExistClauseElements pOsRelationExistClause;
	private OsRelatedToClauseElements pOsRelatedToClause;
	private OsFollowClauseElements pOsFollowClause;
	private OsFollowStatementElements pOsFollowStatement;
	private OsFollowRelationTypeElements pOsFollowRelationType;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tSEMANTIC_VERSION;
	private TerminalRule tID;
	private TerminalRule tSTRING;
	private TerminalRule tSIGN;
	private NumberElements pNumber;
	private TerminalRule tHEX;
	private TerminalRule tINT;
	private TerminalRule tDECIMAL;
	private TerminalRule tFLOAT;
	
	private final Grammar grammar;

	@Inject
	public OrcsScriptDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.osee.orcs.script.dsl.OrcsScriptDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//OrcsScript:
	//	version=ScriptVersion? statements+=ScriptStatement*;
	public OrcsScriptElements getOrcsScriptAccess() {
		return (pOrcsScript != null) ? pOrcsScript : (pOrcsScript = new OrcsScriptElements());
	}
	
	public ParserRule getOrcsScriptRule() {
		return getOrcsScriptAccess().getRule();
	}

	//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS SCRIPT STATEMENTS
	// ScriptStatement:
	//	OsQueryStatement | OsVariableDeclaration;
	public ScriptStatementElements getScriptStatementAccess() {
		return (pScriptStatement != null) ? pScriptStatement : (pScriptStatement = new ScriptStatementElements());
	}
	
	public ParserRule getScriptStatementRule() {
		return getScriptStatementAccess().getRule();
	}

	//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS SCRIPT VERSION
	// ScriptVersion:
	//	name="script-version" version=SEMANTIC_VERSION ";";
	public ScriptVersionElements getScriptVersionAccess() {
		return (pScriptVersion != null) ? pScriptVersion : (pScriptVersion = new ScriptVersionElements());
	}
	
	public ParserRule getScriptVersionRule() {
		return getScriptVersionAccess().getRule();
	}

	//QualifiedName:
	//	ID "." ID;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS VARIABLES
	// OsVariableDeclaration
	//returns OsExpression:
	//	{OsVariableDeclaration} "var" elements+=OsVariable ("," elements+=OsVariable)* ";";
	public OsVariableDeclarationElements getOsVariableDeclarationAccess() {
		return (pOsVariableDeclaration != null) ? pOsVariableDeclaration : (pOsVariableDeclaration = new OsVariableDeclarationElements());
	}
	
	public ParserRule getOsVariableDeclarationRule() {
		return getOsVariableDeclarationAccess().getRule();
	}

	//OsVariable returns OsExpression:
	//	{OsVariable} name=ID ("=" right=OsExpression)?;
	public OsVariableElements getOsVariableAccess() {
		return (pOsVariable != null) ? pOsVariable : (pOsVariable = new OsVariableElements());
	}
	
	public ParserRule getOsVariableRule() {
		return getOsVariableAccess().getRule();
	}

	//OsTemplateId:
	//	ID ("." ID)*;
	public OsTemplateIdElements getOsTemplateIdAccess() {
		return (pOsTemplateId != null) ? pOsTemplateId : (pOsTemplateId = new OsTemplateIdElements());
	}
	
	public ParserRule getOsTemplateIdRule() {
		return getOsTemplateIdAccess().getRule();
	}

	//OsExpression:
	//	OsAssignment;
	public OsExpressionElements getOsExpressionAccess() {
		return (pOsExpression != null) ? pOsExpression : (pOsExpression = new OsExpressionElements());
	}
	
	public ParserRule getOsExpressionRule() {
		return getOsExpressionAccess().getRule();
	}

	//OsAssignment returns OsExpression:
	//	{OsAssignment} right=OsAssignmentValue;
	public OsAssignmentElements getOsAssignmentAccess() {
		return (pOsAssignment != null) ? pOsAssignment : (pOsAssignment = new OsAssignmentElements());
	}
	
	public ParserRule getOsAssignmentRule() {
		return getOsAssignmentAccess().getRule();
	}

	//OsAssignmentValue returns OsExpression:
	//	OsLiteral //
	// //
	// //
	// | OsCollectionLiteral | OsVariableReference | OsQueryExpression;
	public OsAssignmentValueElements getOsAssignmentValueAccess() {
		return (pOsAssignmentValue != null) ? pOsAssignmentValue : (pOsAssignmentValue = new OsAssignmentValueElements());
	}
	
	public ParserRule getOsAssignmentValueRule() {
		return getOsAssignmentValueAccess().getRule();
	}

	//OsLiteral returns OsExpression:
	//	OsBooleanLiteral //
	// //
	// //
	// //
	// | OsNumberLiteral | OsNullLiteral | OsStringLiteral | OsTemplateLiteral;
	public OsLiteralElements getOsLiteralAccess() {
		return (pOsLiteral != null) ? pOsLiteral : (pOsLiteral = new OsLiteralElements());
	}
	
	public ParserRule getOsLiteralRule() {
		return getOsLiteralAccess().getRule();
	}

	//OsBooleanLiteral returns OsExpression:
	//	{OsBooleanLiteral} ("false" | isTrue?="true");
	public OsBooleanLiteralElements getOsBooleanLiteralAccess() {
		return (pOsBooleanLiteral != null) ? pOsBooleanLiteral : (pOsBooleanLiteral = new OsBooleanLiteralElements());
	}
	
	public ParserRule getOsBooleanLiteralRule() {
		return getOsBooleanLiteralAccess().getRule();
	}

	//OsNullLiteral returns OsExpression:
	//	{OsNullLiteral} "null";
	public OsNullLiteralElements getOsNullLiteralAccess() {
		return (pOsNullLiteral != null) ? pOsNullLiteral : (pOsNullLiteral = new OsNullLiteralElements());
	}
	
	public ParserRule getOsNullLiteralRule() {
		return getOsNullLiteralAccess().getRule();
	}

	//OsNumberLiteral returns OsExpression:
	//	{OsNumberLiteral} value=Number;
	public OsNumberLiteralElements getOsNumberLiteralAccess() {
		return (pOsNumberLiteral != null) ? pOsNumberLiteral : (pOsNumberLiteral = new OsNumberLiteralElements());
	}
	
	public ParserRule getOsNumberLiteralRule() {
		return getOsNumberLiteralAccess().getRule();
	}

	//OsStringLiteral returns OsExpression:
	//	{OsStringLiteral} value=STRING;
	public OsStringLiteralElements getOsStringLiteralAccess() {
		return (pOsStringLiteral != null) ? pOsStringLiteral : (pOsStringLiteral = new OsStringLiteralElements());
	}
	
	public ParserRule getOsStringLiteralRule() {
		return getOsStringLiteralAccess().getRule();
	}

	//OsTemplateLiteral returns OsExpression:
	//	{OsTemplateLiteral} "{{" value=OsTemplateId "}}";
	public OsTemplateLiteralElements getOsTemplateLiteralAccess() {
		return (pOsTemplateLiteral != null) ? pOsTemplateLiteral : (pOsTemplateLiteral = new OsTemplateLiteralElements());
	}
	
	public ParserRule getOsTemplateLiteralRule() {
		return getOsTemplateLiteralAccess().getRule();
	}

	//OsCollectionLiteral:
	//	OsListLiteral;
	public OsCollectionLiteralElements getOsCollectionLiteralAccess() {
		return (pOsCollectionLiteral != null) ? pOsCollectionLiteral : (pOsCollectionLiteral = new OsCollectionLiteralElements());
	}
	
	public ParserRule getOsCollectionLiteralRule() {
		return getOsCollectionLiteralAccess().getRule();
	}

	//OsListLiteral:
	//	{OsListLiteral} "[" (elements+=OsExpression ("," elements+=OsExpression)*)? "]";
	public OsListLiteralElements getOsListLiteralAccess() {
		return (pOsListLiteral != null) ? pOsListLiteral : (pOsListLiteral = new OsListLiteralElements());
	}
	
	public ParserRule getOsListLiteralRule() {
		return getOsListLiteralAccess().getRule();
	}

	//OsVariableReference returns OsExpression:
	//	{OsVariableReference} ref=[OsVariable];
	public OsVariableReferenceElements getOsVariableReferenceAccess() {
		return (pOsVariableReference != null) ? pOsVariableReference : (pOsVariableReference = new OsVariableReferenceElements());
	}
	
	public ParserRule getOsVariableReferenceRule() {
		return getOsVariableReferenceAccess().getRule();
	}

	//OsDotExpression returns OsExpression:
	//	OsVariableReference ({OsDotExpression.ref=current} "." tail=[OsExpression])*;
	public OsDotExpressionElements getOsDotExpressionAccess() {
		return (pOsDotExpression != null) ? pOsDotExpression : (pOsDotExpression = new OsDotExpressionElements());
	}
	
	public ParserRule getOsDotExpressionRule() {
		return getOsDotExpressionAccess().getRule();
	}

	//OsQueryExpression returns OsExpression:
	//	{OsQueryExpression} name="start" "from" query=OsQuery clause+=OsClause*;
	public OsQueryExpressionElements getOsQueryExpressionAccess() {
		return (pOsQueryExpression != null) ? pOsQueryExpression : (pOsQueryExpression = new OsQueryExpressionElements());
	}
	
	public ParserRule getOsQueryExpressionRule() {
		return getOsQueryExpressionAccess().getRule();
	}

	//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS QUERY
	// OsQueryStatement:
	//	stmt=OsQueryExpression ";";
	public OsQueryStatementElements getOsQueryStatementAccess() {
		return (pOsQueryStatement != null) ? pOsQueryStatement : (pOsQueryStatement = new OsQueryStatementElements());
	}
	
	public ParserRule getOsQueryStatementRule() {
		return getOsQueryStatementAccess().getRule();
	}

	//OsQuery:
	//	OsBranchQueryStatement //
	// | OsTxQueryStatement;
	public OsQueryElements getOsQueryAccess() {
		return (pOsQuery != null) ? pOsQuery : (pOsQuery = new OsQueryElements());
	}
	
	public ParserRule getOsQueryRule() {
		return getOsQueryAccess().getRule();
	}

	//OsCritieria:
	//	OsBranchCriteria // 
	// // 
	// | OsTxCriteria | OsItemCriteria;
	public OsCritieriaElements getOsCritieriaAccess() {
		return (pOsCritieria != null) ? pOsCritieria : (pOsCritieria = new OsCritieriaElements());
	}
	
	public ParserRule getOsCritieriaRule() {
		return getOsCritieriaAccess().getRule();
	}

	//OsClause:
	//	OsFindClause //
	// | OsFollowClause;
	public OsClauseElements getOsClauseAccess() {
		return (pOsClause != null) ? pOsClause : (pOsClause = new OsClauseElements());
	}
	
	public ParserRule getOsClauseRule() {
		return getOsClauseAccess().getRule();
	}

	//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> DATA REFS/IDS
	// OsMetaTypeId returns
	//OsExpression:
	//	OsDotExpression //
	// //
	// //
	// | OsTemplateLiteral | OsNumberLiteral | OsStringLiteral;
	public OsMetaTypeIdElements getOsMetaTypeIdAccess() {
		return (pOsMetaTypeId != null) ? pOsMetaTypeId : (pOsMetaTypeId = new OsMetaTypeIdElements());
	}
	
	public ParserRule getOsMetaTypeIdRule() {
		return getOsMetaTypeIdAccess().getRule();
	}

	//OsTxId returns OsExpression:
	//	OsDotExpression //
	// //
	// | OsTemplateLiteral | OsNumberLiteral;
	public OsTxIdElements getOsTxIdAccess() {
		return (pOsTxId != null) ? pOsTxId : (pOsTxId = new OsTxIdElements());
	}
	
	public ParserRule getOsTxIdRule() {
		return getOsTxIdAccess().getRule();
	}

	//OsBranchId returns OsExpression:
	//	OsDotExpression //
	// //
	// | OsTemplateLiteral | OsNumberLiteral;
	public OsBranchIdElements getOsBranchIdAccess() {
		return (pOsBranchId != null) ? pOsBranchId : (pOsBranchId = new OsBranchIdElements());
	}
	
	public ParserRule getOsBranchIdRule() {
		return getOsBranchIdAccess().getRule();
	}

	//OsBranchIdOrName returns OsExpression:
	//	OsDotExpression //
	// //
	// //
	// | OsTemplateLiteral | OsNumberLiteral | OsStringLiteral;
	public OsBranchIdOrNameElements getOsBranchIdOrNameAccess() {
		return (pOsBranchIdOrName != null) ? pOsBranchIdOrName : (pOsBranchIdOrName = new OsBranchIdOrNameElements());
	}
	
	public ParserRule getOsBranchIdOrNameRule() {
		return getOsBranchIdOrNameAccess().getRule();
	}

	//OsArtifactId returns OsExpression:
	//	OsDotExpression //
	// //
	// | OsTemplateLiteral | OsNumberLiteral;
	public OsArtifactIdElements getOsArtifactIdAccess() {
		return (pOsArtifactId != null) ? pOsArtifactId : (pOsArtifactId = new OsArtifactIdElements());
	}
	
	public ParserRule getOsArtifactIdRule() {
		return getOsArtifactIdAccess().getRule();
	}

	//OsArtifactGuid returns OsExpression:
	//	OsDotExpression //
	// //
	// | OsTemplateLiteral | OsStringLiteral;
	public OsArtifactGuidElements getOsArtifactGuidAccess() {
		return (pOsArtifactGuid != null) ? pOsArtifactGuid : (pOsArtifactGuid = new OsArtifactGuidElements());
	}
	
	public ParserRule getOsArtifactGuidRule() {
		return getOsArtifactGuidAccess().getRule();
	}

	//OsTxTimestamp returns OsExpression:
	//	OsDotExpression //
	// //
	// | OsTemplateLiteral | OsStringLiteral;
	public OsTxTimestampElements getOsTxTimestampAccess() {
		return (pOsTxTimestamp != null) ? pOsTxTimestamp : (pOsTxTimestamp = new OsTxTimestampElements());
	}
	
	public ParserRule getOsTxTimestampRule() {
		return getOsTxTimestampAccess().getRule();
	}

	//OsBranchName returns OsExpression:
	//	OsDotExpression //
	// //
	// | OsTemplateLiteral | OsStringLiteral;
	public OsBranchNameElements getOsBranchNameAccess() {
		return (pOsBranchName != null) ? pOsBranchName : (pOsBranchName = new OsBranchNameElements());
	}
	
	public ParserRule getOsBranchNameRule() {
		return getOsBranchNameAccess().getRule();
	}

	//OsBranchPattern returns OsExpression:
	//	OsDotExpression //
	// //
	// | OsTemplateLiteral | OsStringLiteral;
	public OsBranchPatternElements getOsBranchPatternAccess() {
		return (pOsBranchPattern != null) ? pOsBranchPattern : (pOsBranchPattern = new OsBranchPatternElements());
	}
	
	public ParserRule getOsBranchPatternRule() {
		return getOsBranchPatternAccess().getRule();
	}

	//OsTxComment returns OsExpression:
	//	OsDotExpression //
	// //
	// | OsTemplateLiteral | OsStringLiteral;
	public OsTxCommentElements getOsTxCommentAccess() {
		return (pOsTxComment != null) ? pOsTxComment : (pOsTxComment = new OsTxCommentElements());
	}
	
	public ParserRule getOsTxCommentRule() {
		return getOsTxCommentAccess().getRule();
	}

	//OsTxCommentPattern returns OsExpression:
	//	OsDotExpression //
	// //
	// | OsTemplateLiteral | OsStringLiteral;
	public OsTxCommentPatternElements getOsTxCommentPatternAccess() {
		return (pOsTxCommentPattern != null) ? pOsTxCommentPattern : (pOsTxCommentPattern = new OsTxCommentPatternElements());
	}
	
	public ParserRule getOsTxCommentPatternRule() {
		return getOsTxCommentPatternAccess().getRule();
	}

	//OsAlias returns OsExpression:
	//	OsDotExpression //
	// //
	// | OsTemplateLiteral | OsStringLiteral;
	public OsAliasElements getOsAliasAccess() {
		return (pOsAlias != null) ? pOsAlias : (pOsAlias = new OsAliasElements());
	}
	
	public ParserRule getOsAliasRule() {
		return getOsAliasAccess().getRule();
	}

	//OsLimit returns OsExpression:
	//	OsDotExpression //
	// | OsTemplateLiteral | OsNumberLiteral;
	public OsLimitElements getOsLimitAccess() {
		return (pOsLimit != null) ? pOsLimit : (pOsLimit = new OsLimitElements());
	}
	
	public ParserRule getOsLimitRule() {
		return getOsLimitAccess().getRule();
	}

	//OsAttributeValue returns OsExpression:
	//	OsDotExpression //
	// //
	// | OsTemplateLiteral | OsStringLiteral;
	public OsAttributeValueElements getOsAttributeValueAccess() {
		return (pOsAttributeValue != null) ? pOsAttributeValue : (pOsAttributeValue = new OsAttributeValueElements());
	}
	
	public ParserRule getOsAttributeValueRule() {
		return getOsAttributeValueAccess().getRule();
	}

	//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> FIELDS 
	// OsFieldId returns
	//ecore::EString:
	//	ID | OsFieldMatchingKeywords;
	public OsFieldIdElements getOsFieldIdAccess() {
		return (pOsFieldId != null) ? pOsFieldId : (pOsFieldId = new OsFieldIdElements());
	}
	
	public ParserRule getOsFieldIdRule() {
		return getOsFieldIdAccess().getRule();
	}

	//// Add any fields that conflict with grammar keywords
	// OsFieldMatchingKeywords:
	//	"name" //
	// //
	// //
	// //
	// //
	// //
	// //
	// //
	// //
	// //
	// // 
	// //
	// //
	// | "branch-id" | "archived" | "state" | "tx-id" |
	//	"comment" | "date" | "author-id" | "commit-id" | "type" | "gamma-id" | "art-id" | "art-type" | "id";
	public OsFieldMatchingKeywordsElements getOsFieldMatchingKeywordsAccess() {
		return (pOsFieldMatchingKeywords != null) ? pOsFieldMatchingKeywords : (pOsFieldMatchingKeywords = new OsFieldMatchingKeywordsElements());
	}
	
	public ParserRule getOsFieldMatchingKeywordsRule() {
		return getOsFieldMatchingKeywordsAccess().getRule();
	}

	//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ENUMERATIONS
	// enum OsBranchState:
	//	CREATED="created" // 
	// // 
	// // 
	// // 
	// // 
	// //
	// //
	// //
	// //
	// // 
	// | MODIFIED="modified" | COMMITTED="committed" |
	//	REBASELINED="rebaselined" | DELETED="deleted" | REBASELINE_IN_PROGRESS="rebaseline_in_progress" |
	//	COMMIT_IN_PROGRESS="commit_in_progress" | CREATION_IN_PROGRESS="creation_in_progress" |
	//	DELETE_IN_PROGRESS="delete_in_progress" | PURGE_IN_PROGRESS="purge_in_progress" | PURGED="purged";
	public OsBranchStateElements getOsBranchStateAccess() {
		return (unknownRuleOsBranchState != null) ? unknownRuleOsBranchState : (unknownRuleOsBranchState = new OsBranchStateElements());
	}
	
	public EnumRule getOsBranchStateRule() {
		return getOsBranchStateAccess().getRule();
	}

	//enum OsBranchType:
	//	WORKING="working" //
	// //
	// //
	// //
	// | BASELINE="baseline" | MERGE="merge" | SYSTEM_ROOT="system-root" | PORT="port";
	public OsBranchTypeElements getOsBranchTypeAccess() {
		return (unknownRuleOsBranchType != null) ? unknownRuleOsBranchType : (unknownRuleOsBranchType = new OsBranchTypeElements());
	}
	
	public EnumRule getOsBranchTypeRule() {
		return getOsBranchTypeAccess().getRule();
	}

	//enum OsBranchArchiveFilter:
	//	ARCHIVED_EXCLUDED="excluded" //
	// | ARCHIVED_INCLUDED="included";
	public OsBranchArchiveFilterElements getOsBranchArchiveFilterAccess() {
		return (unknownRuleOsBranchArchiveFilter != null) ? unknownRuleOsBranchArchiveFilter : (unknownRuleOsBranchArchiveFilter = new OsBranchArchiveFilterElements());
	}
	
	public EnumRule getOsBranchArchiveFilterRule() {
		return getOsBranchArchiveFilterAccess().getRule();
	}

	//enum OsTxType:
	//	BASELINE="baseline" //
	// | NON_BASELINE="non-baseline";
	public OsTxTypeElements getOsTxTypeAccess() {
		return (unknownRuleOsTxType != null) ? unknownRuleOsTxType : (unknownRuleOsTxType = new OsTxTypeElements());
	}
	
	public EnumRule getOsTxTypeRule() {
		return getOsTxTypeAccess().getRule();
	}

	//enum OsRelationSide:
	//	SIDE_A="side-A" //
	// | SIDE_B="side-B";
	public OsRelationSideElements getOsRelationSideAccess() {
		return (unknownRuleOsRelationSide != null) ? unknownRuleOsRelationSide : (unknownRuleOsRelationSide = new OsRelationSideElements());
	}
	
	public EnumRule getOsRelationSideRule() {
		return getOsRelationSideAccess().getRule();
	}

	//enum OsOperator:
	//	EQUAL="=" //
	// //
	// //
	// //
	// //
	// | NOT_EQUAL="!=" | LESS_THAN="<" | LESS_THAN_EQ="<=" | GREATER_THAN=">" |
	//	GREATER_THAN_EQ=">=";
	public OsOperatorElements getOsOperatorAccess() {
		return (unknownRuleOsOperator != null) ? unknownRuleOsOperator : (unknownRuleOsOperator = new OsOperatorElements());
	}
	
	public EnumRule getOsOperatorRule() {
		return getOsOperatorAccess().getRule();
	}

	//enum OsNonEqualOperator:
	//	NOT_EQUAL="!=" //
	// //
	// //
	// //
	// | LESS_THAN="<" | LESS_THAN_EQ="<=" | GREATER_THAN=">" | GREATER_THAN_EQ=">=";
	public OsNonEqualOperatorElements getOsNonEqualOperatorAccess() {
		return (unknownRuleOsNonEqualOperator != null) ? unknownRuleOsNonEqualOperator : (unknownRuleOsNonEqualOperator = new OsNonEqualOperatorElements());
	}
	
	public EnumRule getOsNonEqualOperatorRule() {
		return getOsNonEqualOperatorAccess().getRule();
	}

	//enum OsExistenceOperator:
	//	EXISTS="exists" //
	// | NOT_EXISTS="not-exists";
	public OsExistenceOperatorElements getOsExistenceOperatorAccess() {
		return (unknownRuleOsExistenceOperator != null) ? unknownRuleOsExistenceOperator : (unknownRuleOsExistenceOperator = new OsExistenceOperatorElements());
	}
	
	public EnumRule getOsExistenceOperatorRule() {
		return getOsExistenceOperatorAccess().getRule();
	}

	//enum OsQueryOption:
	//	CONTAINS="contains" //
	// //
	// //
	// //
	// //
	// //
	// //
	// //
	// //
	// //
	// //
	// | CASE__MATCH="match-case" |
	//	CASE__IGNORE="ignore-case" | EXISTANCE__EXISTS="not-exists" | EXISTANCE__NOT_EXISTS="exists" |
	//	TOKEN_COUNT__MATCH="match-token-count" | TOKEN_COUNT__IGNORE="ignore-token-count" |
	//	TOKEN_DELIMITER__EXACT="exact-delim" | TOKEN_DELIMITER__WHITESPACE="whitespace-delim" |
	//	TOKEN_DELIMITER__ANY="any-delim" | TOKEN_MATCH_ORDER__ANY="any-order" | TOKEN_MATCH_ORDER__MATCH="match-order";
	public OsQueryOptionElements getOsQueryOptionAccess() {
		return (unknownRuleOsQueryOption != null) ? unknownRuleOsQueryOption : (unknownRuleOsQueryOption = new OsQueryOptionElements());
	}
	
	public EnumRule getOsQueryOptionRule() {
		return getOsQueryOptionAccess().getRule();
	}

	//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS COLLECT
	// OsCollectTypeId:
	//	ID | "branches" | "txs" | "artifacts" | "attributes" | "relations";
	public OsCollectTypeIdElements getOsCollectTypeIdAccess() {
		return (pOsCollectTypeId != null) ? pOsCollectTypeId : (pOsCollectTypeId = new OsCollectTypeIdElements());
	}
	
	public ParserRule getOsCollectTypeIdRule() {
		return getOsCollectTypeIdAccess().getRule();
	}

	//OsCollectClause:
	//	name="collect" expression=OsCollectObjectExpression limit=OsLimitClause?;
	public OsCollectClauseElements getOsCollectClauseAccess() {
		return (pOsCollectClause != null) ? pOsCollectClause : (pOsCollectClause = new OsCollectClauseElements());
	}
	
	public ParserRule getOsCollectClauseRule() {
		return getOsCollectClauseAccess().getRule();
	}

	//OsLimitClause:
	//	name="limit" limit=OsLimit;
	public OsLimitClauseElements getOsLimitClauseAccess() {
		return (pOsLimitClause != null) ? pOsLimitClause : (pOsLimitClause = new OsLimitClauseElements());
	}
	
	public ParserRule getOsLimitClauseRule() {
		return getOsLimitClauseAccess().getRule();
	}

	//OsCollectExpression:
	//	OsCollectAllFieldsExpression //
	// | OsCollectItemExpression;
	public OsCollectExpressionElements getOsCollectExpressionAccess() {
		return (pOsCollectExpression != null) ? pOsCollectExpression : (pOsCollectExpression = new OsCollectExpressionElements());
	}
	
	public ParserRule getOsCollectExpressionRule() {
		return getOsCollectExpressionAccess().getRule();
	}

	//OsCollectItemExpression returns OsCollectExpression:
	//	OsCollectObjectExpression | OsCollectFieldExpression;
	public OsCollectItemExpressionElements getOsCollectItemExpressionAccess() {
		return (pOsCollectItemExpression != null) ? pOsCollectItemExpression : (pOsCollectItemExpression = new OsCollectItemExpressionElements());
	}
	
	public ParserRule getOsCollectItemExpressionRule() {
		return getOsCollectItemExpressionAccess().getRule();
	}

	//OsCollectObjectExpression returns OsCollectExpression:
	//	{OsCollectObjectExpression} name=OsCollectTypeId ("as" alias=OsAlias)? //
	// "{"
	//	(expressions+=OsCollectAllFieldsExpression //
	// | expressions+=OsCollectItemExpression (","
	//	expressions+=OsCollectItemExpression)*) "}";
	public OsCollectObjectExpressionElements getOsCollectObjectExpressionAccess() {
		return (pOsCollectObjectExpression != null) ? pOsCollectObjectExpression : (pOsCollectObjectExpression = new OsCollectObjectExpressionElements());
	}
	
	public ParserRule getOsCollectObjectExpressionRule() {
		return getOsCollectObjectExpressionAccess().getRule();
	}

	//OsCollectAllFieldsExpression returns OsCollectExpression:
	//	{OsCollectAllFieldsExpression} name="*";
	public OsCollectAllFieldsExpressionElements getOsCollectAllFieldsExpressionAccess() {
		return (pOsCollectAllFieldsExpression != null) ? pOsCollectAllFieldsExpression : (pOsCollectAllFieldsExpression = new OsCollectAllFieldsExpressionElements());
	}
	
	public ParserRule getOsCollectAllFieldsExpressionRule() {
		return getOsCollectAllFieldsExpressionAccess().getRule();
	}

	//OsCollectFieldExpression returns OsCollectExpression:
	//	{OsCollectFieldExpression} name=OsFieldId ("as" alias=OsAlias)?;
	public OsCollectFieldExpressionElements getOsCollectFieldExpressionAccess() {
		return (pOsCollectFieldExpression != null) ? pOsCollectFieldExpression : (pOsCollectFieldExpression = new OsCollectFieldExpressionElements());
	}
	
	public ParserRule getOsCollectFieldExpressionRule() {
		return getOsCollectFieldExpressionAccess().getRule();
	}

	//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS FIND
	// OsFindClause:
	//	name="find" query=OsObjectQuery;
	public OsFindClauseElements getOsFindClauseAccess() {
		return (pOsFindClause != null) ? pOsFindClause : (pOsFindClause = new OsFindClauseElements());
	}
	
	public ParserRule getOsFindClauseRule() {
		return getOsFindClauseAccess().getRule();
	}

	//OsObjectQuery:
	//	OsArtifactQueryStatement;
	public OsObjectQueryElements getOsObjectQueryAccess() {
		return (pOsObjectQuery != null) ? pOsObjectQuery : (pOsObjectQuery = new OsObjectQueryElements());
	}
	
	public ParserRule getOsObjectQueryRule() {
		return getOsObjectQueryAccess().getRule();
	}

	//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS BRANCH QUERY
	//
	//OsBranchQueryStatement:
	//	name="branch" data=OsBranchQuery collect=OsCollectClause?;
	public OsBranchQueryStatementElements getOsBranchQueryStatementAccess() {
		return (pOsBranchQueryStatement != null) ? pOsBranchQueryStatement : (pOsBranchQueryStatement = new OsBranchQueryStatementElements());
	}
	
	public ParserRule getOsBranchQueryStatementRule() {
		return getOsBranchQueryStatementAccess().getRule();
	}

	//OsBranchQuery:
	//	OsBranchQueryById //
	// //
	// | OsBranchQueryAll | OsBranchQueryByPredicate;
	public OsBranchQueryElements getOsBranchQueryAccess() {
		return (pOsBranchQuery != null) ? pOsBranchQuery : (pOsBranchQuery = new OsBranchQueryElements());
	}
	
	public ParserRule getOsBranchQueryRule() {
		return getOsBranchQueryAccess().getRule();
	}

	//OsBranchQueryById:
	//	name=OsBranchIdOrName;
	public OsBranchQueryByIdElements getOsBranchQueryByIdAccess() {
		return (pOsBranchQueryById != null) ? pOsBranchQueryById : (pOsBranchQueryById = new OsBranchQueryByIdElements());
	}
	
	public ParserRule getOsBranchQueryByIdRule() {
		return getOsBranchQueryByIdAccess().getRule();
	}

	//OsBranchQueryAll:
	//	name="*";
	public OsBranchQueryAllElements getOsBranchQueryAllAccess() {
		return (pOsBranchQueryAll != null) ? pOsBranchQueryAll : (pOsBranchQueryAll = new OsBranchQueryAllElements());
	}
	
	public ParserRule getOsBranchQueryAllRule() {
		return getOsBranchQueryAllAccess().getRule();
	}

	//OsBranchQueryByPredicate:
	//	name="where" criteria+=OsBranchCriteria ("and" criteria+=OsBranchCriteria)*;
	public OsBranchQueryByPredicateElements getOsBranchQueryByPredicateAccess() {
		return (pOsBranchQueryByPredicate != null) ? pOsBranchQueryByPredicate : (pOsBranchQueryByPredicate = new OsBranchQueryByPredicateElements());
	}
	
	public ParserRule getOsBranchQueryByPredicateRule() {
		return getOsBranchQueryByPredicateAccess().getRule();
	}

	//OsBranchCriteria:
	//	OsBranchNameCriteria //
	// //
	// //
	// //
	// //
	// | OsBranchTypeCriteria | OsBranchStateCriteria | OsBranchArchivedCriteria |
	//	OsBranchIdCriteria | OsBranchOfCriteria;
	public OsBranchCriteriaElements getOsBranchCriteriaAccess() {
		return (pOsBranchCriteria != null) ? pOsBranchCriteria : (pOsBranchCriteria = new OsBranchCriteriaElements());
	}
	
	public ParserRule getOsBranchCriteriaRule() {
		return getOsBranchCriteriaAccess().getRule();
	}

	//OsBranchNameCriteria:
	//	name="name" clause=OsBranchNameClause;
	public OsBranchNameCriteriaElements getOsBranchNameCriteriaAccess() {
		return (pOsBranchNameCriteria != null) ? pOsBranchNameCriteria : (pOsBranchNameCriteria = new OsBranchNameCriteriaElements());
	}
	
	public ParserRule getOsBranchNameCriteriaRule() {
		return getOsBranchNameCriteriaAccess().getRule();
	}

	//OsBranchNameClause:
	//	OsBranchNameEqualsClause //
	// | OsBranchNamePatternClause;
	public OsBranchNameClauseElements getOsBranchNameClauseAccess() {
		return (pOsBranchNameClause != null) ? pOsBranchNameClause : (pOsBranchNameClause = new OsBranchNameClauseElements());
	}
	
	public ParserRule getOsBranchNameClauseRule() {
		return getOsBranchNameClauseAccess().getRule();
	}

	//OsBranchNameEqualsClause:
	//	name="=" value=OsBranchName;
	public OsBranchNameEqualsClauseElements getOsBranchNameEqualsClauseAccess() {
		return (pOsBranchNameEqualsClause != null) ? pOsBranchNameEqualsClause : (pOsBranchNameEqualsClause = new OsBranchNameEqualsClauseElements());
	}
	
	public ParserRule getOsBranchNameEqualsClauseRule() {
		return getOsBranchNameEqualsClauseAccess().getRule();
	}

	//OsBranchNamePatternClause:
	//	name="matches" value=OsBranchPattern;
	public OsBranchNamePatternClauseElements getOsBranchNamePatternClauseAccess() {
		return (pOsBranchNamePatternClause != null) ? pOsBranchNamePatternClause : (pOsBranchNamePatternClause = new OsBranchNamePatternClauseElements());
	}
	
	public ParserRule getOsBranchNamePatternClauseRule() {
		return getOsBranchNamePatternClauseAccess().getRule();
	}

	//OsBranchTypeCriteria:
	//	name="type" "=" (types+=OsBranchType | "[" types+=OsBranchType ("," types+=OsBranchType)* "]");
	public OsBranchTypeCriteriaElements getOsBranchTypeCriteriaAccess() {
		return (pOsBranchTypeCriteria != null) ? pOsBranchTypeCriteria : (pOsBranchTypeCriteria = new OsBranchTypeCriteriaElements());
	}
	
	public ParserRule getOsBranchTypeCriteriaRule() {
		return getOsBranchTypeCriteriaAccess().getRule();
	}

	//OsBranchStateCriteria:
	//	name="state" "=" (states+=OsBranchState | "[" states+=OsBranchState ("," states+=OsBranchState)* "]");
	public OsBranchStateCriteriaElements getOsBranchStateCriteriaAccess() {
		return (pOsBranchStateCriteria != null) ? pOsBranchStateCriteria : (pOsBranchStateCriteria = new OsBranchStateCriteriaElements());
	}
	
	public ParserRule getOsBranchStateCriteriaRule() {
		return getOsBranchStateCriteriaAccess().getRule();
	}

	//OsBranchArchivedCriteria:
	//	name="archived" "is" filter=OsBranchArchiveFilter;
	public OsBranchArchivedCriteriaElements getOsBranchArchivedCriteriaAccess() {
		return (pOsBranchArchivedCriteria != null) ? pOsBranchArchivedCriteria : (pOsBranchArchivedCriteria = new OsBranchArchivedCriteriaElements());
	}
	
	public ParserRule getOsBranchArchivedCriteriaRule() {
		return getOsBranchArchivedCriteriaAccess().getRule();
	}

	//OsBranchIdCriteria:
	//	name="branch-id" "=" (ids+=OsBranchId | "[" ids+=OsBranchId ("," ids+=OsBranchId)* "]");
	public OsBranchIdCriteriaElements getOsBranchIdCriteriaAccess() {
		return (pOsBranchIdCriteria != null) ? pOsBranchIdCriteria : (pOsBranchIdCriteria = new OsBranchIdCriteriaElements());
	}
	
	public ParserRule getOsBranchIdCriteriaRule() {
		return getOsBranchIdCriteriaAccess().getRule();
	}

	//OsBranchOfCriteria:
	//	name="branch" "is" clause=OsBranchClause;
	public OsBranchOfCriteriaElements getOsBranchOfCriteriaAccess() {
		return (pOsBranchOfCriteria != null) ? pOsBranchOfCriteria : (pOsBranchOfCriteria = new OsBranchOfCriteriaElements());
	}
	
	public ParserRule getOsBranchOfCriteriaRule() {
		return getOsBranchOfCriteriaAccess().getRule();
	}

	//OsBranchClause:
	//	OsBranchChildOfClause //
	// | OsBranchParentOfClause;
	public OsBranchClauseElements getOsBranchClauseAccess() {
		return (pOsBranchClause != null) ? pOsBranchClause : (pOsBranchClause = new OsBranchClauseElements());
	}
	
	public ParserRule getOsBranchClauseRule() {
		return getOsBranchClauseAccess().getRule();
	}

	//OsBranchChildOfClause:
	//	name="child-of" id=OsBranchId;
	public OsBranchChildOfClauseElements getOsBranchChildOfClauseAccess() {
		return (pOsBranchChildOfClause != null) ? pOsBranchChildOfClause : (pOsBranchChildOfClause = new OsBranchChildOfClauseElements());
	}
	
	public ParserRule getOsBranchChildOfClauseRule() {
		return getOsBranchChildOfClauseAccess().getRule();
	}

	//OsBranchParentOfClause:
	//	name="parent-of" id=OsBranchId;
	public OsBranchParentOfClauseElements getOsBranchParentOfClauseAccess() {
		return (pOsBranchParentOfClause != null) ? pOsBranchParentOfClause : (pOsBranchParentOfClause = new OsBranchParentOfClauseElements());
	}
	
	public ParserRule getOsBranchParentOfClauseRule() {
		return getOsBranchParentOfClauseAccess().getRule();
	}

	//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS TXS QUERY
	// OsTxQueryStatement:
	//	name="tx" data=OsTxQuery collect=OsCollectClause?;
	public OsTxQueryStatementElements getOsTxQueryStatementAccess() {
		return (pOsTxQueryStatement != null) ? pOsTxQueryStatement : (pOsTxQueryStatement = new OsTxQueryStatementElements());
	}
	
	public ParserRule getOsTxQueryStatementRule() {
		return getOsTxQueryStatementAccess().getRule();
	}

	//OsTxQuery:
	//	OsTxQueryById //
	// //
	// | OsTxQueryAll | OsTxQueryByPredicate;
	public OsTxQueryElements getOsTxQueryAccess() {
		return (pOsTxQuery != null) ? pOsTxQuery : (pOsTxQuery = new OsTxQueryElements());
	}
	
	public ParserRule getOsTxQueryRule() {
		return getOsTxQueryAccess().getRule();
	}

	//OsTxQueryById:
	//	name=OsTxId;
	public OsTxQueryByIdElements getOsTxQueryByIdAccess() {
		return (pOsTxQueryById != null) ? pOsTxQueryById : (pOsTxQueryById = new OsTxQueryByIdElements());
	}
	
	public ParserRule getOsTxQueryByIdRule() {
		return getOsTxQueryByIdAccess().getRule();
	}

	//OsTxQueryAll:
	//	name="*";
	public OsTxQueryAllElements getOsTxQueryAllAccess() {
		return (pOsTxQueryAll != null) ? pOsTxQueryAll : (pOsTxQueryAll = new OsTxQueryAllElements());
	}
	
	public ParserRule getOsTxQueryAllRule() {
		return getOsTxQueryAllAccess().getRule();
	}

	//OsTxQueryByPredicate:
	//	name="where" criteria+=OsTxCriteria ("and" criteria+=OsTxCriteria)*;
	public OsTxQueryByPredicateElements getOsTxQueryByPredicateAccess() {
		return (pOsTxQueryByPredicate != null) ? pOsTxQueryByPredicate : (pOsTxQueryByPredicate = new OsTxQueryByPredicateElements());
	}
	
	public ParserRule getOsTxQueryByPredicateRule() {
		return getOsTxQueryByPredicateAccess().getRule();
	}

	//OsTxCriteria:
	//	OsTxIdCriteria //
	// //
	// //
	// //
	// //
	// //
	// //
	// | OsTxTypeCriteria | OsTxCommentCriteria | OsTxBranchIdCriteria |
	//	OsTxHeadOfBranchIdCriteria | OsTxAuthorIdCriteria | OsTxCommitIdCriteria | OsTxTimestampCriteria;
	public OsTxCriteriaElements getOsTxCriteriaAccess() {
		return (pOsTxCriteria != null) ? pOsTxCriteria : (pOsTxCriteria = new OsTxCriteriaElements());
	}
	
	public ParserRule getOsTxCriteriaRule() {
		return getOsTxCriteriaAccess().getRule();
	}

	//OsTxTypeCriteria:
	//	name="type" "=" (types+=OsTxType | "[" types+=OsTxType ("," types+=OsTxType)* "]");
	public OsTxTypeCriteriaElements getOsTxTypeCriteriaAccess() {
		return (pOsTxTypeCriteria != null) ? pOsTxTypeCriteria : (pOsTxTypeCriteria = new OsTxTypeCriteriaElements());
	}
	
	public ParserRule getOsTxTypeCriteriaRule() {
		return getOsTxTypeCriteriaAccess().getRule();
	}

	//OsTxCommentCriteria:
	//	name="comment" clause=OsTxCommentClause;
	public OsTxCommentCriteriaElements getOsTxCommentCriteriaAccess() {
		return (pOsTxCommentCriteria != null) ? pOsTxCommentCriteria : (pOsTxCommentCriteria = new OsTxCommentCriteriaElements());
	}
	
	public ParserRule getOsTxCommentCriteriaRule() {
		return getOsTxCommentCriteriaAccess().getRule();
	}

	//OsTxCommentClause:
	//	OsTxCommentEqualsClause //
	// | OsTxCommentPatternClause;
	public OsTxCommentClauseElements getOsTxCommentClauseAccess() {
		return (pOsTxCommentClause != null) ? pOsTxCommentClause : (pOsTxCommentClause = new OsTxCommentClauseElements());
	}
	
	public ParserRule getOsTxCommentClauseRule() {
		return getOsTxCommentClauseAccess().getRule();
	}

	//OsTxCommentEqualsClause:
	//	name="=" value=OsTxComment;
	public OsTxCommentEqualsClauseElements getOsTxCommentEqualsClauseAccess() {
		return (pOsTxCommentEqualsClause != null) ? pOsTxCommentEqualsClause : (pOsTxCommentEqualsClause = new OsTxCommentEqualsClauseElements());
	}
	
	public ParserRule getOsTxCommentEqualsClauseRule() {
		return getOsTxCommentEqualsClauseAccess().getRule();
	}

	//OsTxCommentPatternClause:
	//	name="matches" value=OsTxCommentPattern;
	public OsTxCommentPatternClauseElements getOsTxCommentPatternClauseAccess() {
		return (pOsTxCommentPatternClause != null) ? pOsTxCommentPatternClause : (pOsTxCommentPatternClause = new OsTxCommentPatternClauseElements());
	}
	
	public ParserRule getOsTxCommentPatternClauseRule() {
		return getOsTxCommentPatternClauseAccess().getRule();
	}

	//OsTxBranchIdCriteria:
	//	name="branch-id" "=" (ids+=OsBranchId | "[" ids+=OsBranchId ("," ids+=OsBranchId)* "]");
	public OsTxBranchIdCriteriaElements getOsTxBranchIdCriteriaAccess() {
		return (pOsTxBranchIdCriteria != null) ? pOsTxBranchIdCriteria : (pOsTxBranchIdCriteria = new OsTxBranchIdCriteriaElements());
	}
	
	public ParserRule getOsTxBranchIdCriteriaRule() {
		return getOsTxBranchIdCriteriaAccess().getRule();
	}

	//OsTxHeadOfBranchIdCriteria:
	//	name="is-head" "of" "branch-id" id=OsBranchId;
	public OsTxHeadOfBranchIdCriteriaElements getOsTxHeadOfBranchIdCriteriaAccess() {
		return (pOsTxHeadOfBranchIdCriteria != null) ? pOsTxHeadOfBranchIdCriteria : (pOsTxHeadOfBranchIdCriteria = new OsTxHeadOfBranchIdCriteriaElements());
	}
	
	public ParserRule getOsTxHeadOfBranchIdCriteriaRule() {
		return getOsTxHeadOfBranchIdCriteriaAccess().getRule();
	}

	//OsTxAuthorIdCriteria:
	//	name="author-id" "=" (ids+=OsArtifactId | "[" ids+=OsArtifactId ("," ids+=OsArtifactId)* "]");
	public OsTxAuthorIdCriteriaElements getOsTxAuthorIdCriteriaAccess() {
		return (pOsTxAuthorIdCriteria != null) ? pOsTxAuthorIdCriteria : (pOsTxAuthorIdCriteria = new OsTxAuthorIdCriteriaElements());
	}
	
	public ParserRule getOsTxAuthorIdCriteriaRule() {
		return getOsTxAuthorIdCriteriaAccess().getRule();
	}

	//OsTxCommitIdCriteria:
	//	name="commit-id" clause=OsTxCommitIdClause;
	public OsTxCommitIdCriteriaElements getOsTxCommitIdCriteriaAccess() {
		return (pOsTxCommitIdCriteria != null) ? pOsTxCommitIdCriteria : (pOsTxCommitIdCriteria = new OsTxCommitIdCriteriaElements());
	}
	
	public ParserRule getOsTxCommitIdCriteriaRule() {
		return getOsTxCommitIdCriteriaAccess().getRule();
	}

	//OsTxCommitIdClause:
	//	OsTxCommitIdEqualsClause //
	// | OsTxCommitIdIsNullClause;
	public OsTxCommitIdClauseElements getOsTxCommitIdClauseAccess() {
		return (pOsTxCommitIdClause != null) ? pOsTxCommitIdClause : (pOsTxCommitIdClause = new OsTxCommitIdClauseElements());
	}
	
	public ParserRule getOsTxCommitIdClauseRule() {
		return getOsTxCommitIdClauseAccess().getRule();
	}

	//OsTxCommitIdEqualsClause:
	//	name="=" (ids+=OsArtifactId | "[" ids+=OsArtifactId ("," ids+=OsArtifactId)* "]");
	public OsTxCommitIdEqualsClauseElements getOsTxCommitIdEqualsClauseAccess() {
		return (pOsTxCommitIdEqualsClause != null) ? pOsTxCommitIdEqualsClause : (pOsTxCommitIdEqualsClause = new OsTxCommitIdEqualsClauseElements());
	}
	
	public ParserRule getOsTxCommitIdEqualsClauseRule() {
		return getOsTxCommitIdEqualsClauseAccess().getRule();
	}

	//OsTxCommitIdIsNullClause:
	//	name="is" "null";
	public OsTxCommitIdIsNullClauseElements getOsTxCommitIdIsNullClauseAccess() {
		return (pOsTxCommitIdIsNullClause != null) ? pOsTxCommitIdIsNullClause : (pOsTxCommitIdIsNullClause = new OsTxCommitIdIsNullClauseElements());
	}
	
	public ParserRule getOsTxCommitIdIsNullClauseRule() {
		return getOsTxCommitIdIsNullClauseAccess().getRule();
	}

	//OsTxIdCriteria:
	//	name="tx-id" clause=OsTxIdClause;
	public OsTxIdCriteriaElements getOsTxIdCriteriaAccess() {
		return (pOsTxIdCriteria != null) ? pOsTxIdCriteria : (pOsTxIdCriteria = new OsTxIdCriteriaElements());
	}
	
	public ParserRule getOsTxIdCriteriaRule() {
		return getOsTxIdCriteriaAccess().getRule();
	}

	//OsTxIdClause:
	//	OsTxIdEqualsClause //
	// //
	// | OsTxIdOpClause | OsTxIdRangeClause;
	public OsTxIdClauseElements getOsTxIdClauseAccess() {
		return (pOsTxIdClause != null) ? pOsTxIdClause : (pOsTxIdClause = new OsTxIdClauseElements());
	}
	
	public ParserRule getOsTxIdClauseRule() {
		return getOsTxIdClauseAccess().getRule();
	}

	//OsTxIdEqualsClause:
	//	name="=" (ids+=OsTxId | "[" ids+=OsTxId ("," ids+=OsTxId)* "]");
	public OsTxIdEqualsClauseElements getOsTxIdEqualsClauseAccess() {
		return (pOsTxIdEqualsClause != null) ? pOsTxIdEqualsClause : (pOsTxIdEqualsClause = new OsTxIdEqualsClauseElements());
	}
	
	public ParserRule getOsTxIdEqualsClauseRule() {
		return getOsTxIdEqualsClauseAccess().getRule();
	}

	//OsTxIdOpClause:
	//	op=OsNonEqualOperator id=OsTxId;
	public OsTxIdOpClauseElements getOsTxIdOpClauseAccess() {
		return (pOsTxIdOpClause != null) ? pOsTxIdOpClause : (pOsTxIdOpClause = new OsTxIdOpClauseElements());
	}
	
	public ParserRule getOsTxIdOpClauseRule() {
		return getOsTxIdOpClauseAccess().getRule();
	}

	//OsTxIdRangeClause:
	//	name="in" "(" fromId=OsTxId ".." toId=OsTxId ")";
	public OsTxIdRangeClauseElements getOsTxIdRangeClauseAccess() {
		return (pOsTxIdRangeClause != null) ? pOsTxIdRangeClause : (pOsTxIdRangeClause = new OsTxIdRangeClauseElements());
	}
	
	public ParserRule getOsTxIdRangeClauseRule() {
		return getOsTxIdRangeClauseAccess().getRule();
	}

	//OsTxTimestampCriteria:
	//	name="date" clause=OsTxTimestampClause;
	public OsTxTimestampCriteriaElements getOsTxTimestampCriteriaAccess() {
		return (pOsTxTimestampCriteria != null) ? pOsTxTimestampCriteria : (pOsTxTimestampCriteria = new OsTxTimestampCriteriaElements());
	}
	
	public ParserRule getOsTxTimestampCriteriaRule() {
		return getOsTxTimestampCriteriaAccess().getRule();
	}

	//OsTxTimestampClause:
	//	OsTxTimestampOpClause // 
	// | OsTxTimestampRangeClause;
	public OsTxTimestampClauseElements getOsTxTimestampClauseAccess() {
		return (pOsTxTimestampClause != null) ? pOsTxTimestampClause : (pOsTxTimestampClause = new OsTxTimestampClauseElements());
	}
	
	public ParserRule getOsTxTimestampClauseRule() {
		return getOsTxTimestampClauseAccess().getRule();
	}

	//OsTxTimestampOpClause:
	//	op=OsOperator timestamp=OsTxTimestamp;
	public OsTxTimestampOpClauseElements getOsTxTimestampOpClauseAccess() {
		return (pOsTxTimestampOpClause != null) ? pOsTxTimestampOpClause : (pOsTxTimestampOpClause = new OsTxTimestampOpClauseElements());
	}
	
	public ParserRule getOsTxTimestampOpClauseRule() {
		return getOsTxTimestampOpClauseAccess().getRule();
	}

	//OsTxTimestampRangeClause:
	//	name="in" "(" from=OsTxTimestamp ".." to=OsTxTimestamp ")";
	public OsTxTimestampRangeClauseElements getOsTxTimestampRangeClauseAccess() {
		return (pOsTxTimestampRangeClause != null) ? pOsTxTimestampRangeClause : (pOsTxTimestampRangeClause = new OsTxTimestampRangeClauseElements());
	}
	
	public ParserRule getOsTxTimestampRangeClauseRule() {
		return getOsTxTimestampRangeClauseAccess().getRule();
	}

	//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS ARTIFACT QUERY
	//
	//OsArtifactQueryStatement:
	//	name="artifacts" data=OsArtifactQuery collect=OsCollectClause?;
	public OsArtifactQueryStatementElements getOsArtifactQueryStatementAccess() {
		return (pOsArtifactQueryStatement != null) ? pOsArtifactQueryStatement : (pOsArtifactQueryStatement = new OsArtifactQueryStatementElements());
	}
	
	public ParserRule getOsArtifactQueryStatementRule() {
		return getOsArtifactQueryStatementAccess().getRule();
	}

	//OsArtifactQuery:
	//	OsArtifactQueryAll //
	// | OsArtifactQueryByPredicate;
	public OsArtifactQueryElements getOsArtifactQueryAccess() {
		return (pOsArtifactQuery != null) ? pOsArtifactQuery : (pOsArtifactQuery = new OsArtifactQueryElements());
	}
	
	public ParserRule getOsArtifactQueryRule() {
		return getOsArtifactQueryAccess().getRule();
	}

	//OsArtifactQueryAll:
	//	name="*";
	public OsArtifactQueryAllElements getOsArtifactQueryAllAccess() {
		return (pOsArtifactQueryAll != null) ? pOsArtifactQueryAll : (pOsArtifactQueryAll = new OsArtifactQueryAllElements());
	}
	
	public ParserRule getOsArtifactQueryAllRule() {
		return getOsArtifactQueryAllAccess().getRule();
	}

	//OsArtifactQueryByPredicate:
	//	name="where" criteria+=OsItemCriteria ("and" criteria+=OsItemCriteria)*;
	public OsArtifactQueryByPredicateElements getOsArtifactQueryByPredicateAccess() {
		return (pOsArtifactQueryByPredicate != null) ? pOsArtifactQueryByPredicate : (pOsArtifactQueryByPredicate = new OsArtifactQueryByPredicateElements());
	}
	
	public ParserRule getOsArtifactQueryByPredicateRule() {
		return getOsArtifactQueryByPredicateAccess().getRule();
	}

	//OsItemCriteria:
	//	OsArtifactCriteria //
	// //
	// | OsAttributeCriteria | OsRelationCriteria;
	public OsItemCriteriaElements getOsItemCriteriaAccess() {
		return (pOsItemCriteria != null) ? pOsItemCriteria : (pOsItemCriteria = new OsItemCriteriaElements());
	}
	
	public ParserRule getOsItemCriteriaRule() {
		return getOsItemCriteriaAccess().getRule();
	}

	//OsArtifactCriteria:
	//	OsArtifactIdCriteria //
	// //
	// | OsArtifactTypeCriteria | OsArtifactGuidCriteria;
	public OsArtifactCriteriaElements getOsArtifactCriteriaAccess() {
		return (pOsArtifactCriteria != null) ? pOsArtifactCriteria : (pOsArtifactCriteria = new OsArtifactCriteriaElements());
	}
	
	public ParserRule getOsArtifactCriteriaRule() {
		return getOsArtifactCriteriaAccess().getRule();
	}

	//OsArtifactIdCriteria:
	//	name="art-id" "=" (ids+=OsArtifactId | "[" ids+=OsArtifactId ("," ids+=OsArtifactId)* "]");
	public OsArtifactIdCriteriaElements getOsArtifactIdCriteriaAccess() {
		return (pOsArtifactIdCriteria != null) ? pOsArtifactIdCriteria : (pOsArtifactIdCriteria = new OsArtifactIdCriteriaElements());
	}
	
	public ParserRule getOsArtifactIdCriteriaRule() {
		return getOsArtifactIdCriteriaAccess().getRule();
	}

	//OsArtifactGuidCriteria:
	//	name="art-guid" "=" (ids+=OsArtifactGuid | "[" ids+=OsArtifactGuid ("," ids+=OsArtifactGuid)* "]");
	public OsArtifactGuidCriteriaElements getOsArtifactGuidCriteriaAccess() {
		return (pOsArtifactGuidCriteria != null) ? pOsArtifactGuidCriteria : (pOsArtifactGuidCriteria = new OsArtifactGuidCriteriaElements());
	}
	
	public ParserRule getOsArtifactGuidCriteriaRule() {
		return getOsArtifactGuidCriteriaAccess().getRule();
	}

	//OsArtifactTypeCriteria:
	//	name="art-type" clause=OsArtifactTypeClause;
	public OsArtifactTypeCriteriaElements getOsArtifactTypeCriteriaAccess() {
		return (pOsArtifactTypeCriteria != null) ? pOsArtifactTypeCriteria : (pOsArtifactTypeCriteria = new OsArtifactTypeCriteriaElements());
	}
	
	public ParserRule getOsArtifactTypeCriteriaRule() {
		return getOsArtifactTypeCriteriaAccess().getRule();
	}

	//OsArtifactTypeClause:
	//	OsArtifactTypeEqualsClause //
	// | OsArtifactTypeInstanceOfClause;
	public OsArtifactTypeClauseElements getOsArtifactTypeClauseAccess() {
		return (pOsArtifactTypeClause != null) ? pOsArtifactTypeClause : (pOsArtifactTypeClause = new OsArtifactTypeClauseElements());
	}
	
	public ParserRule getOsArtifactTypeClauseRule() {
		return getOsArtifactTypeClauseAccess().getRule();
	}

	//OsArtifactTypeEqualsClause:
	//	name="=" (types+=OsMetaTypeId | "[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]");
	public OsArtifactTypeEqualsClauseElements getOsArtifactTypeEqualsClauseAccess() {
		return (pOsArtifactTypeEqualsClause != null) ? pOsArtifactTypeEqualsClause : (pOsArtifactTypeEqualsClause = new OsArtifactTypeEqualsClauseElements());
	}
	
	public ParserRule getOsArtifactTypeEqualsClauseRule() {
		return getOsArtifactTypeEqualsClauseAccess().getRule();
	}

	//OsArtifactTypeInstanceOfClause:
	//	name="instance-of" (types+=OsMetaTypeId | "[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]");
	public OsArtifactTypeInstanceOfClauseElements getOsArtifactTypeInstanceOfClauseAccess() {
		return (pOsArtifactTypeInstanceOfClause != null) ? pOsArtifactTypeInstanceOfClause : (pOsArtifactTypeInstanceOfClause = new OsArtifactTypeInstanceOfClauseElements());
	}
	
	public ParserRule getOsArtifactTypeInstanceOfClauseRule() {
		return getOsArtifactTypeInstanceOfClauseAccess().getRule();
	}

	//OsAttributeCriteria:
	//	name="attribute" clause=OsAttributeClause;
	public OsAttributeCriteriaElements getOsAttributeCriteriaAccess() {
		return (pOsAttributeCriteria != null) ? pOsAttributeCriteria : (pOsAttributeCriteria = new OsAttributeCriteriaElements());
	}
	
	public ParserRule getOsAttributeCriteriaRule() {
		return getOsAttributeCriteriaAccess().getRule();
	}

	//OsAttributeClause:
	//	OsAttributeExistClause //
	// | OseAttributeOpClause;
	public OsAttributeClauseElements getOsAttributeClauseAccess() {
		return (pOsAttributeClause != null) ? pOsAttributeClause : (pOsAttributeClause = new OsAttributeClauseElements());
	}
	
	public ParserRule getOsAttributeClauseRule() {
		return getOsAttributeClauseAccess().getRule();
	}

	//OsAttributeExistClause:
	//	"type" "=" (types+=OsMetaTypeId | "[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]") name="exists";
	public OsAttributeExistClauseElements getOsAttributeExistClauseAccess() {
		return (pOsAttributeExistClause != null) ? pOsAttributeExistClause : (pOsAttributeExistClause = new OsAttributeExistClauseElements());
	}
	
	public ParserRule getOsAttributeExistClauseRule() {
		return getOsAttributeExistClauseAccess().getRule();
	}

	//OseAttributeOpClause:
	//	"type" name="=" (types+=OsMetaTypeId // 
	// | "[" types+=OsMetaTypeId ("," types+=OsMetaTypeId)* "]")
	//	(options+=OsQueryOption | "[" options+=OsQueryOption ("," options+=OsQueryOption)* "]")? //
	//
	//	(values+=OsAttributeValue | "[" values+=OsAttributeValue ("," values+=OsAttributeValue)* "]");
	public OseAttributeOpClauseElements getOseAttributeOpClauseAccess() {
		return (pOseAttributeOpClause != null) ? pOseAttributeOpClause : (pOseAttributeOpClause = new OseAttributeOpClauseElements());
	}
	
	public ParserRule getOseAttributeOpClauseRule() {
		return getOseAttributeOpClauseAccess().getRule();
	}

	//OsRelationCriteria:
	//	name="relation" clause=OsRelationClause;
	public OsRelationCriteriaElements getOsRelationCriteriaAccess() {
		return (pOsRelationCriteria != null) ? pOsRelationCriteria : (pOsRelationCriteria = new OsRelationCriteriaElements());
	}
	
	public ParserRule getOsRelationCriteriaRule() {
		return getOsRelationCriteriaAccess().getRule();
	}

	//OsRelationClause:
	//	OsRelationExistClause //
	// | OsRelatedToClause;
	public OsRelationClauseElements getOsRelationClauseAccess() {
		return (pOsRelationClause != null) ? pOsRelationClause : (pOsRelationClause = new OsRelationClauseElements());
	}
	
	public ParserRule getOsRelationClauseRule() {
		return getOsRelationClauseAccess().getRule();
	}

	//OsRelationExistClause:
	//	name="type" "=" type=OsMetaTypeId op=OsExistenceOperator ("on" side=OsRelationSide)?;
	public OsRelationExistClauseElements getOsRelationExistClauseAccess() {
		return (pOsRelationExistClause != null) ? pOsRelationExistClause : (pOsRelationExistClause = new OsRelationExistClauseElements());
	}
	
	public ParserRule getOsRelationExistClauseRule() {
		return getOsRelationExistClauseAccess().getRule();
	}

	//OsRelatedToClause:
	//	name="type" "=" type=OsMetaTypeId "on" side=OsRelationSide "id" //
	// "=" (ids+=OsArtifactId | "[" ids+=OsArtifactId
	//	("," ids+=OsArtifactId)* "]");
	public OsRelatedToClauseElements getOsRelatedToClauseAccess() {
		return (pOsRelatedToClause != null) ? pOsRelatedToClause : (pOsRelatedToClause = new OsRelatedToClauseElements());
	}
	
	public ParserRule getOsRelatedToClauseRule() {
		return getOsRelatedToClauseAccess().getRule();
	}

	//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> ORCS FOLLOW
	// OsFollowClause:
	//	name="follow" stmt=OsFollowStatement;
	public OsFollowClauseElements getOsFollowClauseAccess() {
		return (pOsFollowClause != null) ? pOsFollowClause : (pOsFollowClause = new OsFollowClauseElements());
	}
	
	public ParserRule getOsFollowClauseRule() {
		return getOsFollowClauseAccess().getRule();
	}

	//OsFollowStatement:
	//	OsFollowRelationType;
	public OsFollowStatementElements getOsFollowStatementAccess() {
		return (pOsFollowStatement != null) ? pOsFollowStatement : (pOsFollowStatement = new OsFollowStatementElements());
	}
	
	public ParserRule getOsFollowStatementRule() {
		return getOsFollowStatementAccess().getRule();
	}

	//OsFollowRelationType:
	//	name="relation" "type" "=" type=OsMetaTypeId "to" side= // 
	// OsRelationSide ("where" criteria+=OsItemCriteria ("and"
	//	criteria+=OsItemCriteria)*)? // 
	// collect=OsCollectClause?;
	public OsFollowRelationTypeElements getOsFollowRelationTypeAccess() {
		return (pOsFollowRelationType != null) ? pOsFollowRelationType : (pOsFollowRelationType = new OsFollowRelationTypeElements());
	}
	
	public ParserRule getOsFollowRelationTypeRule() {
		return getOsFollowRelationTypeAccess().getRule();
	}

	//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> TERMINALS
	// terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal SEMANTIC_VERSION:
	//	"0".."9"+ "." "0".."9"+ "." "0".."9";
	public TerminalRule getSEMANTIC_VERSIONRule() {
		return (tSEMANTIC_VERSION != null) ? tSEMANTIC_VERSION : (tSEMANTIC_VERSION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEMANTIC_VERSION"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z") ("-" | "_" | "a".."z" | "A".."Z" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal fragment SIGN:
	//	"+" | "-";
	public TerminalRule getSIGNRule() {
		return (tSIGN != null) ? tSIGN : (tSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SIGN"));
	} 

	//Number hidden():
	//	HEX | DECIMAL | INT | FLOAT;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F")+ (("b" | "B") ("i" | "I") | ("l" | "L"))?;
	public TerminalRule getHEXRule() {
		return (tHEX != null) ? tHEX : (tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX"));
	} 

	//terminal INT:
	//	SIGN? "0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal DECIMAL:
	//	INT ("." INT)?;
	public TerminalRule getDECIMALRule() {
		return (tDECIMAL != null) ? tDECIMAL : (tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL"));
	} 

	//// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> END
	// terminal FLOAT:
	//	INT (("e" | "E") INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 
}
