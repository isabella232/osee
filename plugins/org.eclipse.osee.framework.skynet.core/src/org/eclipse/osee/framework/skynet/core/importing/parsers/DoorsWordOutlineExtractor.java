/*******************************************************************************
 * Copyright (c) 2018 Boeing.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Boeing - initial API and implementation
 *******************************************************************************/
package org.eclipse.osee.framework.skynet.core.importing.parsers;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.eclipse.osee.framework.core.enums.CoreAttributeTypes;
import org.eclipse.osee.framework.jdk.core.type.OseeCoreException;
import org.eclipse.osee.framework.jdk.core.util.Strings;
import org.eclipse.osee.framework.skynet.core.importing.RoughArtifact;
import org.eclipse.osee.framework.skynet.core.importing.RoughArtifactKind;
import org.eclipse.osee.framework.skynet.core.importing.operations.RoughArtifactCollector;

/**
 * @author David W. Miller
 */
/**
 * This is a special word outline extractor that handles documents generated by Doors. It is looking for tags, wrapped
 * in {}, that define the scope and type of the artifact that is being created during the import process.
 */
public class DoorsWordOutlineExtractor extends WordOutlineExtractorDelegate {
   private static final Pattern reqnamePattern = Pattern.compile("(\\{[^}]+\\})(.*?</w:p>)");
   private int lastReqNumber = 1;

   @Override
   protected void addChildRoughArtifact(String content, RoughArtifactCollector collector) {
      StringBuilder newName = new StringBuilder();
      StringBuilder newContent = new StringBuilder();
      if (needsNewArt(content, newName, newContent)) {
         setContent(); // finishes the previous rough artifact
         String number = String.format("%s.0.%d", lastHeaderNumber.toString(), lastReqNumber++);
         roughArtifact = new RoughArtifact(RoughArtifactKind.PRIMARY);
         if (collector != null) {
            collector.addRoughArtifact(roughArtifact);
         }
         if (Strings.isValid(number)) {
            roughArtifact.setSectionNumber(number);
            roughArtifact.addAttribute(CoreAttributeTypes.ParagraphNumber, number);
         }
         roughArtifact.setName(newName.toString());
         roughArtifact.addAttribute(CoreAttributeTypes.PublishInline, "True");
         wordFormattedContent.append(newContent.toString());
         previousNamedArtifact = roughArtifact;
      } else {
         wordFormattedContent.append(content);
      }
   }

   @Override
   protected boolean checkSectionNumber(String sectionNumber) {
      if (sectionNumber.contains(".0.")) {
         return true; // special case of numbering requirements below a section number
      }
      return false;
   }

   @Override
   public void resetReqNumber() {
      lastReqNumber = 1;
   }

   @Override
   public String getName() {
      return "Doors Word Outline";
   }

   private boolean needsNewArt(String content, StringBuilder newName, StringBuilder newContent) {
      Matcher match = reqnamePattern.matcher(content);
      boolean again = false;
      while (match.find()) {
         if (again) {
            throw new OseeCoreException("new Artifact processor found too many requirement names in this block: %s",
               content);
         }
         again = true;
         String begin = content.substring(0, match.start(1));
         newName.append(content.substring(match.start(1), match.start(2)));
         String endString = content.substring(match.start(2), match.end(2));
         newContent.append(begin + endString);
         return true;
      }
      return false;
   }
}
